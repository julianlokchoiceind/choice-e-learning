/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prisma";
exports.ids = ["vendor-chunks/prisma"];
exports.modules = {

/***/ "(ssr)/./node_modules/.prisma/client/default.js":
/*!************************************************!*\
  !*** ./node_modules/.prisma/client/default.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    ...__webpack_require__(/*! . */ \"(ssr)/./node_modules/.prisma/client/index.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnByaXNtYS9jbGllbnQvZGVmYXVsdC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQUUsR0FBR0MsbUJBQU9BLENBQUMsd0RBQUk7QUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Nob2ljZS1lLWxlYXJuaW5nLy4vbm9kZV9tb2R1bGVzLy5wcmlzbWEvY2xpZW50L2RlZmF1bHQuanM/ZDAwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgLi4ucmVxdWlyZSgnLicpIH0iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.prisma/client/default.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.prisma/client/index.js":
/*!**********************************************!*\
  !*** ./node_modules/.prisma/client/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __webpack_require__(/*! ./runtime/library.js */ \"(ssr)/./node_modules/.prisma/client/runtime/library.js\");\nconst Prisma = {};\nexports.Prisma = Prisma;\nexports.$Enums = {};\n/**\n * Prisma Client JS version: 6.6.0\n * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a\n */ Prisma.prismaVersion = {\n    client: \"6.6.0\",\n    engine: \"f676762280b54cd07c770017ed3711ddde35f37a\"\n};\nPrisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;\nPrisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;\nPrisma.PrismaClientRustPanicError = PrismaClientRustPanicError;\nPrisma.PrismaClientInitializationError = PrismaClientInitializationError;\nPrisma.PrismaClientValidationError = PrismaClientValidationError;\nPrisma.Decimal = Decimal;\n/**\n * Re-export of sql-template-tag\n */ Prisma.sql = sqltag;\nPrisma.empty = empty;\nPrisma.join = join;\nPrisma.raw = raw;\nPrisma.validator = Public.validator;\n/**\n* Extensions\n*/ Prisma.getExtensionContext = Extensions.getExtensionContext;\nPrisma.defineExtension = Extensions.defineExtension;\n/**\n * Shorthand utilities for JSON filtering\n */ Prisma.DbNull = objectEnumValues.instances.DbNull;\nPrisma.JsonNull = objectEnumValues.instances.JsonNull;\nPrisma.AnyNull = objectEnumValues.instances.AnyNull;\nPrisma.NullTypes = {\n    DbNull: objectEnumValues.classes.DbNull,\n    JsonNull: objectEnumValues.classes.JsonNull,\n    AnyNull: objectEnumValues.classes.AnyNull\n};\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Enums\n */ exports.Prisma.UserScalarFieldEnum = {\n    id: \"id\",\n    name: \"name\",\n    email: \"email\",\n    password: \"password\",\n    role: \"role\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    enrolledIds: \"enrolledIds\"\n};\nexports.Prisma.CourseScalarFieldEnum = {\n    id: \"id\",\n    title: \"title\",\n    description: \"description\",\n    price: \"price\",\n    imageUrl: \"imageUrl\",\n    level: \"level\",\n    topics: \"topics\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\",\n    studentIds: \"studentIds\"\n};\nexports.Prisma.LessonScalarFieldEnum = {\n    id: \"id\",\n    title: \"title\",\n    content: \"content\",\n    videoUrl: \"videoUrl\",\n    order: \"order\",\n    courseId: \"courseId\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.ChallengeScalarFieldEnum = {\n    id: \"id\",\n    title: \"title\",\n    description: \"description\",\n    difficulty: \"difficulty\",\n    startDate: \"startDate\",\n    endDate: \"endDate\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.SubmissionScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    challengeId: \"challengeId\",\n    content: \"content\",\n    score: \"score\",\n    feedback: \"feedback\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.ReviewScalarFieldEnum = {\n    id: \"id\",\n    userId: \"userId\",\n    courseId: \"courseId\",\n    rating: \"rating\",\n    comment: \"comment\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.FAQScalarFieldEnum = {\n    id: \"id\",\n    question: \"question\",\n    answer: \"answer\",\n    category: \"category\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.RoadmapScalarFieldEnum = {\n    id: \"id\",\n    title: \"title\",\n    description: \"description\",\n    createdAt: \"createdAt\",\n    updatedAt: \"updatedAt\"\n};\nexports.Prisma.SortOrder = {\n    asc: \"asc\",\n    desc: \"desc\"\n};\nexports.Prisma.QueryMode = {\n    default: \"default\",\n    insensitive: \"insensitive\"\n};\nexports.Role = exports.$Enums.Role = {\n    student: \"student\",\n    admin: \"admin\"\n};\nexports.Level = exports.$Enums.Level = {\n    beginner: \"beginner\",\n    intermediate: \"intermediate\",\n    advanced: \"advanced\"\n};\nexports.Difficulty = exports.$Enums.Difficulty = {\n    easy: \"easy\",\n    medium: \"medium\",\n    hard: \"hard\"\n};\nexports.Prisma.ModelName = {\n    User: \"User\",\n    Course: \"Course\",\n    Lesson: \"Lesson\",\n    Challenge: \"Challenge\",\n    Submission: \"Submission\",\n    Review: \"Review\",\n    FAQ: \"FAQ\",\n    Roadmap: \"Roadmap\"\n};\n/**\n * Create the Client\n */ const config = {\n    \"generator\": {\n        \"name\": \"client\",\n        \"provider\": {\n            \"fromEnvVar\": null,\n            \"value\": \"prisma-client-js\"\n        },\n        \"output\": {\n            \"value\": \"/Users/julianlok/Documents/choice-e-learning/node_modules/.prisma/client\",\n            \"fromEnvVar\": null\n        },\n        \"config\": {\n            \"engineType\": \"library\"\n        },\n        \"binaryTargets\": [\n            {\n                \"fromEnvVar\": null,\n                \"value\": \"darwin-arm64\",\n                \"native\": true\n            }\n        ],\n        \"previewFeatures\": [],\n        \"sourceFilePath\": \"/Users/julianlok/Documents/choice-e-learning/prisma/schema.prisma\",\n        \"isCustomOutput\": true\n    },\n    \"relativeEnvPaths\": {\n        \"rootEnvPath\": null\n    },\n    \"relativePath\": \"../../../prisma\",\n    \"clientVersion\": \"6.6.0\",\n    \"engineVersion\": \"f676762280b54cd07c770017ed3711ddde35f37a\",\n    \"datasourceNames\": [\n        \"db\"\n    ],\n    \"activeProvider\": \"mongodb\",\n    \"postinstall\": false,\n    \"inlineDatasources\": {\n        \"db\": {\n            \"url\": {\n                \"fromEnvVar\": \"DATABASE_URL\",\n                \"value\": null\n            }\n        }\n    },\n    \"inlineSchema\": '// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\\n\\ngenerator client {\\n  provider = \"prisma-client-js\"\\n  output   = \"../node_modules/.prisma/client\"\\n}\\n\\ndatasource db {\\n  provider = \"mongodb\"\\n  url      = env(\"DATABASE_URL\")\\n}\\n\\nmodel User {\\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  name      String\\n  email     String   @unique\\n  password  String\\n  role      Role     @default(student)\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  reviews     Review[]\\n  enrolledIn  Course[]     @relation(\"EnrolledStudents\", fields: [enrolledIds], references: [id])\\n  enrolledIds String[]     @db.ObjectId\\n  submissions Submission[]\\n\\n  @@map(\"users\")\\n}\\n\\nenum Role {\\n  student\\n  admin\\n}\\n\\nmodel Course {\\n  id          String   @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  title       String\\n  description String\\n  price       Float\\n  imageUrl    String?\\n  level       Level\\n  topics      String[]\\n  lessons     Lesson[]\\n  createdAt   DateTime @default(now())\\n  updatedAt   DateTime @updatedAt\\n\\n  students   User[]   @relation(\"EnrolledStudents\", fields: [studentIds], references: [id])\\n  studentIds String[] @db.ObjectId\\n  reviews    Review[]\\n\\n  @@map(\"courses\")\\n}\\n\\nenum Level {\\n  beginner\\n  intermediate\\n  advanced\\n}\\n\\nmodel Lesson {\\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  title     String\\n  content   String\\n  videoUrl  String?\\n  order     Int\\n  courseId  String   @db.ObjectId\\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  @@map(\"lessons\")\\n}\\n\\nmodel Challenge {\\n  id          String       @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  title       String\\n  description String\\n  difficulty  Difficulty\\n  startDate   DateTime\\n  endDate     DateTime\\n  submissions Submission[]\\n  createdAt   DateTime     @default(now())\\n  updatedAt   DateTime     @updatedAt\\n\\n  @@map(\"challenges\")\\n}\\n\\nenum Difficulty {\\n  easy\\n  medium\\n  hard\\n}\\n\\nmodel Submission {\\n  id          String    @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  userId      String    @db.ObjectId\\n  user        User      @relation(fields: [userId], references: [id])\\n  challengeId String    @db.ObjectId\\n  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)\\n  content     String\\n  score       Float?\\n  feedback    String?\\n  createdAt   DateTime  @default(now())\\n  updatedAt   DateTime  @updatedAt\\n\\n  @@map(\"submissions\")\\n}\\n\\nmodel Review {\\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  userId    String   @db.ObjectId\\n  user      User     @relation(fields: [userId], references: [id])\\n  courseId  String   @db.ObjectId\\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\\n  rating    Int\\n  comment   String\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  @@map(\"reviews\")\\n}\\n\\nmodel FAQ {\\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  question  String\\n  answer    String\\n  category  String\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n\\n  @@map(\"faqs\")\\n}\\n\\nmodel Roadmap {\\n  id          String        @id @default(auto()) @map(\"_id\") @db.ObjectId\\n  title       String\\n  description String\\n  steps       RoadmapStep[]\\n  createdAt   DateTime      @default(now())\\n  updatedAt   DateTime      @updatedAt\\n\\n  @@map(\"roadmaps\")\\n}\\n\\ntype RoadmapStep {\\n  id          String\\n  title       String\\n  description String\\n  order       Int\\n  resources   String[]\\n}\\n',\n    \"inlineSchemaHash\": \"ec6ed2a8ba35527131b6ff8f0e09b527b1d3b202590501f2612139dfa6ef3e93\",\n    \"copyEngine\": true\n};\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconfig.dirname = __dirname;\nif (!fs.existsSync(path.join(__dirname, \"schema.prisma\"))) {\n    const alternativePaths = [\n        \"node_modules/.prisma/client\",\n        \".prisma/client\"\n    ];\n    const alternativePath = alternativePaths.find((altPath)=>{\n        return fs.existsSync(path.join(process.cwd(), altPath, \"schema.prisma\"));\n    }) ?? alternativePaths[0];\n    config.dirname = path.join(process.cwd(), alternativePath);\n    config.isBundled = true;\n}\nconfig.runtimeDataModel = JSON.parse('{\"models\":{\"User\":{\"dbName\":\"users\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"email\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"password\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"role\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"Role\",\"nativeType\":null,\"default\":\"student\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"reviews\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Review\",\"nativeType\":null,\"relationName\":\"ReviewToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"enrolledIn\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Course\",\"nativeType\":null,\"relationName\":\"EnrolledStudents\",\"relationFromFields\":[\"enrolledIds\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"enrolledIds\",\"kind\":\"scalar\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"submissions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Submission\",\"nativeType\":null,\"relationName\":\"SubmissionToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Course\":{\"dbName\":\"courses\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"price\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"level\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Level\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"topics\",\"kind\":\"scalar\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"lessons\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Lesson\",\"nativeType\":null,\"relationName\":\"CourseToLesson\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true},{\"name\":\"students\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"nativeType\":null,\"relationName\":\"EnrolledStudents\",\"relationFromFields\":[\"studentIds\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"studentIds\",\"kind\":\"scalar\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"reviews\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Review\",\"nativeType\":null,\"relationName\":\"CourseToReview\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Lesson\":{\"dbName\":\"lessons\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"content\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"courseId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"course\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Course\",\"nativeType\":null,\"relationName\":\"CourseToLesson\",\"relationFromFields\":[\"courseId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Challenge\":{\"dbName\":\"challenges\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"difficulty\",\"kind\":\"enum\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Difficulty\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"startDate\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"endDate\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"submissions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Submission\",\"nativeType\":null,\"relationName\":\"ChallengeToSubmission\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Submission\":{\"dbName\":\"submissions\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"user\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"nativeType\":null,\"relationName\":\"SubmissionToUser\",\"relationFromFields\":[\"userId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"challengeId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"challenge\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Challenge\",\"nativeType\":null,\"relationName\":\"ChallengeToSubmission\",\"relationFromFields\":[\"challengeId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"content\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"score\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Float\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"feedback\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Review\":{\"dbName\":\"reviews\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"user\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"nativeType\":null,\"relationName\":\"ReviewToUser\",\"relationFromFields\":[\"userId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"courseId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"course\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Course\",\"nativeType\":null,\"relationName\":\"CourseToReview\",\"relationFromFields\":[\"courseId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"rating\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"comment\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"FAQ\":{\"dbName\":\"faqs\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"question\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"answer\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"category\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Roadmap\":{\"dbName\":\"roadmaps\",\"schema\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"nativeType\":[\"ObjectId\",[]],\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"steps\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"RoadmapStep\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"DateTime\",\"nativeType\":null,\"default\":{\"name\":\"now\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"nativeType\":null,\"isGenerated\":false,\"isUpdatedAt\":true}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false}},\"enums\":{\"Role\":{\"values\":[{\"name\":\"student\",\"dbName\":null},{\"name\":\"admin\",\"dbName\":null}],\"dbName\":null},\"Level\":{\"values\":[{\"name\":\"beginner\",\"dbName\":null},{\"name\":\"intermediate\",\"dbName\":null},{\"name\":\"advanced\",\"dbName\":null}],\"dbName\":null},\"Difficulty\":{\"values\":[{\"name\":\"easy\",\"dbName\":null},{\"name\":\"medium\",\"dbName\":null},{\"name\":\"hard\",\"dbName\":null}],\"dbName\":null}},\"types\":{\"RoadmapStep\":{\"dbName\":null,\"schema\":null,\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null},{\"name\":\"description\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null},{\"name\":\"order\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Int\",\"nativeType\":null},{\"name\":\"resources\",\"kind\":\"scalar\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"nativeType\":null}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[]}}}');\ndefineDmmfProperty(exports.Prisma, config.runtimeDataModel);\nconfig.engineWasm = undefined;\nconfig.compilerWasm = undefined;\nconst { warnEnvConflicts } = __webpack_require__(/*! ./runtime/library.js */ \"(ssr)/./node_modules/.prisma/client/runtime/library.js\");\nwarnEnvConflicts({\n    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),\n    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)\n});\nconst PrismaClient = getPrismaClient(config);\nexports.PrismaClient = PrismaClient;\nObject.assign(exports, Prisma);\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"libquery_engine-darwin-arm64.dylib.node\");\npath.join(process.cwd(), \"node_modules/.prisma/client/libquery_engine-darwin-arm64.dylib.node\");\n// file annotations for bundling tools to include these files\npath.join(__dirname, \"schema.prisma\");\npath.join(process.cwd(), \"node_modules/.prisma/client/schema.prisma\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.prisma/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.prisma/client/runtime/library.js":
/*!********************************************************!*\
  !*** ./node_modules/.prisma/client/runtime/library.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar bu = Object.create;\nvar qt = Object.defineProperty;\nvar Eu = Object.getOwnPropertyDescriptor;\nvar wu = Object.getOwnPropertyNames;\nvar xu = Object.getPrototypeOf, vu = Object.prototype.hasOwnProperty;\nvar Do = (e1, r1)=>()=>(e1 && (r1 = e1(e1 = 0)), r1);\nvar ne = (e1, r1)=>()=>(r1 || e1((r1 = {\n            exports: {}\n        }).exports, r1), r1.exports), tr = (e1, r1)=>{\n    for(var t1 in r1)qt(e1, t1, {\n        get: r1[t1],\n        enumerable: !0\n    });\n}, _o = (e1, r1, t1, n1)=>{\n    if (r1 && typeof r1 == \"object\" || typeof r1 == \"function\") for (let i1 of wu(r1))!vu.call(e1, i1) && i1 !== t1 && qt(e1, i1, {\n        get: ()=>r1[i1],\n        enumerable: !(n1 = Eu(r1, i1)) || n1.enumerable\n    });\n    return e1;\n};\nvar k = (e1, r1, t1)=>(t1 = e1 != null ? bu(xu(e1)) : {}, _o(r1 || !e1 || !e1.__esModule ? qt(t1, \"default\", {\n        value: e1,\n        enumerable: !0\n    }) : t1, e1)), Pu = (e1)=>_o(qt({}, \"__esModule\", {\n        value: !0\n    }), e1);\nvar mi = ne((_g1, ss1)=>{\n    \"use strict\";\n    ss1.exports = (e1, r1 = process.argv)=>{\n        let t1 = e1.startsWith(\"-\") ? \"\" : e1.length === 1 ? \"-\" : \"--\", n1 = r1.indexOf(t1 + e1), i1 = r1.indexOf(\"--\");\n        return n1 !== -1 && (i1 === -1 || n1 < i1);\n    };\n});\nvar us = ne((Ng1, ls1)=>{\n    \"use strict\";\n    var Mc1 = __webpack_require__(/*! node:os */ \"node:os\"), as1 = __webpack_require__(/*! node:tty */ \"node:tty\"), de1 = mi(), { env: G1 } = process, Qe1;\n    de1(\"no-color\") || de1(\"no-colors\") || de1(\"color=false\") || de1(\"color=never\") ? Qe1 = 0 : (de1(\"color\") || de1(\"colors\") || de1(\"color=true\") || de1(\"color=always\")) && (Qe1 = 1);\n    \"FORCE_COLOR\" in G1 && (G1.FORCE_COLOR === \"true\" ? Qe1 = 1 : G1.FORCE_COLOR === \"false\" ? Qe1 = 0 : Qe1 = G1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G1.FORCE_COLOR, 10), 3));\n    function fi1(e1) {\n        return e1 === 0 ? !1 : {\n            level: e1,\n            hasBasic: !0,\n            has256: e1 >= 2,\n            has16m: e1 >= 3\n        };\n    }\n    function gi1(e1, r1) {\n        if (Qe1 === 0) return 0;\n        if (de1(\"color=16m\") || de1(\"color=full\") || de1(\"color=truecolor\")) return 3;\n        if (de1(\"color=256\")) return 2;\n        if (e1 && !r1 && Qe1 === void 0) return 0;\n        let t1 = Qe1 || 0;\n        if (G1.TERM === \"dumb\") return t1;\n        if (process.platform === \"win32\") {\n            let n1 = Mc1.release().split(\".\");\n            return Number(n1[0]) >= 10 && Number(n1[2]) >= 10586 ? Number(n1[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G1) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n1)=>n1 in G1) || G1.CI_NAME === \"codeship\" ? 1 : t1;\n        if (\"TEAMCITY_VERSION\" in G1) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G1.TEAMCITY_VERSION) ? 1 : 0;\n        if (G1.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G1) {\n            let n1 = parseInt((G1.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n1 >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G1.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G1.TERM) || \"COLORTERM\" in G1 ? 1 : t1;\n    }\n    function $c1(e1) {\n        let r1 = gi1(e1, e1 && e1.isTTY);\n        return fi1(r1);\n    }\n    ls1.exports = {\n        supportsColor: $c1,\n        stdout: fi1(gi1(!0, as1.isatty(1))),\n        stderr: fi1(gi1(!0, as1.isatty(2)))\n    };\n});\nvar ds = ne((Lg1, ps1)=>{\n    \"use strict\";\n    var qc1 = us(), br1 = mi();\n    function cs1(e1) {\n        if (/^\\d{3,4}$/.test(e1)) {\n            let t1 = /(\\d{1,2})(\\d{2})/.exec(e1) || [];\n            return {\n                major: 0,\n                minor: parseInt(t1[1], 10),\n                patch: parseInt(t1[2], 10)\n            };\n        }\n        let r1 = (e1 || \"\").split(\".\").map((t1)=>parseInt(t1, 10));\n        return {\n            major: r1[0],\n            minor: r1[1],\n            patch: r1[2]\n        };\n    }\n    function hi1(e1) {\n        let { CI: r1, FORCE_HYPERLINK: t1, NETLIFY: n1, TEAMCITY_VERSION: i1, TERM_PROGRAM: o1, TERM_PROGRAM_VERSION: s1, VTE_VERSION: a1, TERM: l1 } = process.env;\n        if (t1) return !(t1.length > 0 && parseInt(t1, 10) === 0);\n        if (br1(\"no-hyperlink\") || br1(\"no-hyperlinks\") || br1(\"hyperlink=false\") || br1(\"hyperlink=never\")) return !1;\n        if (br1(\"hyperlink=true\") || br1(\"hyperlink=always\") || n1) return !0;\n        if (!qc1.supportsColor(e1) || e1 && !e1.isTTY) return !1;\n        if (\"WT_SESSION\" in process.env) return !0;\n        if (process.platform === \"win32\" || r1 || i1) return !1;\n        if (o1) {\n            let u1 = cs1(s1 || \"\");\n            switch(o1){\n                case \"iTerm.app\":\n                    return u1.major === 3 ? u1.minor >= 1 : u1.major > 3;\n                case \"WezTerm\":\n                    return u1.major >= 20200620;\n                case \"vscode\":\n                    return u1.major > 1 || u1.major === 1 && u1.minor >= 72;\n                case \"ghostty\":\n                    return !0;\n            }\n        }\n        if (a1) {\n            if (a1 === \"0.50.0\") return !1;\n            let u1 = cs1(a1);\n            return u1.major > 0 || u1.minor >= 50;\n        }\n        switch(l1){\n            case \"alacritty\":\n                return !0;\n        }\n        return !1;\n    }\n    ps1.exports = {\n        supportsHyperlink: hi1,\n        stdout: hi1(process.stdout),\n        stderr: hi1(process.stderr)\n    };\n});\nvar ms = ne((Hg1, jc1)=>{\n    jc1.exports = {\n        name: \"@prisma/internals\",\n        version: \"6.6.0\",\n        description: \"This package is intended for Prisma's internal use\",\n        main: \"dist/index.js\",\n        types: \"dist/index.d.ts\",\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/prisma.git\",\n            directory: \"packages/internals\"\n        },\n        homepage: \"https://www.prisma.io\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        bugs: \"https://github.com/prisma/prisma/issues\",\n        license: \"Apache-2.0\",\n        scripts: {\n            dev: \"DEV=true tsx helpers/build.ts\",\n            build: \"tsx helpers/build.ts\",\n            test: \"dotenv -e ../../.db.env -- jest --silent\",\n            prepublishOnly: \"pnpm run build\"\n        },\n        files: [\n            \"README.md\",\n            \"dist\",\n            \"!**/libquery_engine*\",\n            \"!dist/get-generators/engines/*\",\n            \"scripts\"\n        ],\n        devDependencies: {\n            \"@babel/helper-validator-identifier\": \"7.25.9\",\n            \"@opentelemetry/api\": \"1.9.0\",\n            \"@swc/core\": \"1.11.5\",\n            \"@swc/jest\": \"0.2.37\",\n            \"@types/babel__helper-validator-identifier\": \"7.15.2\",\n            \"@types/jest\": \"29.5.14\",\n            \"@types/node\": \"18.19.76\",\n            \"@types/resolve\": \"1.20.6\",\n            archiver: \"6.0.2\",\n            \"checkpoint-client\": \"1.1.33\",\n            \"cli-truncate\": \"4.0.0\",\n            dotenv: \"16.4.7\",\n            esbuild: \"0.25.1\",\n            \"escape-string-regexp\": \"5.0.0\",\n            execa: \"5.1.1\",\n            \"fast-glob\": \"3.3.3\",\n            \"find-up\": \"7.0.0\",\n            \"fp-ts\": \"2.16.9\",\n            \"fs-extra\": \"11.3.0\",\n            \"fs-jetpack\": \"5.1.0\",\n            \"global-dirs\": \"4.0.0\",\n            globby: \"11.1.0\",\n            \"identifier-regex\": \"1.0.0\",\n            \"indent-string\": \"4.0.0\",\n            \"is-windows\": \"1.0.2\",\n            \"is-wsl\": \"3.1.0\",\n            jest: \"29.7.0\",\n            \"jest-junit\": \"16.0.0\",\n            kleur: \"4.1.5\",\n            \"mock-stdin\": \"1.0.0\",\n            \"new-github-issue-url\": \"0.2.1\",\n            \"node-fetch\": \"3.3.2\",\n            \"npm-packlist\": \"5.1.3\",\n            open: \"7.4.2\",\n            \"p-map\": \"4.0.0\",\n            \"read-package-up\": \"11.0.0\",\n            resolve: \"1.22.10\",\n            \"string-width\": \"7.2.0\",\n            \"strip-ansi\": \"6.0.1\",\n            \"strip-indent\": \"4.0.0\",\n            \"temp-dir\": \"2.0.0\",\n            tempy: \"1.0.1\",\n            \"terminal-link\": \"4.0.0\",\n            tmp: \"0.2.3\",\n            \"ts-node\": \"10.9.2\",\n            \"ts-pattern\": \"5.6.2\",\n            \"ts-toolbelt\": \"9.6.0\",\n            typescript: \"5.4.5\",\n            yarn: \"1.22.22\"\n        },\n        dependencies: {\n            \"@prisma/config\": \"workspace:*\",\n            \"@prisma/debug\": \"workspace:*\",\n            \"@prisma/dmmf\": \"workspace:*\",\n            \"@prisma/driver-adapter-utils\": \"workspace:*\",\n            \"@prisma/engines\": \"workspace:*\",\n            \"@prisma/fetch-engine\": \"workspace:*\",\n            \"@prisma/generator\": \"workspace:*\",\n            \"@prisma/generator-helper\": \"workspace:*\",\n            \"@prisma/get-platform\": \"workspace:*\",\n            \"@prisma/prisma-schema-wasm\": \"6.6.0-53.f676762280b54cd07c770017ed3711ddde35f37a\",\n            \"@prisma/schema-engine-wasm\": \"6.6.0-53.f676762280b54cd07c770017ed3711ddde35f37a\",\n            \"@prisma/schema-files-loader\": \"workspace:*\",\n            arg: \"5.0.2\",\n            prompts: \"2.4.2\"\n        },\n        peerDependencies: {\n            typescript: \">=5.1.0\"\n        },\n        peerDependenciesMeta: {\n            typescript: {\n                optional: !0\n            }\n        },\n        sideEffects: !1\n    };\n});\nvar Ei = ne((zg1, Uc1)=>{\n    Uc1.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"6.6.0-53.f676762280b54cd07c770017ed3711ddde35f37a\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"f676762280b54cd07c770017ed3711ddde35f37a\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.76\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar wi = ne((Xt1)=>{\n    \"use strict\";\n    Object.defineProperty(Xt1, \"__esModule\", {\n        value: !0\n    });\n    Xt1.enginesVersion = void 0;\n    Xt1.enginesVersion = Ei().prisma.enginesVersion;\n});\nvar bs = ne((hh1, ys1)=>{\n    \"use strict\";\n    ys1.exports = (e1)=>{\n        let r1 = e1.match(/^[ \\t]*(?=\\S)/gm);\n        return r1 ? r1.reduce((t1, n1)=>Math.min(t1, n1.length), 1 / 0) : 0;\n    };\n});\nvar Ri = ne((Eh1, xs1)=>{\n    \"use strict\";\n    xs1.exports = (e1, r1 = 1, t1)=>{\n        if (t1 = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...t1\n        }, typeof e1 != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e1}\\``);\n        if (typeof r1 != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof r1}\\``);\n        if (typeof t1.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof t1.indent}\\``);\n        if (r1 === 0) return e1;\n        let n1 = t1.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e1.replace(n1, t1.indent.repeat(r1));\n    };\n});\nvar Ss = ne((vh1, Ts1)=>{\n    \"use strict\";\n    Ts1.exports = ({ onlyFirst: e1 = !1 } = {})=>{\n        let r1 = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(r1, e1 ? void 0 : \"g\");\n    };\n});\nvar ki = ne((Ph1, Rs1)=>{\n    \"use strict\";\n    var Xc1 = Ss();\n    Rs1.exports = (e1)=>typeof e1 == \"string\" ? e1.replace(Xc1(), \"\") : e1;\n});\nvar Cs = ne((Ch1, ep1)=>{\n    ep1.exports = {\n        name: \"dotenv\",\n        version: \"16.4.7\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                types: \"./lib/main.d.ts\",\n                require: \"./lib/main.js\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n            \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        funding: \"https://dotenvx.com\",\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^18.11.3\",\n            decache: \"^4.6.2\",\n            sinon: \"^14.0.1\",\n            standard: \"^17.0.0\",\n            \"standard-version\": \"^9.5.0\",\n            tap: \"^19.2.0\",\n            typescript: \"^4.8.4\"\n        },\n        engines: {\n            node: \">=12\"\n        },\n        browser: {\n            fs: !1\n        }\n    };\n});\nvar Os = ne((Ah1, Ne1)=>{\n    \"use strict\";\n    var Di1 = __webpack_require__(/*! node:fs */ \"node:fs\"), _i1 = __webpack_require__(/*! node:path */ \"node:path\"), rp1 = __webpack_require__(/*! node:os */ \"node:os\"), tp1 = __webpack_require__(/*! node:crypto */ \"node:crypto\"), np1 = Cs(), Ni1 = np1.version, ip1 = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function op1(e1) {\n        let r1 = {}, t1 = e1.toString();\n        t1 = t1.replace(/\\r\\n?/mg, `\n`);\n        let n1;\n        for(; (n1 = ip1.exec(t1)) != null;){\n            let i1 = n1[1], o1 = n1[2] || \"\";\n            o1 = o1.trim();\n            let s1 = o1[0];\n            o1 = o1.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s1 === '\"' && (o1 = o1.replace(/\\\\n/g, `\n`), o1 = o1.replace(/\\\\r/g, \"\\r\")), r1[i1] = o1;\n        }\n        return r1;\n    }\n    function sp1(e1) {\n        let r1 = ks1(e1), t1 = B1.configDotenv({\n            path: r1\n        });\n        if (!t1.parsed) {\n            let s1 = new Error(`MISSING_DATA: Cannot parse ${r1} for an unknown reason`);\n            throw s1.code = \"MISSING_DATA\", s1;\n        }\n        let n1 = Is1(e1).split(\",\"), i1 = n1.length, o1;\n        for(let s1 = 0; s1 < i1; s1++)try {\n            let a1 = n1[s1].trim(), l1 = up1(t1, a1);\n            o1 = B1.decrypt(l1.ciphertext, l1.key);\n            break;\n        } catch (a1) {\n            if (s1 + 1 >= i1) throw a1;\n        }\n        return B1.parse(o1);\n    }\n    function ap1(e1) {\n        ;\n    }\n    function lp1(e1) {\n        ;\n    }\n    function tn1(e1) {\n        ;\n    }\n    function Is1(e1) {\n        return e1 && e1.DOTENV_KEY && e1.DOTENV_KEY.length > 0 ? e1.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : \"\";\n    }\n    function up1(e1, r1) {\n        let t1;\n        try {\n            t1 = new URL(r1);\n        } catch (a1) {\n            if (a1.code === \"ERR_INVALID_URL\") {\n                let l1 = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n                throw l1.code = \"INVALID_DOTENV_KEY\", l1;\n            }\n            throw a1;\n        }\n        let n1 = t1.password;\n        if (!n1) {\n            let a1 = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n            throw a1.code = \"INVALID_DOTENV_KEY\", a1;\n        }\n        let i1 = t1.searchParams.get(\"environment\");\n        if (!i1) {\n            let a1 = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n            throw a1.code = \"INVALID_DOTENV_KEY\", a1;\n        }\n        let o1 = `DOTENV_VAULT_${i1.toUpperCase()}`, s1 = e1.parsed[o1];\n        if (!s1) {\n            let a1 = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o1} in your .env.vault file.`);\n            throw a1.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\", a1;\n        }\n        return {\n            ciphertext: s1,\n            key: n1\n        };\n    }\n    function ks1(e1) {\n        let r1 = null;\n        if (e1 && e1.path && e1.path.length > 0) if (Array.isArray(e1.path)) for (let t1 of e1.path)Di1.existsSync(t1) && (r1 = t1.endsWith(\".vault\") ? t1 : `${t1}.vault`);\n        else r1 = e1.path.endsWith(\".vault\") ? e1.path : `${e1.path}.vault`;\n        else r1 = _i1.resolve(process.cwd(), \".env.vault\");\n        return Di1.existsSync(r1) ? r1 : null;\n    }\n    function As1(e1) {\n        return e1[0] === \"~\" ? _i1.join(rp1.homedir(), e1.slice(1)) : e1;\n    }\n    function cp1(e1) {\n        ap1(\"Loading env from encrypted .env.vault\");\n        let r1 = B1._parseVault(e1), t1 = process.env;\n        return e1 && e1.processEnv != null && (t1 = e1.processEnv), B1.populate(t1, r1, e1), {\n            parsed: r1\n        };\n    }\n    function pp1(e1) {\n        let r1 = _i1.resolve(process.cwd(), \".env\"), t1 = \"utf8\", n1 = !!(e1 && e1.debug);\n        e1 && e1.encoding ? t1 = e1.encoding : n1 && tn1(\"No encoding is specified. UTF-8 is used by default\");\n        let i1 = [\n            r1\n        ];\n        if (e1 && e1.path) if (!Array.isArray(e1.path)) i1 = [\n            As1(e1.path)\n        ];\n        else {\n            i1 = [];\n            for (let l1 of e1.path)i1.push(As1(l1));\n        }\n        let o1, s1 = {};\n        for (let l1 of i1)try {\n            let u1 = B1.parse(Di1.readFileSync(l1, {\n                encoding: t1\n            }));\n            B1.populate(s1, u1, e1);\n        } catch (u1) {\n            n1 && tn1(`Failed to load ${l1} ${u1.message}`), o1 = u1;\n        }\n        let a1 = process.env;\n        return e1 && e1.processEnv != null && (a1 = e1.processEnv), B1.populate(a1, s1, e1), o1 ? {\n            parsed: s1,\n            error: o1\n        } : {\n            parsed: s1\n        };\n    }\n    function dp1(e1) {\n        if (Is1(e1).length === 0) return B1.configDotenv(e1);\n        let r1 = ks1(e1);\n        return r1 ? B1._configVault(e1) : (lp1(`You set DOTENV_KEY but you are missing a .env.vault file at ${r1}. Did you forget to build it?`), B1.configDotenv(e1));\n    }\n    function mp1(e1, r1) {\n        let t1 = Buffer.from(r1.slice(-64), \"hex\"), n1 = Buffer.from(e1, \"base64\"), i1 = n1.subarray(0, 12), o1 = n1.subarray(-16);\n        n1 = n1.subarray(12, -16);\n        try {\n            let s1 = tp1.createDecipheriv(\"aes-256-gcm\", t1, i1);\n            return s1.setAuthTag(o1), `${s1.update(n1)}${s1.final()}`;\n        } catch (s1) {\n            let a1 = s1 instanceof RangeError, l1 = s1.message === \"Invalid key length\", u1 = s1.message === \"Unsupported state or unable to authenticate data\";\n            if (a1 || l1) {\n                let c1 = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n                throw c1.code = \"INVALID_DOTENV_KEY\", c1;\n            } else if (u1) {\n                let c1 = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n                throw c1.code = \"DECRYPTION_FAILED\", c1;\n            } else throw s1;\n        }\n    }\n    function fp1(e1, r1, t1 = {}) {\n        let n1 = !!(t1 && t1.debug), i1 = !!(t1 && t1.override);\n        if (typeof r1 != \"object\") {\n            let o1 = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n            throw o1.code = \"OBJECT_REQUIRED\", o1;\n        }\n        for (let o1 of Object.keys(r1))Object.prototype.hasOwnProperty.call(e1, o1) ? (i1 === !0 && (e1[o1] = r1[o1]), n1 && tn1(i1 === !0 ? `\"${o1}\" is already defined and WAS overwritten` : `\"${o1}\" is already defined and was NOT overwritten`)) : e1[o1] = r1[o1];\n    }\n    var B1 = {\n        configDotenv: pp1,\n        _configVault: cp1,\n        _parseVault: sp1,\n        config: dp1,\n        decrypt: mp1,\n        parse: op1,\n        populate: fp1\n    };\n    Ne1.exports.configDotenv = B1.configDotenv;\n    Ne1.exports._configVault = B1._configVault;\n    Ne1.exports._parseVault = B1._parseVault;\n    Ne1.exports.config = B1.config;\n    Ne1.exports.decrypt = B1.decrypt;\n    Ne1.exports.parse = B1.parse;\n    Ne1.exports.populate = B1.populate;\n    Ne1.exports = B1;\n});\nvar Ls = ne((Nh1, on1)=>{\n    \"use strict\";\n    on1.exports = (e1 = {})=>{\n        let r1;\n        if (e1.repoUrl) r1 = e1.repoUrl;\n        else if (e1.user && e1.repo) r1 = `https://github.com/${e1.user}/${e1.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let t1 = new URL(`${r1}/issues/new`), n1 = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i1 of n1){\n            let o1 = e1[i1];\n            if (o1 !== void 0) {\n                if (i1 === \"labels\" || i1 === \"projects\") {\n                    if (!Array.isArray(o1)) throw new TypeError(`The \\`${i1}\\` option should be an array`);\n                    o1 = o1.join(\",\");\n                }\n                t1.searchParams.set(i1, o1);\n            }\n        }\n        return t1.toString();\n    };\n    on1.exports.default = on1.exports;\n});\nvar Qi = ne((pb1, ia1)=>{\n    \"use strict\";\n    ia1.exports = function() {\n        function e1(r1, t1, n1, i1, o1) {\n            return r1 < t1 || n1 < t1 ? r1 > n1 ? n1 + 1 : r1 + 1 : i1 === o1 ? t1 : t1 + 1;\n        }\n        return function(r1, t1) {\n            if (r1 === t1) return 0;\n            if (r1.length > t1.length) {\n                var n1 = r1;\n                r1 = t1, t1 = n1;\n            }\n            for(var i1 = r1.length, o1 = t1.length; i1 > 0 && r1.charCodeAt(i1 - 1) === t1.charCodeAt(o1 - 1);)i1--, o1--;\n            for(var s1 = 0; s1 < i1 && r1.charCodeAt(s1) === t1.charCodeAt(s1);)s1++;\n            if (i1 -= s1, o1 -= s1, i1 === 0 || o1 < 3) return o1;\n            var a1 = 0, l1, u1, c1, p1, d1, f1, g1, h1, I1, P1, S1, b1, O1 = [];\n            for(l1 = 0; l1 < i1; l1++)O1.push(l1 + 1), O1.push(r1.charCodeAt(s1 + l1));\n            for(var me1 = O1.length - 1; a1 < o1 - 3;)for(I1 = t1.charCodeAt(s1 + (u1 = a1)), P1 = t1.charCodeAt(s1 + (c1 = a1 + 1)), S1 = t1.charCodeAt(s1 + (p1 = a1 + 2)), b1 = t1.charCodeAt(s1 + (d1 = a1 + 3)), f1 = a1 += 4, l1 = 0; l1 < me1; l1 += 2)g1 = O1[l1], h1 = O1[l1 + 1], u1 = e1(g1, u1, c1, I1, h1), c1 = e1(u1, c1, p1, P1, h1), p1 = e1(c1, p1, d1, S1, h1), f1 = e1(p1, d1, f1, b1, h1), O1[l1] = f1, d1 = p1, p1 = c1, c1 = u1, u1 = g1;\n            for(; a1 < o1;)for(I1 = t1.charCodeAt(s1 + (u1 = a1)), f1 = ++a1, l1 = 0; l1 < me1; l1 += 2)g1 = O1[l1], O1[l1] = f1 = e1(g1, u1, f1, I1, O1[l1 + 1]), u1 = g1;\n            return f1;\n        };\n    }();\n});\nvar ua = Do(()=>{\n    \"use strict\";\n});\nvar ca = Do(()=>{\n    \"use strict\";\n});\nvar Vf = {};\ntr(Vf, {\n    DMMF: ()=>lt,\n    Debug: ()=>N,\n    Decimal: ()=>ve,\n    Extensions: ()=>ei,\n    MetricsClient: ()=>Lr,\n    PrismaClientInitializationError: ()=>T,\n    PrismaClientKnownRequestError: ()=>z,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>j,\n    PrismaClientValidationError: ()=>Z,\n    Public: ()=>ri,\n    Sql: ()=>oe,\n    createParam: ()=>Ra,\n    defineDmmfProperty: ()=>Da,\n    deserializeJsonResponse: ()=>Tr,\n    deserializeRawResult: ()=>Yn,\n    dmmfToRuntimeDataModel: ()=>Zs,\n    empty: ()=>La,\n    getPrismaClient: ()=>gu,\n    getRuntime: ()=>qn,\n    join: ()=>Na,\n    makeStrictEnum: ()=>hu,\n    makeTypedQueryFactory: ()=>_a,\n    objectEnumValues: ()=>Sn,\n    raw: ()=>eo,\n    serializeJsonQuery: ()=>Dn,\n    skip: ()=>On,\n    sqltag: ()=>ro,\n    warnEnvConflicts: ()=>yu,\n    warnOnce: ()=>ot\n});\nmodule.exports = Pu(Vf);\nvar ei = {};\ntr(ei, {\n    defineExtension: ()=>No,\n    getExtensionContext: ()=>Lo\n});\nfunction No(e1) {\n    return typeof e1 == \"function\" ? e1 : (r1)=>r1.$extends(e1);\n}\nfunction Lo(e1) {\n    return e1;\n}\nvar ri = {};\ntr(ri, {\n    validator: ()=>Fo\n});\nfunction Fo(...e1) {\n    return (r1)=>r1;\n}\nvar jt = {};\ntr(jt, {\n    $: ()=>Vo,\n    bgBlack: ()=>_u,\n    bgBlue: ()=>Mu,\n    bgCyan: ()=>qu,\n    bgGreen: ()=>Lu,\n    bgMagenta: ()=>$u,\n    bgRed: ()=>Nu,\n    bgWhite: ()=>ju,\n    bgYellow: ()=>Fu,\n    black: ()=>Iu,\n    blue: ()=>nr,\n    bold: ()=>W,\n    cyan: ()=>Oe,\n    dim: ()=>Ie,\n    gray: ()=>Hr,\n    green: ()=>qe,\n    grey: ()=>Du,\n    hidden: ()=>Cu,\n    inverse: ()=>Ru,\n    italic: ()=>Su,\n    magenta: ()=>ku,\n    red: ()=>ce,\n    reset: ()=>Tu,\n    strikethrough: ()=>Au,\n    underline: ()=>Y,\n    white: ()=>Ou,\n    yellow: ()=>ke\n});\nvar ti, Mo, $o, qo, jo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: ti, NODE_DISABLE_COLORS: Mo, NO_COLOR: $o, TERM: qo } = process.env || {}, jo = process.stdout && process.stdout.isTTY);\nvar Vo = {\n    enabled: !Mo && $o == null && qo !== \"dumb\" && (ti != null && ti !== \"0\" || jo)\n};\nfunction F(e1, r1) {\n    let t1 = new RegExp(`\\\\x1b\\\\[${r1}m`, \"g\"), n1 = `\\x1B[${e1}m`, i1 = `\\x1B[${r1}m`;\n    return function(o1) {\n        return !Vo.enabled || o1 == null ? o1 : n1 + (~(\"\" + o1).indexOf(i1) ? o1.replace(t1, i1 + n1) : o1) + i1;\n    };\n}\nvar Tu = F(0, 0), W = F(1, 22), Ie = F(2, 22), Su = F(3, 23), Y = F(4, 24), Ru = F(7, 27), Cu = F(8, 28), Au = F(9, 29), Iu = F(30, 39), ce = F(31, 39), qe = F(32, 39), ke = F(33, 39), nr = F(34, 39), ku = F(35, 39), Oe = F(36, 39), Ou = F(37, 39), Hr = F(90, 39), Du = F(90, 39), _u = F(40, 49), Nu = F(41, 49), Lu = F(42, 49), Fu = F(43, 49), Mu = F(44, 49), $u = F(45, 49), qu = F(46, 49), ju = F(47, 49);\nvar Vu = 100, Bo = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Kr = [], Uo = Date.now(), Bu = 0, ni = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= ni.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= ni.DEBUG_COLORS ? ni.DEBUG_COLORS === \"true\" : !0;\nvar Yr = {\n    enable (e1) {\n        typeof e1 == \"string\" && (globalThis.DEBUG = e1);\n    },\n    disable () {\n        let e1 = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e1;\n    },\n    enabled (e1) {\n        let r1 = globalThis.DEBUG.split(\",\").map((i1)=>i1.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), t1 = r1.some((i1)=>i1 === \"\" || i1[0] === \"-\" ? !1 : e1.match(RegExp(i1.split(\"*\").join(\".*\") + \"$\"))), n1 = r1.some((i1)=>i1 === \"\" || i1[0] !== \"-\" ? !1 : e1.match(RegExp(i1.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return t1 && !n1;\n    },\n    log: (...e1)=>{\n        let [r1, t1, ...n1] = e1;\n        (console.warn ?? console.log)(`${r1} ${t1}`, ...n1);\n    },\n    formatters: {}\n};\nfunction Uu(e1) {\n    let r1 = {\n        color: Bo[Bu++ % Bo.length],\n        enabled: Yr.enabled(e1),\n        namespace: e1,\n        log: Yr.log,\n        extend: ()=>{}\n    }, t1 = (...n1)=>{\n        let { enabled: i1, namespace: o1, color: s1, log: a1 } = r1;\n        if (n1.length !== 0 && Kr.push([\n            o1,\n            ...n1\n        ]), Kr.length > Vu && Kr.shift(), Yr.enabled(o1) || i1) {\n            let l1 = n1.map((c1)=>typeof c1 == \"string\" ? c1 : Gu(c1)), u1 = `+${Date.now() - Uo}ms`;\n            Uo = Date.now(), globalThis.DEBUG_COLORS ? a1(jt[s1](W(o1)), ...l1, jt[s1](u1)) : a1(o1, ...l1, u1);\n        }\n    };\n    return new Proxy(t1, {\n        get: (n1, i1)=>r1[i1],\n        set: (n1, i1, o1)=>r1[i1] = o1\n    });\n}\nvar N = new Proxy(Uu, {\n    get: (e1, r1)=>Yr[r1],\n    set: (e1, r1, t1)=>Yr[r1] = t1\n});\nfunction Gu(e1, r1 = 2) {\n    let t1 = new Set;\n    return JSON.stringify(e1, (n1, i1)=>{\n        if (typeof i1 == \"object\" && i1 !== null) {\n            if (t1.has(i1)) return \"[Circular *]\";\n            t1.add(i1);\n        } else if (typeof i1 == \"bigint\") return i1.toString();\n        return i1;\n    }, r1);\n}\nfunction Go(e1 = 7500) {\n    let r1 = Kr.map(([t1, ...n1])=>`${t1} ${n1.map((i1)=>typeof i1 == \"string\" ? i1 : JSON.stringify(i1)).join(\" \")}`).join(`\n`);\n    return r1.length < e1 ? r1 : r1.slice(-e1);\n}\nfunction Qo() {\n    Kr.length = 0;\n}\nvar gr = N;\nvar Wo = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nfunction ii() {\n    let e1 = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e1 && Wo.default.existsSync(e1)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar oi = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Vt = \"libquery_engine\";\nfunction Bt(e1, r1) {\n    let t1 = r1 === \"url\";\n    return e1.includes(\"windows\") ? t1 ? \"query_engine.dll.node\" : `query_engine-${e1}.dll.node` : e1.includes(\"darwin\") ? t1 ? `${Vt}.dylib.node` : `${Vt}-${e1}.dylib.node` : t1 ? `${Vt}.so.node` : `${Vt}-${e1}.so.node`;\n}\nvar Yo = k(__webpack_require__(/*! node:child_process */ \"node:child_process\")), ci = k(__webpack_require__(/*! node:fs/promises */ \"node:fs/promises\")), Jt = k(__webpack_require__(/*! node:os */ \"node:os\"));\nvar De = Symbol.for(\"@ts-pattern/matcher\"), Qu = Symbol.for(\"@ts-pattern/isVariadic\"), Gt = \"@ts-pattern/anonymous-select-key\", si = (e1)=>!!(e1 && typeof e1 == \"object\"), Ut = (e1)=>e1 && !!e1[De], Ee = (e1, r1, t1)=>{\n    if (Ut(e1)) {\n        let n1 = e1[De](), { matched: i1, selections: o1 } = n1.match(r1);\n        return i1 && o1 && Object.keys(o1).forEach((s1)=>t1(s1, o1[s1])), i1;\n    }\n    if (si(e1)) {\n        if (!si(r1)) return !1;\n        if (Array.isArray(e1)) {\n            if (!Array.isArray(r1)) return !1;\n            let n1 = [], i1 = [], o1 = [];\n            for (let s1 of e1.keys()){\n                let a1 = e1[s1];\n                Ut(a1) && a1[Qu] ? o1.push(a1) : o1.length ? i1.push(a1) : n1.push(a1);\n            }\n            if (o1.length) {\n                if (o1.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (r1.length < n1.length + i1.length) return !1;\n                let s1 = r1.slice(0, n1.length), a1 = i1.length === 0 ? [] : r1.slice(-i1.length), l1 = r1.slice(n1.length, i1.length === 0 ? 1 / 0 : -i1.length);\n                return n1.every((u1, c1)=>Ee(u1, s1[c1], t1)) && i1.every((u1, c1)=>Ee(u1, a1[c1], t1)) && (o1.length === 0 || Ee(o1[0], l1, t1));\n            }\n            return e1.length === r1.length && e1.every((s1, a1)=>Ee(s1, r1[a1], t1));\n        }\n        return Reflect.ownKeys(e1).every((n1)=>{\n            let i1 = e1[n1];\n            return (n1 in r1 || Ut(o1 = i1) && o1[De]().matcherType === \"optional\") && Ee(i1, r1[n1], t1);\n            var o1;\n        });\n    }\n    return Object.is(r1, e1);\n}, Ge = (e1)=>{\n    var r1, t1, n1;\n    return si(e1) ? Ut(e1) ? (r1 = (t1 = (n1 = e1[De]()).getSelectionKeys) == null ? void 0 : t1.call(n1)) != null ? r1 : [] : Array.isArray(e1) ? zr(e1, Ge) : zr(Object.values(e1), Ge) : [];\n}, zr = (e1, r1)=>e1.reduce((t1, n1)=>t1.concat(r1(n1)), []);\nfunction pe(e1) {\n    return Object.assign(e1, {\n        optional: ()=>Wu(e1),\n        and: (r1)=>q(e1, r1),\n        or: (r1)=>Ju(e1, r1),\n        select: (r1)=>r1 === void 0 ? Jo(e1) : Jo(r1, e1)\n    });\n}\nfunction Wu(e1) {\n    return pe({\n        [De]: ()=>({\n                match: (r1)=>{\n                    let t1 = {}, n1 = (i1, o1)=>{\n                        t1[i1] = o1;\n                    };\n                    return r1 === void 0 ? (Ge(e1).forEach((i1)=>n1(i1, void 0)), {\n                        matched: !0,\n                        selections: t1\n                    }) : {\n                        matched: Ee(e1, r1, n1),\n                        selections: t1\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e1),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction q(...e1) {\n    return pe({\n        [De]: ()=>({\n                match: (r1)=>{\n                    let t1 = {}, n1 = (i1, o1)=>{\n                        t1[i1] = o1;\n                    };\n                    return {\n                        matched: e1.every((i1)=>Ee(i1, r1, n1)),\n                        selections: t1\n                    };\n                },\n                getSelectionKeys: ()=>zr(e1, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Ju(...e1) {\n    return pe({\n        [De]: ()=>({\n                match: (r1)=>{\n                    let t1 = {}, n1 = (i1, o1)=>{\n                        t1[i1] = o1;\n                    };\n                    return zr(e1, Ge).forEach((i1)=>n1(i1, void 0)), {\n                        matched: e1.some((i1)=>Ee(i1, r1, n1)),\n                        selections: t1\n                    };\n                },\n                getSelectionKeys: ()=>zr(e1, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction C(e1) {\n    return {\n        [De]: ()=>({\n                match: (r1)=>({\n                        matched: !!e1(r1)\n                    })\n            })\n    };\n}\nfunction Jo(...e1) {\n    let r1 = typeof e1[0] == \"string\" ? e1[0] : void 0, t1 = e1.length === 2 ? e1[1] : typeof e1[0] == \"string\" ? void 0 : e1[0];\n    return pe({\n        [De]: ()=>({\n                match: (n1)=>{\n                    let i1 = {\n                        [r1 ?? Gt]: n1\n                    };\n                    return {\n                        matched: t1 === void 0 || Ee(t1, n1, (o1, s1)=>{\n                            i1[o1] = s1;\n                        }),\n                        selections: i1\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        r1 ?? Gt\n                    ].concat(t1 === void 0 ? [] : Ge(t1))\n            })\n    });\n}\nfunction ye(e1) {\n    return typeof e1 == \"number\";\n}\nfunction je(e1) {\n    return typeof e1 == \"string\";\n}\nfunction Ve(e1) {\n    return typeof e1 == \"bigint\";\n}\nvar eg = pe(C(function(e1) {\n    return !0;\n}));\nvar Be = (e1)=>Object.assign(pe(e1), {\n        startsWith: (r1)=>{\n            return Be(q(e1, (t1 = r1, C((n1)=>je(n1) && n1.startsWith(t1)))));\n            var t1;\n        },\n        endsWith: (r1)=>{\n            return Be(q(e1, (t1 = r1, C((n1)=>je(n1) && n1.endsWith(t1)))));\n            var t1;\n        },\n        minLength: (r1)=>Be(q(e1, ((t1)=>C((n1)=>je(n1) && n1.length >= t1))(r1))),\n        length: (r1)=>Be(q(e1, ((t1)=>C((n1)=>je(n1) && n1.length === t1))(r1))),\n        maxLength: (r1)=>Be(q(e1, ((t1)=>C((n1)=>je(n1) && n1.length <= t1))(r1))),\n        includes: (r1)=>{\n            return Be(q(e1, (t1 = r1, C((n1)=>je(n1) && n1.includes(t1)))));\n            var t1;\n        },\n        regex: (r1)=>{\n            return Be(q(e1, (t1 = r1, C((n1)=>je(n1) && !!n1.match(t1)))));\n            var t1;\n        }\n    }), rg = Be(C(je)), be = (e1)=>Object.assign(pe(e1), {\n        between: (r1, t1)=>be(q(e1, ((n1, i1)=>C((o1)=>ye(o1) && n1 <= o1 && i1 >= o1))(r1, t1))),\n        lt: (r1)=>be(q(e1, ((t1)=>C((n1)=>ye(n1) && n1 < t1))(r1))),\n        gt: (r1)=>be(q(e1, ((t1)=>C((n1)=>ye(n1) && n1 > t1))(r1))),\n        lte: (r1)=>be(q(e1, ((t1)=>C((n1)=>ye(n1) && n1 <= t1))(r1))),\n        gte: (r1)=>be(q(e1, ((t1)=>C((n1)=>ye(n1) && n1 >= t1))(r1))),\n        int: ()=>be(q(e1, C((r1)=>ye(r1) && Number.isInteger(r1)))),\n        finite: ()=>be(q(e1, C((r1)=>ye(r1) && Number.isFinite(r1)))),\n        positive: ()=>be(q(e1, C((r1)=>ye(r1) && r1 > 0))),\n        negative: ()=>be(q(e1, C((r1)=>ye(r1) && r1 < 0)))\n    }), tg = be(C(ye)), Ue = (e1)=>Object.assign(pe(e1), {\n        between: (r1, t1)=>Ue(q(e1, ((n1, i1)=>C((o1)=>Ve(o1) && n1 <= o1 && i1 >= o1))(r1, t1))),\n        lt: (r1)=>Ue(q(e1, ((t1)=>C((n1)=>Ve(n1) && n1 < t1))(r1))),\n        gt: (r1)=>Ue(q(e1, ((t1)=>C((n1)=>Ve(n1) && n1 > t1))(r1))),\n        lte: (r1)=>Ue(q(e1, ((t1)=>C((n1)=>Ve(n1) && n1 <= t1))(r1))),\n        gte: (r1)=>Ue(q(e1, ((t1)=>C((n1)=>Ve(n1) && n1 >= t1))(r1))),\n        positive: ()=>Ue(q(e1, C((r1)=>Ve(r1) && r1 > 0))),\n        negative: ()=>Ue(q(e1, C((r1)=>Ve(r1) && r1 < 0)))\n    }), ng = Ue(C(Ve)), ig = pe(C(function(e1) {\n    return typeof e1 == \"boolean\";\n})), og = pe(C(function(e1) {\n    return typeof e1 == \"symbol\";\n})), sg = pe(C(function(e1) {\n    return e1 == null;\n})), ag = pe(C(function(e1) {\n    return e1 != null;\n}));\nvar ai = class extends Error {\n    constructor(r1){\n        let t1;\n        try {\n            t1 = JSON.stringify(r1);\n        } catch  {\n            t1 = r1;\n        }\n        super(`Pattern matching error: no pattern matches value ${t1}`), this.input = void 0, this.input = r1;\n    }\n}, li = {\n    matched: !1,\n    value: void 0\n};\nfunction hr(e1) {\n    return new ui(e1, li);\n}\nvar ui = class e {\n    constructor(r1, t1){\n        this.input = void 0, this.state = void 0, this.input = r1, this.state = t1;\n    }\n    with(...r1) {\n        if (this.state.matched) return this;\n        let t1 = r1[r1.length - 1], n1 = [\n            r1[0]\n        ], i1;\n        r1.length === 3 && typeof r1[1] == \"function\" ? i1 = r1[1] : r1.length > 2 && n1.push(...r1.slice(1, r1.length - 1));\n        let o1 = !1, s1 = {}, a1 = (u1, c1)=>{\n            o1 = !0, s1[u1] = c1;\n        }, l1 = !n1.some((u1)=>Ee(u1, this.input, a1)) || i1 && !i1(this.input) ? li : {\n            matched: !0,\n            value: t1(o1 ? Gt in s1 ? s1[Gt] : s1 : this.input, this.input)\n        };\n        return new e(this.input, l1);\n    }\n    when(r1, t1) {\n        if (this.state.matched) return this;\n        let n1 = !!r1(this.input);\n        return new e(this.input, n1 ? {\n            matched: !0,\n            value: t1(this.input, this.input)\n        } : li);\n    }\n    otherwise(r1) {\n        return this.state.matched ? this.state.value : r1(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        throw new ai(this.input);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar zo = __webpack_require__(/*! node:util */ \"node:util\");\nvar Hu = {\n    warn: ke(\"prisma:warn\")\n}, Ku = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Qt(e1, ...r1) {\n    Ku.warn() && console.warn(`${Hu.warn} ${e1}`, ...r1);\n}\nvar Yu = (0, zo.promisify)(Yo.default.exec), ee = gr(\"prisma:get-platform\"), zu = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Zo() {\n    let e1 = Jt.default.platform(), r1 = process.arch;\n    if (e1 === \"freebsd\") {\n        let s1 = await Ht(\"freebsd-version\");\n        if (s1 && s1.trim().length > 0) {\n            let l1 = /^(\\d+)\\.?/.exec(s1);\n            if (l1) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l1[1]}`,\n                arch: r1\n            };\n        }\n    }\n    if (e1 !== \"linux\") return {\n        platform: e1,\n        arch: r1\n    };\n    let t1 = await Xu(), n1 = await ac(), i1 = rc({\n        arch: r1,\n        archFromUname: n1,\n        familyDistro: t1.familyDistro\n    }), { libssl: o1 } = await tc(i1);\n    return {\n        platform: \"linux\",\n        libssl: o1,\n        arch: r1,\n        archFromUname: n1,\n        ...t1\n    };\n}\nfunction Zu(e1) {\n    let r1 = /^ID=\"?([^\"\\n]*)\"?$/im, t1 = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n1 = r1.exec(e1), i1 = n1 && n1[1] && n1[1].toLowerCase() || \"\", o1 = t1.exec(e1), s1 = o1 && o1[1] && o1[1].toLowerCase() || \"\", a1 = hr({\n        id: i1,\n        idLike: s1\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"musl\",\n            familyDistro: l1,\n            originalDistro: l1\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l1,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"debian\") || l1.includes(\"ubuntu\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>i1 === \"arch\" || l1.includes(\"arch\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"centos\") || l1.includes(\"fedora\") || l1.includes(\"rhel\") || l1.includes(\"suse\"), ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).otherwise(({ id: l1 })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l1\n        }));\n    return ee(`Found distro info:\n${JSON.stringify(a1, null, 2)}`), a1;\n}\nasync function Xu() {\n    let e1 = \"/etc/os-release\";\n    try {\n        let r1 = await ci.default.readFile(e1, {\n            encoding: \"utf-8\"\n        });\n        return Zu(r1);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction ec(e1) {\n    let r1 = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e1);\n    if (r1) {\n        let t1 = `${r1[1]}.x`;\n        return Xo(t1);\n    }\n}\nfunction Ho(e1) {\n    let r1 = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e1);\n    if (r1) {\n        let t1 = `${r1[1]}${r1[2] ?? \".0\"}.x`;\n        return Xo(t1);\n    }\n}\nfunction Xo(e1) {\n    let r1 = (()=>{\n        if (rs(e1)) return e1;\n        let t1 = e1.split(\".\");\n        return t1[1] = \"0\", t1.join(\".\");\n    })();\n    if (zu.includes(r1)) return r1;\n}\nfunction rc(e1) {\n    return hr(e1).with({\n        familyDistro: \"musl\"\n    }, ()=>(ee('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\",\n            \"/usr/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: r1 })=>(ee('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${r1}-linux-gnu`,\n            `/lib/${r1}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(ee('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: r1, arch: t1, archFromUname: n1 })=>(ee(`Don't know any platform-specific paths for \"${r1}\" on ${t1} (${n1})`), []));\n}\nasync function tc(e1) {\n    let r1 = 'grep -v \"libssl.so.0\"', t1 = await Ko(e1);\n    if (t1) {\n        ee(`Found libssl.so file using platform-specific paths: ${t1}`);\n        let o1 = Ho(t1);\n        if (ee(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    ee('Falling back to \"ldconfig\" and other generic paths');\n    let n1 = await Ht(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${r1}`);\n    if (n1 || (n1 = await Ko([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\",\n        \"/usr/lib\"\n    ])), n1) {\n        ee(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n1}`);\n        let o1 = Ho(n1);\n        if (ee(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i1 = await Ht(\"openssl version -v\");\n    if (i1) {\n        ee(`Found openssl binary with version: ${i1}`);\n        let o1 = ec(i1);\n        if (ee(`The parsed openssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return ee(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ko(e1) {\n    for (let r1 of e1){\n        let t1 = await nc(r1);\n        if (t1) return t1;\n    }\n}\nasync function nc(e1) {\n    try {\n        return (await ci.default.readdir(e1)).find((t1)=>t1.startsWith(\"libssl.so.\") && !t1.startsWith(\"libssl.so.0\"));\n    } catch (r1) {\n        if (r1.code === \"ENOENT\") return;\n        throw r1;\n    }\n}\nasync function ir() {\n    let { binaryTarget: e1 } = await es();\n    return e1;\n}\nfunction ic(e1) {\n    return e1.binaryTarget !== void 0;\n}\nasync function pi() {\n    let { memoized: e1, ...r1 } = await es();\n    return r1;\n}\nvar Wt = {};\nasync function es() {\n    if (ic(Wt)) return Promise.resolve({\n        ...Wt,\n        memoized: !0\n    });\n    let e1 = await Zo(), r1 = oc(e1);\n    return Wt = {\n        ...e1,\n        binaryTarget: r1\n    }, {\n        ...Wt,\n        memoized: !1\n    };\n}\nfunction oc(e1) {\n    let { platform: r1, arch: t1, archFromUname: n1, libssl: i1, targetDistro: o1, familyDistro: s1, originalDistro: a1 } = e1;\n    r1 === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(t1) && Qt(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${t1}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n1}\".`);\n    let l1 = \"1.1.x\";\n    if (r1 === \"linux\" && i1 === void 0) {\n        let c1 = hr({\n            familyDistro: s1\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Qt(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l1}\".\n${c1}`);\n    }\n    let u1 = \"debian\";\n    if (r1 === \"linux\" && o1 === void 0 && ee(`Distro is \"${a1}\". Falling back to Prisma engines built for \"${u1}\".`), r1 === \"darwin\" && t1 === \"arm64\") return \"darwin-arm64\";\n    if (r1 === \"darwin\") return \"darwin\";\n    if (r1 === \"win32\") return \"windows\";\n    if (r1 === \"freebsd\") return o1;\n    if (r1 === \"openbsd\") return \"openbsd\";\n    if (r1 === \"netbsd\") return \"netbsd\";\n    if (r1 === \"linux\" && o1 === \"nixos\") return \"linux-nixos\";\n    if (r1 === \"linux\" && t1 === \"arm64\") return `${o1 === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i1 || l1}`;\n    if (r1 === \"linux\" && t1 === \"arm\") return `linux-arm-openssl-${i1 || l1}`;\n    if (r1 === \"linux\" && o1 === \"musl\") {\n        let c1 = \"linux-musl\";\n        return !i1 || rs(i1) ? c1 : `${c1}-openssl-${i1}`;\n    }\n    return r1 === \"linux\" && o1 && i1 ? `${o1}-openssl-${i1}` : (r1 !== \"linux\" && Qt(`Prisma detected unknown OS \"${r1}\" and may not work as expected. Defaulting to \"linux\".`), i1 ? `${u1}-openssl-${i1}` : o1 ? `${o1}-openssl-${l1}` : `${u1}-openssl-${l1}`);\n}\nasync function sc(e1) {\n    try {\n        return await e1();\n    } catch  {\n        return;\n    }\n}\nfunction Ht(e1) {\n    return sc(async ()=>{\n        let r1 = await Yu(e1);\n        return ee(`Command \"${e1}\" successfully returned \"${r1.stdout}\"`), r1.stdout;\n    });\n}\nasync function ac() {\n    return typeof Jt.default.machine == \"function\" ? Jt.default.machine() : (await Ht(\"uname -m\"))?.trim();\n}\nfunction rs(e1) {\n    return e1.startsWith(\"1.\");\n}\nvar zt = {};\ntr(zt, {\n    beep: ()=>_c,\n    clearScreen: ()=>Ic,\n    clearTerminal: ()=>kc,\n    cursorBackward: ()=>fc,\n    cursorDown: ()=>dc,\n    cursorForward: ()=>mc,\n    cursorGetPosition: ()=>yc,\n    cursorHide: ()=>wc,\n    cursorLeft: ()=>is,\n    cursorMove: ()=>pc,\n    cursorNextLine: ()=>bc,\n    cursorPrevLine: ()=>Ec,\n    cursorRestorePosition: ()=>hc,\n    cursorSavePosition: ()=>gc,\n    cursorShow: ()=>xc,\n    cursorTo: ()=>cc,\n    cursorUp: ()=>ns,\n    enterAlternativeScreen: ()=>Oc,\n    eraseDown: ()=>Sc,\n    eraseEndLine: ()=>Pc,\n    eraseLine: ()=>os,\n    eraseLines: ()=>vc,\n    eraseScreen: ()=>di,\n    eraseStartLine: ()=>Tc,\n    eraseUp: ()=>Rc,\n    exitAlternativeScreen: ()=>Dc,\n    iTerm: ()=>Fc,\n    image: ()=>Lc,\n    link: ()=>Nc,\n    scrollDown: ()=>Ac,\n    scrollUp: ()=>Cc\n});\nvar Yt = k(__webpack_require__(/*! node:process */ \"node:process\"), 1);\nvar Kt = globalThis.window?.document !== void 0, gg = globalThis.process?.versions?.node !== void 0, hg = globalThis.process?.versions?.bun !== void 0, yg = globalThis.Deno?.version?.deno !== void 0, bg = globalThis.process?.versions?.electron !== void 0, Eg = globalThis.navigator?.userAgent?.includes(\"jsdom\") === !0, wg = typeof WorkerGlobalScope < \"u\" && globalThis instanceof WorkerGlobalScope, xg = typeof DedicatedWorkerGlobalScope < \"u\" && globalThis instanceof DedicatedWorkerGlobalScope, vg = typeof SharedWorkerGlobalScope < \"u\" && globalThis instanceof SharedWorkerGlobalScope, Pg = typeof ServiceWorkerGlobalScope < \"u\" && globalThis instanceof ServiceWorkerGlobalScope, Zr = globalThis.navigator?.userAgentData?.platform, Tg = Zr === \"macOS\" || globalThis.navigator?.platform === \"MacIntel\" || globalThis.navigator?.userAgent?.includes(\" Mac \") === !0 || globalThis.process?.platform === \"darwin\", Sg = Zr === \"Windows\" || globalThis.navigator?.platform === \"Win32\" || globalThis.process?.platform === \"win32\", Rg = Zr === \"Linux\" || globalThis.navigator?.platform?.startsWith(\"Linux\") === !0 || globalThis.navigator?.userAgent?.includes(\" Linux \") === !0 || globalThis.process?.platform === \"linux\", Cg = Zr === \"iOS\" || globalThis.navigator?.platform === \"MacIntel\" && globalThis.navigator?.maxTouchPoints > 1 || /iPad|iPhone|iPod/.test(globalThis.navigator?.platform), Ag = Zr === \"Android\" || globalThis.navigator?.platform === \"Android\" || globalThis.navigator?.userAgent?.includes(\" Android \") === !0 || globalThis.process?.platform === \"android\";\nvar A = \"\\x1b[\", et = \"\\x1b]\", yr = \"\\x07\", Xr = \";\", ts = !Kt && Yt.default.env.TERM_PROGRAM === \"Apple_Terminal\", lc = !Kt && Yt.default.platform === \"win32\", uc = Kt ? ()=>{\n    throw new Error(\"`process.cwd()` only works in Node.js, not the browser.\");\n} : Yt.default.cwd, cc = (e1, r1)=>{\n    if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n    return typeof r1 != \"number\" ? A + (e1 + 1) + \"G\" : A + (r1 + 1) + Xr + (e1 + 1) + \"H\";\n}, pc = (e1, r1)=>{\n    if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n    let t1 = \"\";\n    return e1 < 0 ? t1 += A + -e1 + \"D\" : e1 > 0 && (t1 += A + e1 + \"C\"), r1 < 0 ? t1 += A + -r1 + \"A\" : r1 > 0 && (t1 += A + r1 + \"B\"), t1;\n}, ns = (e1 = 1)=>A + e1 + \"A\", dc = (e1 = 1)=>A + e1 + \"B\", mc = (e1 = 1)=>A + e1 + \"C\", fc = (e1 = 1)=>A + e1 + \"D\", is = A + \"G\", gc = ts ? \"\\x1b7\" : A + \"s\", hc = ts ? \"\\x1b8\" : A + \"u\", yc = A + \"6n\", bc = A + \"E\", Ec = A + \"F\", wc = A + \"?25l\", xc = A + \"?25h\", vc = (e1)=>{\n    let r1 = \"\";\n    for(let t1 = 0; t1 < e1; t1++)r1 += os + (t1 < e1 - 1 ? ns() : \"\");\n    return e1 && (r1 += is), r1;\n}, Pc = A + \"K\", Tc = A + \"1K\", os = A + \"2K\", Sc = A + \"J\", Rc = A + \"1J\", di = A + \"2J\", Cc = A + \"S\", Ac = A + \"T\", Ic = \"\\x1bc\", kc = lc ? `${di}${A}0f` : `${di}${A}3J${A}H`, Oc = A + \"?1049h\", Dc = A + \"?1049l\", _c = yr, Nc = (e1, r1)=>[\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        r1,\n        yr,\n        e1,\n        et,\n        \"8\",\n        Xr,\n        Xr,\n        yr\n    ].join(\"\"), Lc = (e1, r1 = {})=>{\n    let t1 = `${et}1337;File=inline=1`;\n    return r1.width && (t1 += `;width=${r1.width}`), r1.height && (t1 += `;height=${r1.height}`), r1.preserveAspectRatio === !1 && (t1 += \";preserveAspectRatio=0\"), t1 + \":\" + Buffer.from(e1).toString(\"base64\") + yr;\n}, Fc = {\n    setCwd: (e1 = uc())=>`${et}50;CurrentDir=${e1}${yr}`,\n    annotation (e1, r1 = {}) {\n        let t1 = `${et}1337;`, n1 = r1.x !== void 0, i1 = r1.y !== void 0;\n        if ((n1 || i1) && !(n1 && i1 && r1.length !== void 0)) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n        return e1 = e1.replaceAll(\"|\", \"\"), t1 += r1.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", r1.length > 0 ? t1 += (n1 ? [\n            e1,\n            r1.length,\n            r1.x,\n            r1.y\n        ] : [\n            r1.length,\n            e1\n        ]).join(\"|\") : t1 += e1, t1 + yr;\n    }\n};\nvar Zt = k(ds(), 1);\nfunction or(e1, r1, { target: t1 = \"stdout\", ...n1 } = {}) {\n    return Zt.default[t1] ? zt.link(e1, r1) : n1.fallback === !1 ? e1 : typeof n1.fallback == \"function\" ? n1.fallback(e1, r1) : `${e1} (\\u200B${r1}\\u200B)`;\n}\nor.isSupported = Zt.default.stdout;\nor.stderr = (e1, r1, t1 = {})=>or(e1, r1, {\n        target: \"stderr\",\n        ...t1\n    });\nor.stderr.isSupported = Zt.default.stderr;\nfunction yi(e1) {\n    return or(e1, e1, {\n        fallback: Y\n    });\n}\nvar Vc = ms(), bi = Vc.version;\nvar fs = \"library\";\nfunction Er(e1) {\n    let r1 = Bc();\n    return r1 || (e1?.config.engineType === \"library\" ? \"library\" : e1?.config.engineType === \"binary\" ? \"binary\" : e1?.config.engineType === \"client\" ? \"client\" : fs);\n}\nfunction Bc() {\n    let e1 = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e1 === \"library\" ? \"library\" : e1 === \"binary\" ? \"binary\" : e1 === \"client\" ? \"client\" : void 0;\n}\nvar Gc = k(wi());\nvar M = k(__webpack_require__(/*! node:path */ \"node:path\")), Qc = k(wi()), ah = N(\"prisma:engines\");\nfunction gs() {\n    return M.default.join(__dirname, \"../\");\n}\nvar lh = \"libquery-engine\";\nM.default.join(__dirname, \"../query-engine-darwin\");\nM.default.join(__dirname, \"../query-engine-darwin-arm64\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nM.default.join(__dirname, \"../query-engine-linux-static-x64\");\nM.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nM.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nM.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nM.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nM.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nM.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar xi = k(__webpack_require__(/*! node:fs */ \"node:fs\")), hs = gr(\"chmodPlusX\");\nfunction vi(e1) {\n    if (process.platform === \"win32\") return;\n    let r1 = xi.default.statSync(e1), t1 = r1.mode | 64 | 8 | 1;\n    if (r1.mode === t1) {\n        hs(`Execution permissions of ${e1} are fine`);\n        return;\n    }\n    let n1 = t1.toString(8).slice(-3);\n    hs(`Have to call chmodPlusX on ${e1}`), xi.default.chmodSync(e1, n1);\n}\nfunction Pi(e1) {\n    let r1 = e1.e, t1 = (a1)=>`Prisma cannot find the required \\`${a1}\\` system library in your system`, n1 = r1.message.includes(\"cannot open shared object file\"), i1 = `Please refer to the documentation about Prisma's system requirements: ${yi(\"https://pris.ly/d/system-requirements\")}`, o1 = `Unable to require(\\`${Ie(e1.id)}\\`).`, s1 = hr({\n        message: r1.message,\n        code: r1.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a1 })=>n1 && a1.includes(\"libz\"), ()=>`${t1(\"libz\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libgcc_s\"), ()=>`${t1(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libssl\"), ()=>{\n        let a1 = e1.platformInfo.libssl ? `openssl-${e1.platformInfo.libssl}` : \"openssl\";\n        return `${t1(\"libssl\")}. Please install ${a1} and try again.`;\n    }).when(({ message: a1 })=>a1.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i1}`).when(({ message: a1 })=>e1.platformInfo.platform === \"linux\" && a1.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e1.platformInfo.originalDistro} on (${e1.platformInfo.archFromUname}) which uses the \\`${e1.platformInfo.binaryTarget}\\` binaryTarget by default. ${i1}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i1}`);\n    return `${o1}\n${s1}\n\nDetails: ${r1.message}`;\n}\nvar Es = k(bs(), 1);\nfunction Ti(e1) {\n    let r1 = (0, Es.default)(e1);\n    if (r1 === 0) return e1;\n    let t1 = new RegExp(`^[ \\\\t]{${r1}}`, \"gm\");\n    return e1.replace(t1, \"\");\n}\nvar ws = \"prisma+postgres\", en = `${ws}:`;\nfunction Si(e1) {\n    return e1?.startsWith(`${en}//`) ?? !1;\n}\nvar vs = k(Ri());\nfunction Ai(e1) {\n    return String(new Ci(e1));\n}\nvar Ci = class {\n    constructor(r1){\n        this.config = r1;\n    }\n    toString() {\n        let { config: r1 } = this, t1 = r1.provider.fromEnvVar ? `env(\"${r1.provider.fromEnvVar}\")` : r1.provider.value, n1 = JSON.parse(JSON.stringify({\n            provider: t1,\n            binaryTargets: Wc(r1.binaryTargets)\n        }));\n        return `generator ${r1.name} {\n${(0, vs.default)(Jc(n1), 2)}\n}`;\n    }\n};\nfunction Wc(e1) {\n    let r1;\n    if (e1.length > 0) {\n        let t1 = e1.find((n1)=>n1.fromEnvVar !== null);\n        t1 ? r1 = `env(\"${t1.fromEnvVar}\")` : r1 = e1.map((n1)=>n1.native ? \"native\" : n1.value);\n    } else r1 = void 0;\n    return r1;\n}\nfunction Jc(e1) {\n    let r1 = Object.keys(e1).reduce((t1, n1)=>Math.max(t1, n1.length), 0);\n    return Object.entries(e1).map(([t1, n1])=>`${t1.padEnd(r1)} = ${Hc(n1)}`).join(`\n`);\n}\nfunction Hc(e1) {\n    return JSON.parse(JSON.stringify(e1, (r1, t1)=>Array.isArray(t1) ? `[${t1.map((n1)=>JSON.stringify(n1)).join(\", \")}]` : JSON.stringify(t1)));\n}\nvar tt = {};\ntr(tt, {\n    error: ()=>zc,\n    info: ()=>Yc,\n    log: ()=>Kc,\n    query: ()=>Zc,\n    should: ()=>Ps,\n    tags: ()=>rt,\n    warn: ()=>Ii\n});\nvar rt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: Oe(\"prisma:info\"),\n    query: nr(\"prisma:query\")\n}, Ps = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Kc(...e1) {\n    ;\n}\nfunction Ii(e1, ...r1) {\n    Ps.warn() && console.warn(`${rt.warn} ${e1}`, ...r1);\n}\nfunction Yc(e1, ...r1) {\n    ;\n}\nfunction zc(e1, ...r1) {\n    console.error(`${rt.error} ${e1}`, ...r1);\n}\nfunction Zc(e1, ...r1) {\n    ;\n}\nfunction rn(e1, r1) {\n    if (!e1) throw new Error(`${r1}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction _e(e1, r1) {\n    throw new Error(r1);\n}\nvar nt = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Oi(e1) {\n    return nt.default.sep === nt.default.posix.sep ? e1 : e1.split(nt.default.sep).join(nt.default.posix.sep);\n}\nvar Fi = k(Os()), nn = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar wr = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction Ds(e1) {\n    let r1 = e1.ignoreProcessEnv ? {} : process.env, t1 = (n1)=>n1.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o1, s1) {\n            let a1 = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s1);\n            if (!a1) return o1;\n            let l1 = a1[1], u1, c1;\n            if (l1 === \"\\\\\") c1 = a1[0], u1 = c1.replace(\"\\\\$\", \"$\");\n            else {\n                let p1 = a1[2];\n                c1 = a1[0].substring(l1.length), u1 = Object.hasOwnProperty.call(r1, p1) ? r1[p1] : e1.parsed[p1] || \"\", u1 = t1(u1);\n            }\n            return o1.replace(c1, u1);\n        }, n1) ?? n1;\n    for(let n1 in e1.parsed){\n        let i1 = Object.hasOwnProperty.call(r1, n1) ? r1[n1] : e1.parsed[n1];\n        e1.parsed[n1] = t1(i1);\n    }\n    for(let n1 in e1.parsed)r1[n1] = e1.parsed[n1];\n    return e1;\n}\nvar Li = gr(\"prisma:tryLoadEnv\");\nfunction it({ rootEnvPath: e1, schemaEnvPath: r1 }, t1 = {\n    conflictCheck: \"none\"\n}) {\n    let n1 = _s(e1);\n    t1.conflictCheck !== \"none\" && gp(n1, r1, t1.conflictCheck);\n    let i1 = null;\n    return Ns(n1?.path, r1) || (i1 = _s(r1)), !n1 && !i1 && Li(\"No Environment variables loaded\"), i1?.dotenvResult.error ? console.error(ce(W(\"Schema Env Error: \")) + i1.dotenvResult.error) : {\n        message: [\n            n1?.message,\n            i1?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n1?.dotenvResult?.parsed,\n            ...i1?.dotenvResult?.parsed\n        }\n    };\n}\nfunction gp(e1, r1, t1) {\n    let n1 = e1?.dotenvResult.parsed, i1 = !Ns(e1?.path, r1);\n    if (n1 && r1 && i1 && nn.default.existsSync(r1)) {\n        let o1 = Fi.default.parse(nn.default.readFileSync(r1)), s1 = [];\n        for(let a1 in o1)n1[a1] === o1[a1] && s1.push(a1);\n        if (s1.length > 0) {\n            let a1 = wr.default.relative(process.cwd(), e1.path), l1 = wr.default.relative(process.cwd(), r1);\n            if (t1 === \"error\") {\n                let u1 = `There is a conflict between env var${s1.length > 1 ? \"s\" : \"\"} in ${Y(a1)} and ${Y(l1)}\nConflicting env vars:\n${s1.map((c1)=>`  ${W(c1)}`).join(`\n`)}\n\nWe suggest to move the contents of ${Y(l1)} to ${Y(a1)} to consolidate your env vars.\n`;\n                throw new Error(u1);\n            } else if (t1 === \"warn\") {\n                let u1 = `Conflict for env var${s1.length > 1 ? \"s\" : \"\"} ${s1.map((c1)=>W(c1)).join(\", \")} in ${Y(a1)} and ${Y(l1)}\nEnv vars from ${Y(l1)} overwrite the ones from ${Y(a1)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u1}`);\n            }\n        }\n    }\n}\nfunction _s(e1) {\n    if (hp(e1)) {\n        Li(`Environment variables loaded from ${e1}`);\n        let r1 = Fi.default.config({\n            path: e1,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: Ds(r1),\n            message: Ie(`Environment variables loaded from ${wr.default.relative(process.cwd(), e1)}`),\n            path: e1\n        };\n    } else Li(`Environment variables not found at ${e1}`);\n    return null;\n}\nfunction Ns(e1, r1) {\n    return e1 && r1 && wr.default.resolve(e1) === wr.default.resolve(r1);\n}\nfunction hp(e1) {\n    return !!(e1 && nn.default.existsSync(e1));\n}\nfunction Mi(e1, r1) {\n    return Object.prototype.hasOwnProperty.call(e1, r1);\n}\nfunction xr(e1, r1) {\n    let t1 = {};\n    for (let n1 of Object.keys(e1))t1[n1] = r1(e1[n1], n1);\n    return t1;\n}\nfunction $i(e1, r1) {\n    if (e1.length === 0) return;\n    let t1 = e1[0];\n    for(let n1 = 1; n1 < e1.length; n1++)r1(t1, e1[n1]) < 0 && (t1 = e1[n1]);\n    return t1;\n}\nfunction x(e1, r1) {\n    Object.defineProperty(e1, \"name\", {\n        value: r1,\n        configurable: !0\n    });\n}\nvar Fs = new Set, ot = (e1, r1, ...t1)=>{\n    Fs.has(e1) || (Fs.add(e1), Ii(r1, ...t1));\n};\nvar T = class e extends Error {\n    constructor(r1, t1, n1){\n        super(r1), this.name = \"PrismaClientInitializationError\", this.clientVersion = t1, this.errorCode = n1, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nx(T, \"PrismaClientInitializationError\");\nvar z = class extends Error {\n    constructor(r1, { code: t1, clientVersion: n1, meta: i1, batchRequestIdx: o1 }){\n        super(r1), this.name = \"PrismaClientKnownRequestError\", this.code = t1, this.clientVersion = n1, this.meta = i1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o1,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nx(z, \"PrismaClientKnownRequestError\");\nvar le = class extends Error {\n    constructor(r1, t1){\n        super(r1), this.name = \"PrismaClientRustPanicError\", this.clientVersion = t1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nx(le, \"PrismaClientRustPanicError\");\nvar j = class extends Error {\n    constructor(r1, { clientVersion: t1, batchRequestIdx: n1 }){\n        super(r1), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = t1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n1,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nx(j, \"PrismaClientUnknownRequestError\");\nvar Z = class extends Error {\n    constructor(r1, { clientVersion: t1 }){\n        var _temp;\n        _temp = super(r1), this.name = \"PrismaClientValidationError\", _temp, this.clientVersion = t1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nx(Z, \"PrismaClientValidationError\");\nvar vr = 9e15, Ke = 1e9, qi = \"0123456789abcdef\", un = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", cn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", ji = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -vr,\n    maxE: vr,\n    crypto: !1\n}, js, Le, w = !0, dn = \"[DecimalError] \", He = dn + \"Invalid argument: \", Vs = dn + \"Precision limit exceeded\", Bs = dn + \"crypto unavailable\", Us = \"[object Decimal]\", X = Math.floor, U = Math.pow, yp = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, bp = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Ep = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Gs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, fe = 1e7, E = 7, wp = 9007199254740991, xp = un.length - 1, Vi = cn.length - 1, m = {\n    toStringTag: Us\n};\nm.absoluteValue = m.abs = function() {\n    var e1 = new this.constructor(this);\n    return e1.s < 0 && (e1.s = 1), y(e1);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e1, r1) {\n    var t1, n1 = this, i1 = n1.constructor;\n    if (e1 = new i1(e1), r1 = new i1(r1), !e1.s || !r1.s) return new i1(NaN);\n    if (e1.gt(r1)) throw Error(He + r1);\n    return t1 = n1.cmp(e1), t1 < 0 ? e1 : n1.cmp(r1) > 0 ? r1 : new i1(n1);\n};\nm.comparedTo = m.cmp = function(e1) {\n    var r1, t1, n1, i1, o1 = this, s1 = o1.d, a1 = (e1 = new o1.constructor(e1)).d, l1 = o1.s, u1 = e1.s;\n    if (!s1 || !a1) return !l1 || !u1 ? NaN : l1 !== u1 ? l1 : s1 === a1 ? 0 : !s1 ^ l1 < 0 ? 1 : -1;\n    if (!s1[0] || !a1[0]) return s1[0] ? l1 : a1[0] ? -u1 : 0;\n    if (l1 !== u1) return l1;\n    if (o1.e !== e1.e) return o1.e > e1.e ^ l1 < 0 ? 1 : -1;\n    for(n1 = s1.length, i1 = a1.length, r1 = 0, t1 = n1 < i1 ? n1 : i1; r1 < t1; ++r1)if (s1[r1] !== a1[r1]) return s1[r1] > a1[r1] ^ l1 < 0 ? 1 : -1;\n    return n1 === i1 ? 0 : n1 > i1 ^ l1 < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return t1.d ? t1.d[0] ? (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + Math.max(t1.e, t1.sd()) + E, n1.rounding = 1, t1 = vp(n1, Ks(n1, t1)), n1.precision = e1, n1.rounding = r1, y(Le == 2 || Le == 3 ? t1.neg() : t1, e1, r1, !0)) : new n1(1) : new n1(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e1, r1, t1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor;\n    if (!c1.isFinite() || c1.isZero()) return new p1(c1);\n    for(w = !1, o1 = c1.s * U(c1.s * c1, 1 / 3), !o1 || Math.abs(o1) == 1 / 0 ? (t1 = J(c1.d), e1 = c1.e, (o1 = (e1 - t1.length + 1) % 3) && (t1 += o1 == 1 || o1 == -2 ? \"0\" : \"00\"), o1 = U(t1, 1 / 3), e1 = X((e1 + 1) / 3) - (e1 % 3 == (e1 < 0 ? -1 : 2)), o1 == 1 / 0 ? t1 = \"5e\" + e1 : (t1 = o1.toExponential(), t1 = t1.slice(0, t1.indexOf(\"e\") + 1) + e1), n1 = new p1(t1), n1.s = c1.s) : n1 = new p1(o1.toString()), s1 = (e1 = p1.precision) + 3;;)if (a1 = n1, l1 = a1.times(a1).times(a1), u1 = l1.plus(c1), n1 = L(u1.plus(c1).times(a1), u1.plus(l1), s1 + 2, 1), J(a1.d).slice(0, s1) === (t1 = J(n1.d)).slice(0, s1)) if (t1 = t1.slice(s1 - 3, s1 + 1), t1 == \"9999\" || !i1 && t1 == \"4999\") {\n        if (!i1 && (y(a1, e1 + 1, 0), a1.times(a1).times(a1).eq(c1))) {\n            n1 = a1;\n            break;\n        }\n        s1 += 4, i1 = 1;\n    } else {\n        (!+t1 || !+t1.slice(1) && t1.charAt(0) == \"5\") && (y(n1, e1 + 1, 1), r1 = !n1.times(n1).times(n1).eq(c1));\n        break;\n    }\n    return w = !0, y(n1, e1, p1.rounding, r1);\n};\nm.decimalPlaces = m.dp = function() {\n    var e1, r1 = this.d, t1 = NaN;\n    if (r1) {\n        if (e1 = r1.length - 1, t1 = (e1 - X(this.e / E)) * E, e1 = r1[e1], e1) for(; e1 % 10 == 0; e1 /= 10)t1--;\n        t1 < 0 && (t1 = 0);\n    }\n    return t1;\n};\nm.dividedBy = m.div = function(e1) {\n    return L(this, new this.constructor(e1));\n};\nm.dividedToIntegerBy = m.divToInt = function(e1) {\n    var r1 = this, t1 = r1.constructor;\n    return y(L(r1, new t1(e1), 0, 1, 1), t1.precision, t1.rounding);\n};\nm.equals = m.eq = function(e1) {\n    return this.cmp(e1) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e1) {\n    return this.cmp(e1) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e1) {\n    var r1 = this.cmp(e1);\n    return r1 == 1 || r1 === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e1, r1, t1, n1, i1, o1 = this, s1 = o1.constructor, a1 = new s1(1);\n    if (!o1.isFinite()) return new s1(o1.s ? 1 / 0 : NaN);\n    if (o1.isZero()) return a1;\n    t1 = s1.precision, n1 = s1.rounding, s1.precision = t1 + Math.max(o1.e, o1.sd()) + 4, s1.rounding = 1, i1 = o1.d.length, i1 < 32 ? (e1 = Math.ceil(i1 / 3), r1 = (1 / fn(4, e1)).toString()) : (e1 = 16, r1 = \"2.3283064365386962890625e-10\"), o1 = Pr(s1, 1, o1.times(r1), new s1(1), !0);\n    for(var l1, u1 = e1, c1 = new s1(8); u1--;)l1 = o1.times(o1), o1 = a1.minus(l1.times(c1.minus(l1.times(c1))));\n    return y(o1, s1.precision = t1, s1.rounding = n1, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e1, r1, t1, n1, i1 = this, o1 = i1.constructor;\n    if (!i1.isFinite() || i1.isZero()) return new o1(i1);\n    if (r1 = o1.precision, t1 = o1.rounding, o1.precision = r1 + Math.max(i1.e, i1.sd()) + 4, o1.rounding = 1, n1 = i1.d.length, n1 < 3) i1 = Pr(o1, 2, i1, i1, !0);\n    else {\n        e1 = 1.4 * Math.sqrt(n1), e1 = e1 > 16 ? 16 : e1 | 0, i1 = i1.times(1 / fn(5, e1)), i1 = Pr(o1, 2, i1, i1, !0);\n        for(var s1, a1 = new o1(5), l1 = new o1(16), u1 = new o1(20); e1--;)s1 = i1.times(i1), i1 = i1.times(a1.plus(s1.times(l1.times(s1).plus(u1))));\n    }\n    return o1.precision = r1, o1.rounding = t1, y(i1, r1, t1, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return t1.isFinite() ? t1.isZero() ? new n1(t1) : (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + 7, n1.rounding = 1, L(t1.sinh(), t1.cosh(), n1.precision = e1, n1.rounding = r1)) : new n1(t1.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e1 = this, r1 = e1.constructor, t1 = e1.abs().cmp(1), n1 = r1.precision, i1 = r1.rounding;\n    return t1 !== -1 ? t1 === 0 ? e1.isNeg() ? we(r1, n1, i1) : new r1(0) : new r1(NaN) : e1.isZero() ? we(r1, n1 + 4, i1).times(.5) : (r1.precision = n1 + 6, r1.rounding = 1, e1 = new r1(1).minus(e1).div(e1.plus(1)).sqrt().atan(), r1.precision = n1, r1.rounding = i1, e1.times(2));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return t1.lte(1) ? new n1(t1.eq(1) ? 0 : NaN) : t1.isFinite() ? (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + Math.max(Math.abs(t1.e), t1.sd()) + 4, n1.rounding = 1, w = !1, t1 = t1.times(t1).minus(1).sqrt().plus(t1), w = !0, n1.precision = e1, n1.rounding = r1, t1.ln()) : new n1(t1);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return !t1.isFinite() || t1.isZero() ? new n1(t1) : (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + 2 * Math.max(Math.abs(t1.e), t1.sd()) + 6, n1.rounding = 1, w = !1, t1 = t1.times(t1).plus(1).sqrt().plus(t1), w = !0, n1.precision = e1, n1.rounding = r1, t1.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e1, r1, t1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isFinite() ? i1.e >= 0 ? new o1(i1.abs().eq(1) ? i1.s / 0 : i1.isZero() ? i1 : NaN) : (e1 = o1.precision, r1 = o1.rounding, n1 = i1.sd(), Math.max(n1, e1) < 2 * -i1.e - 1 ? y(new o1(i1), e1, r1, !0) : (o1.precision = t1 = n1 - i1.e, i1 = L(i1.plus(1), new o1(1).minus(i1), t1 + e1, 1), o1.precision = e1 + 4, o1.rounding = 1, i1 = i1.ln(), o1.precision = e1, o1.rounding = r1, i1.times(.5))) : new o1(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e1, r1, t1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isZero() ? new o1(i1) : (r1 = i1.abs().cmp(1), t1 = o1.precision, n1 = o1.rounding, r1 !== -1 ? r1 === 0 ? (e1 = we(o1, t1 + 4, n1).times(.5), e1.s = i1.s, e1) : new o1(NaN) : (o1.precision = t1 + 6, o1.rounding = 1, i1 = i1.div(new o1(1).minus(i1.times(i1)).sqrt().plus(1)).atan(), o1.precision = t1, o1.rounding = n1, i1.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e1, r1, t1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding;\n    if (u1.isFinite()) {\n        if (u1.isZero()) return new c1(u1);\n        if (u1.abs().eq(1) && p1 + 4 <= Vi) return s1 = we(c1, p1 + 4, d1).times(.25), s1.s = u1.s, s1;\n    } else {\n        if (!u1.s) return new c1(NaN);\n        if (p1 + 4 <= Vi) return s1 = we(c1, p1 + 4, d1).times(.5), s1.s = u1.s, s1;\n    }\n    for(c1.precision = a1 = p1 + 10, c1.rounding = 1, t1 = Math.min(28, a1 / E + 2 | 0), e1 = t1; e1; --e1)u1 = u1.div(u1.times(u1).plus(1).sqrt().plus(1));\n    for(w = !1, r1 = Math.ceil(a1 / E), n1 = 1, l1 = u1.times(u1), s1 = new c1(u1), i1 = u1; e1 !== -1;)if (i1 = i1.times(l1), o1 = s1.minus(i1.div(n1 += 2)), i1 = i1.times(l1), s1 = o1.plus(i1.div(n1 += 2)), s1.d[r1] !== void 0) for(e1 = r1; s1.d[e1] === o1.d[e1] && e1--;);\n    return t1 && (s1 = s1.times(2 << t1 - 1)), w = !0, y(s1, c1.precision = p1, c1.rounding = d1, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && X(this.e / E) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e1) {\n    return this.cmp(e1) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e1) {\n    return this.cmp(e1) < 1;\n};\nm.logarithm = m.log = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding, f1 = 5;\n    if (e1 == null) e1 = new c1(10), r1 = !0;\n    else {\n        if (e1 = new c1(e1), t1 = e1.d, e1.s < 0 || !t1 || !t1[0] || e1.eq(1)) return new c1(NaN);\n        r1 = e1.eq(10);\n    }\n    if (t1 = u1.d, u1.s < 0 || !t1 || !t1[0] || u1.eq(1)) return new c1(t1 && !t1[0] ? -1 / 0 : u1.s != 1 ? NaN : t1 ? 0 : 1 / 0);\n    if (r1) if (t1.length > 1) o1 = !0;\n    else {\n        for(i1 = t1[0]; i1 % 10 === 0;)i1 /= 10;\n        o1 = i1 !== 1;\n    }\n    if (w = !1, a1 = p1 + f1, s1 = Je(u1, a1), n1 = r1 ? pn(c1, a1 + 10) : Je(e1, a1), l1 = L(s1, n1, a1, 1), st(l1.d, i1 = p1, d1)) do if (a1 += 10, s1 = Je(u1, a1), n1 = r1 ? pn(c1, a1 + 10) : Je(e1, a1), l1 = L(s1, n1, a1, 1), !o1) {\n        +J(l1.d).slice(i1 + 1, i1 + 15) + 1 == 1e14 && (l1 = y(l1, p1 + 1, 0));\n        break;\n    }\n    while (st(l1.d, i1 += 10, d1));\n    return w = !0, y(l1, p1, d1);\n};\nm.minus = m.sub = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, g1 = f1.constructor;\n    if (e1 = new g1(e1), !f1.d || !e1.d) return !f1.s || !e1.s ? e1 = new g1(NaN) : f1.d ? e1.s = -e1.s : e1 = new g1(e1.d || f1.s !== e1.s ? f1 : NaN), e1;\n    if (f1.s != e1.s) return e1.s = -e1.s, f1.plus(e1);\n    if (u1 = f1.d, d1 = e1.d, a1 = g1.precision, l1 = g1.rounding, !u1[0] || !d1[0]) {\n        if (d1[0]) e1.s = -e1.s;\n        else if (u1[0]) e1 = new g1(f1);\n        else return new g1(l1 === 3 ? -0 : 0);\n        return w ? y(e1, a1, l1) : e1;\n    }\n    if (t1 = X(e1.e / E), c1 = X(f1.e / E), u1 = u1.slice(), o1 = c1 - t1, o1) {\n        for(p1 = o1 < 0, p1 ? (r1 = u1, o1 = -o1, s1 = d1.length) : (r1 = d1, t1 = c1, s1 = u1.length), n1 = Math.max(Math.ceil(a1 / E), s1) + 2, o1 > n1 && (o1 = n1, r1.length = 1), r1.reverse(), n1 = o1; n1--;)r1.push(0);\n        r1.reverse();\n    } else {\n        for(n1 = u1.length, s1 = d1.length, p1 = n1 < s1, p1 && (s1 = n1), n1 = 0; n1 < s1; n1++)if (u1[n1] != d1[n1]) {\n            p1 = u1[n1] < d1[n1];\n            break;\n        }\n        o1 = 0;\n    }\n    for(p1 && (r1 = u1, u1 = d1, d1 = r1, e1.s = -e1.s), s1 = u1.length, n1 = d1.length - s1; n1 > 0; --n1)u1[s1++] = 0;\n    for(n1 = d1.length; n1 > o1;){\n        if (u1[--n1] < d1[n1]) {\n            for(i1 = n1; i1 && u1[--i1] === 0;)u1[i1] = fe - 1;\n            --u1[i1], u1[n1] += fe;\n        }\n        u1[n1] -= d1[n1];\n    }\n    for(; u1[--s1] === 0;)u1.pop();\n    for(; u1[0] === 0; u1.shift())--t1;\n    return u1[0] ? (e1.d = u1, e1.e = mn(u1, t1), w ? y(e1, a1, l1) : e1) : new g1(l1 === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e1) {\n    var r1, t1 = this, n1 = t1.constructor;\n    return e1 = new n1(e1), !t1.d || !e1.s || e1.d && !e1.d[0] ? new n1(NaN) : !e1.d || t1.d && !t1.d[0] ? y(new n1(t1), n1.precision, n1.rounding) : (w = !1, n1.modulo == 9 ? (r1 = L(t1, e1.abs(), 0, 3, 1), r1.s *= e1.s) : r1 = L(t1, e1, 0, n1.modulo, 1), r1 = r1.times(e1), w = !0, t1.minus(r1));\n};\nm.naturalExponential = m.exp = function() {\n    return Bi(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return Je(this);\n};\nm.negated = m.neg = function() {\n    var e1 = new this.constructor(this);\n    return e1.s = -e1.s, y(e1);\n};\nm.plus = m.add = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1, l1, u1, c1, p1 = this, d1 = p1.constructor;\n    if (e1 = new d1(e1), !p1.d || !e1.d) return !p1.s || !e1.s ? e1 = new d1(NaN) : p1.d || (e1 = new d1(e1.d || p1.s === e1.s ? p1 : NaN)), e1;\n    if (p1.s != e1.s) return e1.s = -e1.s, p1.minus(e1);\n    if (u1 = p1.d, c1 = e1.d, a1 = d1.precision, l1 = d1.rounding, !u1[0] || !c1[0]) return c1[0] || (e1 = new d1(p1)), w ? y(e1, a1, l1) : e1;\n    if (o1 = X(p1.e / E), n1 = X(e1.e / E), u1 = u1.slice(), i1 = o1 - n1, i1) {\n        for(i1 < 0 ? (t1 = u1, i1 = -i1, s1 = c1.length) : (t1 = c1, n1 = o1, s1 = u1.length), o1 = Math.ceil(a1 / E), s1 = o1 > s1 ? o1 + 1 : s1 + 1, i1 > s1 && (i1 = s1, t1.length = 1), t1.reverse(); i1--;)t1.push(0);\n        t1.reverse();\n    }\n    for(s1 = u1.length, i1 = c1.length, s1 - i1 < 0 && (i1 = s1, t1 = c1, c1 = u1, u1 = t1), r1 = 0; i1;)r1 = (u1[--i1] = u1[i1] + c1[i1] + r1) / fe | 0, u1[i1] %= fe;\n    for(r1 && (u1.unshift(r1), ++n1), s1 = u1.length; u1[--s1] == 0;)u1.pop();\n    return e1.d = u1, e1.e = mn(u1, n1), w ? y(e1, a1, l1) : e1;\n};\nm.precision = m.sd = function(e1) {\n    var r1, t1 = this;\n    if (e1 !== void 0 && e1 !== !!e1 && e1 !== 1 && e1 !== 0) throw Error(He + e1);\n    return t1.d ? (r1 = Qs(t1.d), e1 && t1.e + 1 > r1 && (r1 = t1.e + 1)) : r1 = NaN, r1;\n};\nm.round = function() {\n    var e1 = this, r1 = e1.constructor;\n    return y(new r1(e1), e1.e + 1, r1.rounding);\n};\nm.sine = m.sin = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return t1.isFinite() ? t1.isZero() ? new n1(t1) : (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + Math.max(t1.e, t1.sd()) + E, n1.rounding = 1, t1 = Tp(n1, Ks(n1, t1)), n1.precision = e1, n1.rounding = r1, y(Le > 2 ? t1.neg() : t1, e1, r1, !0)) : new n1(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e1, r1, t1, n1, i1, o1, s1 = this, a1 = s1.d, l1 = s1.e, u1 = s1.s, c1 = s1.constructor;\n    if (u1 !== 1 || !a1 || !a1[0]) return new c1(!u1 || u1 < 0 && (!a1 || a1[0]) ? NaN : a1 ? s1 : 1 / 0);\n    for(w = !1, u1 = Math.sqrt(+s1), u1 == 0 || u1 == 1 / 0 ? (r1 = J(a1), (r1.length + l1) % 2 == 0 && (r1 += \"0\"), u1 = Math.sqrt(r1), l1 = X((l1 + 1) / 2) - (l1 < 0 || l1 % 2), u1 == 1 / 0 ? r1 = \"5e\" + l1 : (r1 = u1.toExponential(), r1 = r1.slice(0, r1.indexOf(\"e\") + 1) + l1), n1 = new c1(r1)) : n1 = new c1(u1.toString()), t1 = (l1 = c1.precision) + 3;;)if (o1 = n1, n1 = o1.plus(L(s1, o1, t1 + 2, 1)).times(.5), J(o1.d).slice(0, t1) === (r1 = J(n1.d)).slice(0, t1)) if (r1 = r1.slice(t1 - 3, t1 + 1), r1 == \"9999\" || !i1 && r1 == \"4999\") {\n        if (!i1 && (y(o1, l1 + 1, 0), o1.times(o1).eq(s1))) {\n            n1 = o1;\n            break;\n        }\n        t1 += 4, i1 = 1;\n    } else {\n        (!+r1 || !+r1.slice(1) && r1.charAt(0) == \"5\") && (y(n1, l1 + 1, 1), e1 = !n1.times(n1).eq(s1));\n        break;\n    }\n    return w = !0, y(n1, l1, c1.rounding, e1);\n};\nm.tangent = m.tan = function() {\n    var e1, r1, t1 = this, n1 = t1.constructor;\n    return t1.isFinite() ? t1.isZero() ? new n1(t1) : (e1 = n1.precision, r1 = n1.rounding, n1.precision = e1 + 10, n1.rounding = 1, t1 = t1.sin(), t1.s = 1, t1 = L(t1, new n1(1).minus(t1.times(t1)).sqrt(), e1 + 10, 0), n1.precision = e1, n1.rounding = r1, y(Le == 2 || Le == 4 ? t1.neg() : t1, e1, r1, !0)) : new n1(NaN);\n};\nm.times = m.mul = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor, d1 = c1.d, f1 = (e1 = new p1(e1)).d;\n    if (e1.s *= c1.s, !d1 || !d1[0] || !f1 || !f1[0]) return new p1(!e1.s || d1 && !d1[0] && !f1 || f1 && !f1[0] && !d1 ? NaN : !d1 || !f1 ? e1.s / 0 : e1.s * 0);\n    for(t1 = X(c1.e / E) + X(e1.e / E), l1 = d1.length, u1 = f1.length, l1 < u1 && (o1 = d1, d1 = f1, f1 = o1, s1 = l1, l1 = u1, u1 = s1), o1 = [], s1 = l1 + u1, n1 = s1; n1--;)o1.push(0);\n    for(n1 = u1; --n1 >= 0;){\n        for(r1 = 0, i1 = l1 + n1; i1 > n1;)a1 = o1[i1] + f1[n1] * d1[i1 - n1 - 1] + r1, o1[i1--] = a1 % fe | 0, r1 = a1 / fe | 0;\n        o1[i1] = (o1[i1] + r1) % fe | 0;\n    }\n    for(; !o1[--s1];)o1.pop();\n    return r1 ? ++t1 : o1.shift(), e1.d = o1, e1.e = mn(o1, t1), w ? y(e1, p1.precision, p1.rounding) : e1;\n};\nm.toBinary = function(e1, r1) {\n    return Ui(this, 2, e1, r1);\n};\nm.toDecimalPlaces = m.toDP = function(e1, r1) {\n    var t1 = this, n1 = t1.constructor;\n    return t1 = new n1(t1), e1 === void 0 ? t1 : (ie(e1, 0, Ke), r1 === void 0 ? r1 = n1.rounding : ie(r1, 0, 8), y(t1, e1 + t1.e + 1, r1));\n};\nm.toExponential = function(e1, r1) {\n    var t1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? t1 = xe(n1, !0) : (ie(e1, 0, Ke), r1 === void 0 ? r1 = i1.rounding : ie(r1, 0, 8), n1 = y(new i1(n1), e1 + 1, r1), t1 = xe(n1, !0, e1 + 1)), n1.isNeg() && !n1.isZero() ? \"-\" + t1 : t1;\n};\nm.toFixed = function(e1, r1) {\n    var t1, n1, i1 = this, o1 = i1.constructor;\n    return e1 === void 0 ? t1 = xe(i1) : (ie(e1, 0, Ke), r1 === void 0 ? r1 = o1.rounding : ie(r1, 0, 8), n1 = y(new o1(i1), e1 + i1.e + 1, r1), t1 = xe(n1, !1, e1 + n1.e + 1)), i1.isNeg() && !i1.isZero() ? \"-\" + t1 : t1;\n};\nm.toFraction = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, g1 = f1.d, h1 = f1.constructor;\n    if (!g1) return new h1(f1);\n    if (u1 = t1 = new h1(1), n1 = l1 = new h1(0), r1 = new h1(n1), o1 = r1.e = Qs(g1) - f1.e - 1, s1 = o1 % E, r1.d[0] = U(10, s1 < 0 ? E + s1 : s1), e1 == null) e1 = o1 > 0 ? r1 : u1;\n    else {\n        if (a1 = new h1(e1), !a1.isInt() || a1.lt(u1)) throw Error(He + a1);\n        e1 = a1.gt(r1) ? o1 > 0 ? r1 : u1 : a1;\n    }\n    for(w = !1, a1 = new h1(J(g1)), c1 = h1.precision, h1.precision = o1 = g1.length * E * 2; p1 = L(a1, r1, 0, 1, 1), i1 = t1.plus(p1.times(n1)), i1.cmp(e1) != 1;)t1 = n1, n1 = i1, i1 = u1, u1 = l1.plus(p1.times(i1)), l1 = i1, i1 = r1, r1 = a1.minus(p1.times(i1)), a1 = i1;\n    return i1 = L(e1.minus(t1), n1, 0, 1, 1), l1 = l1.plus(i1.times(u1)), t1 = t1.plus(i1.times(n1)), l1.s = u1.s = f1.s, d1 = L(u1, n1, o1, 1).minus(f1).abs().cmp(L(l1, t1, o1, 1).minus(f1).abs()) < 1 ? [\n        u1,\n        n1\n    ] : [\n        l1,\n        t1\n    ], h1.precision = c1, w = !0, d1;\n};\nm.toHexadecimal = m.toHex = function(e1, r1) {\n    return Ui(this, 16, e1, r1);\n};\nm.toNearest = function(e1, r1) {\n    var t1 = this, n1 = t1.constructor;\n    if (t1 = new n1(t1), e1 == null) {\n        if (!t1.d) return t1;\n        e1 = new n1(1), r1 = n1.rounding;\n    } else {\n        if (e1 = new n1(e1), r1 === void 0 ? r1 = n1.rounding : ie(r1, 0, 8), !t1.d) return e1.s ? t1 : e1;\n        if (!e1.d) return e1.s && (e1.s = t1.s), e1;\n    }\n    return e1.d[0] ? (w = !1, t1 = L(t1, e1, 0, r1, 1).times(e1), w = !0, y(t1)) : (e1.s = t1.s, t1 = e1), t1;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e1, r1) {\n    return Ui(this, 8, e1, r1);\n};\nm.toPower = m.pow = function(e1) {\n    var r1, t1, n1, i1, o1, s1, a1 = this, l1 = a1.constructor, u1 = +(e1 = new l1(e1));\n    if (!a1.d || !e1.d || !a1.d[0] || !e1.d[0]) return new l1(U(+a1, u1));\n    if (a1 = new l1(a1), a1.eq(1)) return a1;\n    if (n1 = l1.precision, o1 = l1.rounding, e1.eq(1)) return y(a1, n1, o1);\n    if (r1 = X(e1.e / E), r1 >= e1.d.length - 1 && (t1 = u1 < 0 ? -u1 : u1) <= wp) return i1 = Ws(l1, a1, t1, n1), e1.s < 0 ? new l1(1).div(i1) : y(i1, n1, o1);\n    if (s1 = a1.s, s1 < 0) {\n        if (r1 < e1.d.length - 1) return new l1(NaN);\n        if ((e1.d[r1] & 1) == 0 && (s1 = 1), a1.e == 0 && a1.d[0] == 1 && a1.d.length == 1) return a1.s = s1, a1;\n    }\n    return t1 = U(+a1, u1), r1 = t1 == 0 || !isFinite(t1) ? X(u1 * (Math.log(\"0.\" + J(a1.d)) / Math.LN10 + a1.e + 1)) : new l1(t1 + \"\").e, r1 > l1.maxE + 1 || r1 < l1.minE - 1 ? new l1(r1 > 0 ? s1 / 0 : 0) : (w = !1, l1.rounding = a1.s = 1, t1 = Math.min(12, (r1 + \"\").length), i1 = Bi(e1.times(Je(a1, n1 + t1)), n1), i1.d && (i1 = y(i1, n1 + 5, 1), st(i1.d, n1, o1) && (r1 = n1 + 10, i1 = y(Bi(e1.times(Je(a1, r1 + t1)), r1), r1 + 5, 1), +J(i1.d).slice(n1 + 1, n1 + 15) + 1 == 1e14 && (i1 = y(i1, n1 + 1, 0)))), i1.s = s1, w = !0, l1.rounding = o1, y(i1, n1, o1));\n};\nm.toPrecision = function(e1, r1) {\n    var t1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? t1 = xe(n1, n1.e <= i1.toExpNeg || n1.e >= i1.toExpPos) : (ie(e1, 1, Ke), r1 === void 0 ? r1 = i1.rounding : ie(r1, 0, 8), n1 = y(new i1(n1), e1, r1), t1 = xe(n1, e1 <= n1.e || n1.e <= i1.toExpNeg, e1)), n1.isNeg() && !n1.isZero() ? \"-\" + t1 : t1;\n};\nm.toSignificantDigits = m.toSD = function(e1, r1) {\n    var t1 = this, n1 = t1.constructor;\n    return e1 === void 0 ? (e1 = n1.precision, r1 = n1.rounding) : (ie(e1, 1, Ke), r1 === void 0 ? r1 = n1.rounding : ie(r1, 0, 8)), y(new n1(t1), e1, r1);\n};\nm.toString = function() {\n    var e1 = this, r1 = e1.constructor, t1 = xe(e1, e1.e <= r1.toExpNeg || e1.e >= r1.toExpPos);\n    return e1.isNeg() && !e1.isZero() ? \"-\" + t1 : t1;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e1 = this, r1 = e1.constructor, t1 = xe(e1, e1.e <= r1.toExpNeg || e1.e >= r1.toExpPos);\n    return e1.isNeg() ? \"-\" + t1 : t1;\n};\nfunction J(e1) {\n    var r1, t1, n1, i1 = e1.length - 1, o1 = \"\", s1 = e1[0];\n    if (i1 > 0) {\n        for(o1 += s1, r1 = 1; r1 < i1; r1++)n1 = e1[r1] + \"\", t1 = E - n1.length, t1 && (o1 += We(t1)), o1 += n1;\n        s1 = e1[r1], n1 = s1 + \"\", t1 = E - n1.length, t1 && (o1 += We(t1));\n    } else if (s1 === 0) return \"0\";\n    for(; s1 % 10 === 0;)s1 /= 10;\n    return o1 + s1;\n}\nfunction ie(e1, r1, t1) {\n    if (e1 !== ~~e1 || e1 < r1 || e1 > t1) throw Error(He + e1);\n}\nfunction st(e1, r1, t1, n1) {\n    var i1, o1, s1, a1;\n    for(o1 = e1[0]; o1 >= 10; o1 /= 10)--r1;\n    return --r1 < 0 ? (r1 += E, i1 = 0) : (i1 = Math.ceil((r1 + 1) / E), r1 %= E), o1 = U(10, E - r1), a1 = e1[i1] % o1 | 0, n1 == null ? r1 < 3 ? (r1 == 0 ? a1 = a1 / 100 | 0 : r1 == 1 && (a1 = a1 / 10 | 0), s1 = t1 < 4 && a1 == 99999 || t1 > 3 && a1 == 49999 || a1 == 5e4 || a1 == 0) : s1 = (t1 < 4 && a1 + 1 == o1 || t1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 100 | 0) == U(10, r1 - 2) - 1 || (a1 == o1 / 2 || a1 == 0) && (e1[i1 + 1] / o1 / 100 | 0) == 0 : r1 < 4 ? (r1 == 0 ? a1 = a1 / 1e3 | 0 : r1 == 1 ? a1 = a1 / 100 | 0 : r1 == 2 && (a1 = a1 / 10 | 0), s1 = (n1 || t1 < 4) && a1 == 9999 || !n1 && t1 > 3 && a1 == 4999) : s1 = ((n1 || t1 < 4) && a1 + 1 == o1 || !n1 && t1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 1e3 | 0) == U(10, r1 - 3) - 1, s1;\n}\nfunction an(e1, r1, t1) {\n    for(var n1, i1 = [\n        0\n    ], o1, s1 = 0, a1 = e1.length; s1 < a1;){\n        for(o1 = i1.length; o1--;)i1[o1] *= r1;\n        for(i1[0] += qi.indexOf(e1.charAt(s1++)), n1 = 0; n1 < i1.length; n1++)i1[n1] > t1 - 1 && (i1[n1 + 1] === void 0 && (i1[n1 + 1] = 0), i1[n1 + 1] += i1[n1] / t1 | 0, i1[n1] %= t1);\n    }\n    return i1.reverse();\n}\nfunction vp(e1, r1) {\n    var t1, n1, i1;\n    if (r1.isZero()) return r1;\n    n1 = r1.d.length, n1 < 32 ? (t1 = Math.ceil(n1 / 3), i1 = (1 / fn(4, t1)).toString()) : (t1 = 16, i1 = \"2.3283064365386962890625e-10\"), e1.precision += t1, r1 = Pr(e1, 1, r1.times(i1), new e1(1));\n    for(var o1 = t1; o1--;){\n        var s1 = r1.times(r1);\n        r1 = s1.times(s1).minus(s1).times(8).plus(1);\n    }\n    return e1.precision -= t1, r1;\n}\nvar L = function() {\n    function e1(n1, i1, o1) {\n        var s1, a1 = 0, l1 = n1.length;\n        for(n1 = n1.slice(); l1--;)s1 = n1[l1] * i1 + a1, n1[l1] = s1 % o1 | 0, a1 = s1 / o1 | 0;\n        return a1 && n1.unshift(a1), n1;\n    }\n    function r1(n1, i1, o1, s1) {\n        var a1, l1;\n        if (o1 != s1) l1 = o1 > s1 ? 1 : -1;\n        else for(a1 = l1 = 0; a1 < o1; a1++)if (n1[a1] != i1[a1]) {\n            l1 = n1[a1] > i1[a1] ? 1 : -1;\n            break;\n        }\n        return l1;\n    }\n    function t1(n1, i1, o1, s1) {\n        for(var a1 = 0; o1--;)n1[o1] -= a1, a1 = n1[o1] < i1[o1] ? 1 : 0, n1[o1] = a1 * s1 + n1[o1] - i1[o1];\n        for(; !n1[0] && n1.length > 1;)n1.shift();\n    }\n    return function(n1, i1, o1, s1, a1, l1) {\n        var u1, c1, p1, d1, f1, g1, h1, I1, P1, S1, b1, O1, me1, ae1, Jr1, V1, te1, Ae1, H1, fr1, $t1 = n1.constructor, Xn1 = n1.s == i1.s ? 1 : -1, K1 = n1.d, _1 = i1.d;\n        if (!K1 || !K1[0] || !_1 || !_1[0]) return new $t1(!n1.s || !i1.s || (K1 ? _1 && K1[0] == _1[0] : !_1) ? NaN : K1 && K1[0] == 0 || !_1 ? Xn1 * 0 : Xn1 / 0);\n        for(l1 ? (f1 = 1, c1 = n1.e - i1.e) : (l1 = fe, f1 = E, c1 = X(n1.e / f1) - X(i1.e / f1)), H1 = _1.length, te1 = K1.length, P1 = new $t1(Xn1), S1 = P1.d = [], p1 = 0; _1[p1] == (K1[p1] || 0); p1++);\n        if (_1[p1] > (K1[p1] || 0) && c1--, o1 == null ? (ae1 = o1 = $t1.precision, s1 = $t1.rounding) : a1 ? ae1 = o1 + (n1.e - i1.e) + 1 : ae1 = o1, ae1 < 0) S1.push(1), g1 = !0;\n        else {\n            if (ae1 = ae1 / f1 + 2 | 0, p1 = 0, H1 == 1) {\n                for(d1 = 0, _1 = _1[0], ae1++; (p1 < te1 || d1) && ae1--; p1++)Jr1 = d1 * l1 + (K1[p1] || 0), S1[p1] = Jr1 / _1 | 0, d1 = Jr1 % _1 | 0;\n                g1 = d1 || p1 < te1;\n            } else {\n                for(d1 = l1 / (_1[0] + 1) | 0, d1 > 1 && (_1 = e1(_1, d1, l1), K1 = e1(K1, d1, l1), H1 = _1.length, te1 = K1.length), V1 = H1, b1 = K1.slice(0, H1), O1 = b1.length; O1 < H1;)b1[O1++] = 0;\n                fr1 = _1.slice(), fr1.unshift(0), Ae1 = _1[0], _1[1] >= l1 / 2 && ++Ae1;\n                do d1 = 0, u1 = r1(_1, b1, H1, O1), u1 < 0 ? (me1 = b1[0], H1 != O1 && (me1 = me1 * l1 + (b1[1] || 0)), d1 = me1 / Ae1 | 0, d1 > 1 ? (d1 >= l1 && (d1 = l1 - 1), h1 = e1(_1, d1, l1), I1 = h1.length, O1 = b1.length, u1 = r1(h1, b1, I1, O1), u1 == 1 && (d1--, t1(h1, H1 < I1 ? fr1 : _1, I1, l1))) : (d1 == 0 && (u1 = d1 = 1), h1 = _1.slice()), I1 = h1.length, I1 < O1 && h1.unshift(0), t1(b1, h1, O1, l1), u1 == -1 && (O1 = b1.length, u1 = r1(_1, b1, H1, O1), u1 < 1 && (d1++, t1(b1, H1 < O1 ? fr1 : _1, O1, l1))), O1 = b1.length) : u1 === 0 && (d1++, b1 = [\n                    0\n                ]), S1[p1++] = d1, u1 && b1[0] ? b1[O1++] = K1[V1] || 0 : (b1 = [\n                    K1[V1]\n                ], O1 = 1);\n                while ((V1++ < te1 || b1[0] !== void 0) && ae1--);\n                g1 = b1[0] !== void 0;\n            }\n            S1[0] || S1.shift();\n        }\n        if (f1 == 1) P1.e = c1, js = g1;\n        else {\n            for(p1 = 1, d1 = S1[0]; d1 >= 10; d1 /= 10)p1++;\n            P1.e = p1 + c1 * f1 - 1, y(P1, a1 ? o1 + P1.e + 1 : o1, s1, g1);\n        }\n        return P1;\n    };\n}();\nfunction y(e1, r1, t1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor;\n    e: if (r1 != null) {\n        if (p1 = e1.d, !p1) return e1;\n        for(i1 = 1, a1 = p1[0]; a1 >= 10; a1 /= 10)i1++;\n        if (o1 = r1 - i1, o1 < 0) o1 += E, s1 = r1, c1 = p1[d1 = 0], l1 = c1 / U(10, i1 - s1 - 1) % 10 | 0;\n        else if (d1 = Math.ceil((o1 + 1) / E), a1 = p1.length, d1 >= a1) if (n1) {\n            for(; a1++ <= d1;)p1.push(0);\n            c1 = l1 = 0, i1 = 1, o1 %= E, s1 = o1 - E + 1;\n        } else break e;\n        else {\n            for(c1 = a1 = p1[d1], i1 = 1; a1 >= 10; a1 /= 10)i1++;\n            o1 %= E, s1 = o1 - E + i1, l1 = s1 < 0 ? 0 : c1 / U(10, i1 - s1 - 1) % 10 | 0;\n        }\n        if (n1 = n1 || r1 < 0 || p1[d1 + 1] !== void 0 || (s1 < 0 ? c1 : c1 % U(10, i1 - s1 - 1)), u1 = t1 < 4 ? (l1 || n1) && (t1 == 0 || t1 == (e1.s < 0 ? 3 : 2)) : l1 > 5 || l1 == 5 && (t1 == 4 || n1 || t1 == 6 && (o1 > 0 ? s1 > 0 ? c1 / U(10, i1 - s1) : 0 : p1[d1 - 1]) % 10 & 1 || t1 == (e1.s < 0 ? 8 : 7)), r1 < 1 || !p1[0]) return p1.length = 0, u1 ? (r1 -= e1.e + 1, p1[0] = U(10, (E - r1 % E) % E), e1.e = -r1 || 0) : p1[0] = e1.e = 0, e1;\n        if (o1 == 0 ? (p1.length = d1, a1 = 1, d1--) : (p1.length = d1 + 1, a1 = U(10, E - o1), p1[d1] = s1 > 0 ? (c1 / U(10, i1 - s1) % U(10, s1) | 0) * a1 : 0), u1) for(;;)if (d1 == 0) {\n            for(o1 = 1, s1 = p1[0]; s1 >= 10; s1 /= 10)o1++;\n            for(s1 = p1[0] += a1, a1 = 1; s1 >= 10; s1 /= 10)a1++;\n            o1 != a1 && (e1.e++, p1[0] == fe && (p1[0] = 1));\n            break;\n        } else {\n            if (p1[d1] += a1, p1[d1] != fe) break;\n            p1[d1--] = 0, a1 = 1;\n        }\n        for(o1 = p1.length; p1[--o1] === 0;)p1.pop();\n    }\n    return w && (e1.e > f1.maxE ? (e1.d = null, e1.e = NaN) : e1.e < f1.minE && (e1.e = 0, e1.d = [\n        0\n    ])), e1;\n}\nfunction xe(e1, r1, t1) {\n    if (!e1.isFinite()) return Hs(e1);\n    var n1, i1 = e1.e, o1 = J(e1.d), s1 = o1.length;\n    return r1 ? (t1 && (n1 = t1 - s1) > 0 ? o1 = o1.charAt(0) + \".\" + o1.slice(1) + We(n1) : s1 > 1 && (o1 = o1.charAt(0) + \".\" + o1.slice(1)), o1 = o1 + (e1.e < 0 ? \"e\" : \"e+\") + e1.e) : i1 < 0 ? (o1 = \"0.\" + We(-i1 - 1) + o1, t1 && (n1 = t1 - s1) > 0 && (o1 += We(n1))) : i1 >= s1 ? (o1 += We(i1 + 1 - s1), t1 && (n1 = t1 - i1 - 1) > 0 && (o1 = o1 + \".\" + We(n1))) : ((n1 = i1 + 1) < s1 && (o1 = o1.slice(0, n1) + \".\" + o1.slice(n1)), t1 && (n1 = t1 - s1) > 0 && (i1 + 1 === s1 && (o1 += \".\"), o1 += We(n1))), o1;\n}\nfunction mn(e1, r1) {\n    var t1 = e1[0];\n    for(r1 *= E; t1 >= 10; t1 /= 10)r1++;\n    return r1;\n}\nfunction pn(e1, r1, t1) {\n    if (r1 > xp) throw w = !0, t1 && (e1.precision = t1), Error(Vs);\n    return y(new e1(un), r1, 1, !0);\n}\nfunction we(e1, r1, t1) {\n    if (r1 > Vi) throw Error(Vs);\n    return y(new e1(cn), r1, t1, !0);\n}\nfunction Qs(e1) {\n    var r1 = e1.length - 1, t1 = r1 * E + 1;\n    if (r1 = e1[r1], r1) {\n        for(; r1 % 10 == 0; r1 /= 10)t1--;\n        for(r1 = e1[0]; r1 >= 10; r1 /= 10)t1++;\n    }\n    return t1;\n}\nfunction We(e1) {\n    for(var r1 = \"\"; e1--;)r1 += \"0\";\n    return r1;\n}\nfunction Ws(e1, r1, t1, n1) {\n    var i1, o1 = new e1(1), s1 = Math.ceil(n1 / E + 4);\n    for(w = !1;;){\n        if (t1 % 2 && (o1 = o1.times(r1), $s(o1.d, s1) && (i1 = !0)), t1 = X(t1 / 2), t1 === 0) {\n            t1 = o1.d.length - 1, i1 && o1.d[t1] === 0 && ++o1.d[t1];\n            break;\n        }\n        r1 = r1.times(r1), $s(r1.d, s1);\n    }\n    return w = !0, o1;\n}\nfunction Ms(e1) {\n    return e1.d[e1.d.length - 1] & 1;\n}\nfunction Js(e1, r1, t1) {\n    for(var n1, i1, o1 = new e1(r1[0]), s1 = 0; ++s1 < r1.length;){\n        if (i1 = new e1(r1[s1]), !i1.s) {\n            o1 = i1;\n            break;\n        }\n        n1 = o1.cmp(i1), (n1 === t1 || n1 === 0 && o1.s === t1) && (o1 = i1);\n    }\n    return o1;\n}\nfunction Bi(e1, r1) {\n    var t1, n1, i1, o1, s1, a1, l1, u1 = 0, c1 = 0, p1 = 0, d1 = e1.constructor, f1 = d1.rounding, g1 = d1.precision;\n    if (!e1.d || !e1.d[0] || e1.e > 17) return new d1(e1.d ? e1.d[0] ? e1.s < 0 ? 0 : 1 / 0 : 1 : e1.s ? e1.s < 0 ? 0 : e1 : NaN);\n    for(r1 == null ? (w = !1, l1 = g1) : l1 = r1, a1 = new d1(.03125); e1.e > -2;)e1 = e1.times(a1), p1 += 5;\n    for(n1 = Math.log(U(2, p1)) / Math.LN10 * 2 + 5 | 0, l1 += n1, t1 = o1 = s1 = new d1(1), d1.precision = l1;;){\n        if (o1 = y(o1.times(e1), l1, 1), t1 = t1.times(++c1), a1 = s1.plus(L(o1, t1, l1, 1)), J(a1.d).slice(0, l1) === J(s1.d).slice(0, l1)) {\n            for(i1 = p1; i1--;)s1 = y(s1.times(s1), l1, 1);\n            if (r1 == null) if (u1 < 3 && st(s1.d, l1 - n1, f1, u1)) d1.precision = l1 += 10, t1 = o1 = a1 = new d1(1), c1 = 0, u1++;\n            else return y(s1, d1.precision = g1, f1, w = !0);\n            else return d1.precision = g1, s1;\n        }\n        s1 = a1;\n    }\n}\nfunction Je(e1, r1) {\n    var t1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = 1, g1 = 10, h1 = e1, I1 = h1.d, P1 = h1.constructor, S1 = P1.rounding, b1 = P1.precision;\n    if (h1.s < 0 || !I1 || !I1[0] || !h1.e && I1[0] == 1 && I1.length == 1) return new P1(I1 && !I1[0] ? -1 / 0 : h1.s != 1 ? NaN : I1 ? 0 : h1);\n    if (r1 == null ? (w = !1, c1 = b1) : c1 = r1, P1.precision = c1 += g1, t1 = J(I1), n1 = t1.charAt(0), Math.abs(o1 = h1.e) < 15e14) {\n        for(; n1 < 7 && n1 != 1 || n1 == 1 && t1.charAt(1) > 3;)h1 = h1.times(e1), t1 = J(h1.d), n1 = t1.charAt(0), f1++;\n        o1 = h1.e, n1 > 1 ? (h1 = new P1(\"0.\" + t1), o1++) : h1 = new P1(n1 + \".\" + t1.slice(1));\n    } else return u1 = pn(P1, c1 + 2, b1).times(o1 + \"\"), h1 = Je(new P1(n1 + \".\" + t1.slice(1)), c1 - g1).plus(u1), P1.precision = b1, r1 == null ? y(h1, b1, S1, w = !0) : h1;\n    for(p1 = h1, l1 = s1 = h1 = L(h1.minus(1), h1.plus(1), c1, 1), d1 = y(h1.times(h1), c1, 1), i1 = 3;;){\n        if (s1 = y(s1.times(d1), c1, 1), u1 = l1.plus(L(s1, new P1(i1), c1, 1)), J(u1.d).slice(0, c1) === J(l1.d).slice(0, c1)) if (l1 = l1.times(2), o1 !== 0 && (l1 = l1.plus(pn(P1, c1 + 2, b1).times(o1 + \"\"))), l1 = L(l1, new P1(f1), c1, 1), r1 == null) if (st(l1.d, c1 - g1, S1, a1)) P1.precision = c1 += g1, u1 = s1 = h1 = L(p1.minus(1), p1.plus(1), c1, 1), d1 = y(h1.times(h1), c1, 1), i1 = a1 = 1;\n        else return y(l1, P1.precision = b1, S1, w = !0);\n        else return P1.precision = b1, l1;\n        l1 = u1, i1 += 2;\n    }\n}\nfunction Hs(e1) {\n    return String(e1.s * e1.s / 0);\n}\nfunction ln(e1, r1) {\n    var t1, n1, i1;\n    for((t1 = r1.indexOf(\".\")) > -1 && (r1 = r1.replace(\".\", \"\")), (n1 = r1.search(/e/i)) > 0 ? (t1 < 0 && (t1 = n1), t1 += +r1.slice(n1 + 1), r1 = r1.substring(0, n1)) : t1 < 0 && (t1 = r1.length), n1 = 0; r1.charCodeAt(n1) === 48; n1++);\n    for(i1 = r1.length; r1.charCodeAt(i1 - 1) === 48; --i1);\n    if (r1 = r1.slice(n1, i1), r1) {\n        if (i1 -= n1, e1.e = t1 = t1 - n1 - 1, e1.d = [], n1 = (t1 + 1) % E, t1 < 0 && (n1 += E), n1 < i1) {\n            for(n1 && e1.d.push(+r1.slice(0, n1)), i1 -= E; n1 < i1;)e1.d.push(+r1.slice(n1, n1 += E));\n            r1 = r1.slice(n1), n1 = E - r1.length;\n        } else n1 -= i1;\n        for(; n1--;)r1 += \"0\";\n        e1.d.push(+r1), w && (e1.e > e1.constructor.maxE ? (e1.d = null, e1.e = NaN) : e1.e < e1.constructor.minE && (e1.e = 0, e1.d = [\n            0\n        ]));\n    } else e1.e = 0, e1.d = [\n        0\n    ];\n    return e1;\n}\nfunction Pp(e1, r1) {\n    var t1, n1, i1, o1, s1, a1, l1, u1, c1;\n    if (r1.indexOf(\"_\") > -1) {\n        if (r1 = r1.replace(/(\\d)_(?=\\d)/g, \"$1\"), Gs.test(r1)) return ln(e1, r1);\n    } else if (r1 === \"Infinity\" || r1 === \"NaN\") return +r1 || (e1.s = NaN), e1.e = NaN, e1.d = null, e1;\n    if (bp.test(r1)) t1 = 16, r1 = r1.toLowerCase();\n    else if (yp.test(r1)) t1 = 2;\n    else if (Ep.test(r1)) t1 = 8;\n    else throw Error(He + r1);\n    for(o1 = r1.search(/p/i), o1 > 0 ? (l1 = +r1.slice(o1 + 1), r1 = r1.substring(2, o1)) : r1 = r1.slice(2), o1 = r1.indexOf(\".\"), s1 = o1 >= 0, n1 = e1.constructor, s1 && (r1 = r1.replace(\".\", \"\"), a1 = r1.length, o1 = a1 - o1, i1 = Ws(n1, new n1(t1), o1, o1 * 2)), u1 = an(r1, t1, fe), c1 = u1.length - 1, o1 = c1; u1[o1] === 0; --o1)u1.pop();\n    return o1 < 0 ? new n1(e1.s * 0) : (e1.e = mn(u1, c1), e1.d = u1, w = !1, s1 && (e1 = L(e1, i1, a1 * 4)), l1 && (e1 = e1.times(Math.abs(l1) < 54 ? U(2, l1) : sr.pow(2, l1))), w = !0, e1);\n}\nfunction Tp(e1, r1) {\n    var t1, n1 = r1.d.length;\n    if (n1 < 3) return r1.isZero() ? r1 : Pr(e1, 2, r1, r1);\n    t1 = 1.4 * Math.sqrt(n1), t1 = t1 > 16 ? 16 : t1 | 0, r1 = r1.times(1 / fn(5, t1)), r1 = Pr(e1, 2, r1, r1);\n    for(var i1, o1 = new e1(5), s1 = new e1(16), a1 = new e1(20); t1--;)i1 = r1.times(r1), r1 = r1.times(o1.plus(i1.times(s1.times(i1).minus(a1))));\n    return r1;\n}\nfunction Pr(e1, r1, t1, n1, i1) {\n    var o1, s1, a1, l1, u1 = 1, c1 = e1.precision, p1 = Math.ceil(c1 / E);\n    for(w = !1, l1 = t1.times(t1), a1 = new e1(n1);;){\n        if (s1 = L(a1.times(l1), new e1(r1++ * r1++), c1, 1), a1 = i1 ? n1.plus(s1) : n1.minus(s1), n1 = L(s1.times(l1), new e1(r1++ * r1++), c1, 1), s1 = a1.plus(n1), s1.d[p1] !== void 0) {\n            for(o1 = p1; s1.d[o1] === a1.d[o1] && o1--;);\n            if (o1 == -1) break;\n        }\n        o1 = a1, a1 = n1, n1 = s1, s1 = o1, u1++;\n    }\n    return w = !0, s1.d.length = p1 + 1, s1;\n}\nfunction fn(e1, r1) {\n    for(var t1 = e1; --r1;)t1 *= e1;\n    return t1;\n}\nfunction Ks(e1, r1) {\n    var t1, n1 = r1.s < 0, i1 = we(e1, e1.precision, 1), o1 = i1.times(.5);\n    if (r1 = r1.abs(), r1.lte(o1)) return Le = n1 ? 4 : 1, r1;\n    if (t1 = r1.divToInt(i1), t1.isZero()) Le = n1 ? 3 : 2;\n    else {\n        if (r1 = r1.minus(t1.times(i1)), r1.lte(o1)) return Le = Ms(t1) ? n1 ? 2 : 3 : n1 ? 4 : 1, r1;\n        Le = Ms(t1) ? n1 ? 1 : 4 : n1 ? 3 : 2;\n    }\n    return r1.minus(i1).abs();\n}\nfunction Ui(e1, r1, t1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor, g1 = t1 !== void 0;\n    if (g1 ? (ie(t1, 1, Ke), n1 === void 0 ? n1 = f1.rounding : ie(n1, 0, 8)) : (t1 = f1.precision, n1 = f1.rounding), !e1.isFinite()) c1 = Hs(e1);\n    else {\n        for(c1 = xe(e1), s1 = c1.indexOf(\".\"), g1 ? (i1 = 2, r1 == 16 ? t1 = t1 * 4 - 3 : r1 == 8 && (t1 = t1 * 3 - 2)) : i1 = r1, s1 >= 0 && (c1 = c1.replace(\".\", \"\"), d1 = new f1(1), d1.e = c1.length - s1, d1.d = an(xe(d1), 10, i1), d1.e = d1.d.length), p1 = an(c1, 10, i1), o1 = l1 = p1.length; p1[--l1] == 0;)p1.pop();\n        if (!p1[0]) c1 = g1 ? \"0p+0\" : \"0\";\n        else {\n            if (s1 < 0 ? o1-- : (e1 = new f1(e1), e1.d = p1, e1.e = o1, e1 = L(e1, d1, t1, n1, 0, i1), p1 = e1.d, o1 = e1.e, u1 = js), s1 = p1[t1], a1 = i1 / 2, u1 = u1 || p1[t1 + 1] !== void 0, u1 = n1 < 4 ? (s1 !== void 0 || u1) && (n1 === 0 || n1 === (e1.s < 0 ? 3 : 2)) : s1 > a1 || s1 === a1 && (n1 === 4 || u1 || n1 === 6 && p1[t1 - 1] & 1 || n1 === (e1.s < 0 ? 8 : 7)), p1.length = t1, u1) for(; ++p1[--t1] > i1 - 1;)p1[t1] = 0, t1 || (++o1, p1.unshift(1));\n            for(l1 = p1.length; !p1[l1 - 1]; --l1);\n            for(s1 = 0, c1 = \"\"; s1 < l1; s1++)c1 += qi.charAt(p1[s1]);\n            if (g1) {\n                if (l1 > 1) if (r1 == 16 || r1 == 8) {\n                    for(s1 = r1 == 16 ? 4 : 3, --l1; l1 % s1; l1++)c1 += \"0\";\n                    for(p1 = an(c1, i1, r1), l1 = p1.length; !p1[l1 - 1]; --l1);\n                    for(s1 = 1, c1 = \"1.\"; s1 < l1; s1++)c1 += qi.charAt(p1[s1]);\n                } else c1 = c1.charAt(0) + \".\" + c1.slice(1);\n                c1 = c1 + (o1 < 0 ? \"p\" : \"p+\") + o1;\n            } else if (o1 < 0) {\n                for(; ++o1;)c1 = \"0\" + c1;\n                c1 = \"0.\" + c1;\n            } else if (++o1 > l1) for(o1 -= l1; o1--;)c1 += \"0\";\n            else o1 < l1 && (c1 = c1.slice(0, o1) + \".\" + c1.slice(o1));\n        }\n        c1 = (r1 == 16 ? \"0x\" : r1 == 2 ? \"0b\" : r1 == 8 ? \"0o\" : \"\") + c1;\n    }\n    return e1.s < 0 ? \"-\" + c1 : c1;\n}\nfunction $s(e1, r1) {\n    if (e1.length > r1) return e1.length = r1, !0;\n}\nfunction Sp(e1) {\n    return new this(e1).abs();\n}\nfunction Rp(e1) {\n    return new this(e1).acos();\n}\nfunction Cp(e1) {\n    return new this(e1).acosh();\n}\nfunction Ap(e1, r1) {\n    return new this(e1).plus(r1);\n}\nfunction Ip(e1) {\n    return new this(e1).asin();\n}\nfunction kp(e1) {\n    return new this(e1).asinh();\n}\nfunction Op(e1) {\n    return new this(e1).atan();\n}\nfunction Dp(e1) {\n    return new this(e1).atanh();\n}\nfunction _p(e1, r1) {\n    e1 = new this(e1), r1 = new this(r1);\n    var t1, n1 = this.precision, i1 = this.rounding, o1 = n1 + 4;\n    return !e1.s || !r1.s ? t1 = new this(NaN) : !e1.d && !r1.d ? (t1 = we(this, o1, 1).times(r1.s > 0 ? .25 : .75), t1.s = e1.s) : !r1.d || e1.isZero() ? (t1 = r1.s < 0 ? we(this, n1, i1) : new this(0), t1.s = e1.s) : !e1.d || r1.isZero() ? (t1 = we(this, o1, 1).times(.5), t1.s = e1.s) : r1.s < 0 ? (this.precision = o1, this.rounding = 1, t1 = this.atan(L(e1, r1, o1, 1)), r1 = we(this, o1, 1), this.precision = n1, this.rounding = i1, t1 = e1.s < 0 ? t1.minus(r1) : t1.plus(r1)) : t1 = this.atan(L(e1, r1, o1, 1)), t1;\n}\nfunction Np(e1) {\n    return new this(e1).cbrt();\n}\nfunction Lp(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 2);\n}\nfunction Fp(e1, r1, t1) {\n    return new this(e1).clamp(r1, t1);\n}\nfunction Mp(e1) {\n    if (!e1 || typeof e1 != \"object\") throw Error(dn + \"Object expected\");\n    var r1, t1, n1, i1 = e1.defaults === !0, o1 = [\n        \"precision\",\n        1,\n        Ke,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -vr,\n        0,\n        \"toExpPos\",\n        0,\n        vr,\n        \"maxE\",\n        0,\n        vr,\n        \"minE\",\n        -vr,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(r1 = 0; r1 < o1.length; r1 += 3)if (t1 = o1[r1], i1 && (this[t1] = ji[t1]), (n1 = e1[t1]) !== void 0) if (X(n1) === n1 && n1 >= o1[r1 + 1] && n1 <= o1[r1 + 2]) this[t1] = n1;\n    else throw Error(He + t1 + \": \" + n1);\n    if (t1 = \"crypto\", i1 && (this[t1] = ji[t1]), (n1 = e1[t1]) !== void 0) if (n1 === !0 || n1 === !1 || n1 === 0 || n1 === 1) if (n1) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[t1] = !0;\n    else throw Error(Bs);\n    else this[t1] = !1;\n    else throw Error(He + t1 + \": \" + n1);\n    return this;\n}\nfunction $p(e1) {\n    return new this(e1).cos();\n}\nfunction qp(e1) {\n    return new this(e1).cosh();\n}\nfunction Ys(e1) {\n    var r1, t1, n1;\n    function i1(o1) {\n        var s1, a1, l1, u1 = this;\n        if (!(u1 instanceof i1)) return new i1(o1);\n        if (u1.constructor = i1, qs(o1)) {\n            u1.s = o1.s, w ? !o1.d || o1.e > i1.maxE ? (u1.e = NaN, u1.d = null) : o1.e < i1.minE ? (u1.e = 0, u1.d = [\n                0\n            ]) : (u1.e = o1.e, u1.d = o1.d.slice()) : (u1.e = o1.e, u1.d = o1.d ? o1.d.slice() : o1.d);\n            return;\n        }\n        if (l1 = typeof o1, l1 === \"number\") {\n            if (o1 === 0) {\n                u1.s = 1 / o1 < 0 ? -1 : 1, u1.e = 0, u1.d = [\n                    0\n                ];\n                return;\n            }\n            if (o1 < 0 ? (o1 = -o1, u1.s = -1) : u1.s = 1, o1 === ~~o1 && o1 < 1e7) {\n                for(s1 = 0, a1 = o1; a1 >= 10; a1 /= 10)s1++;\n                w ? s1 > i1.maxE ? (u1.e = NaN, u1.d = null) : s1 < i1.minE ? (u1.e = 0, u1.d = [\n                    0\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]);\n                return;\n            }\n            if (o1 * 0 !== 0) {\n                o1 || (u1.s = NaN), u1.e = NaN, u1.d = null;\n                return;\n            }\n            return ln(u1, o1.toString());\n        }\n        if (l1 === \"string\") return (a1 = o1.charCodeAt(0)) === 45 ? (o1 = o1.slice(1), u1.s = -1) : (a1 === 43 && (o1 = o1.slice(1)), u1.s = 1), Gs.test(o1) ? ln(u1, o1) : Pp(u1, o1);\n        if (l1 === \"bigint\") return o1 < 0 ? (o1 = -o1, u1.s = -1) : u1.s = 1, ln(u1, o1.toString());\n        throw Error(He + o1);\n    }\n    if (i1.prototype = m, i1.ROUND_UP = 0, i1.ROUND_DOWN = 1, i1.ROUND_CEIL = 2, i1.ROUND_FLOOR = 3, i1.ROUND_HALF_UP = 4, i1.ROUND_HALF_DOWN = 5, i1.ROUND_HALF_EVEN = 6, i1.ROUND_HALF_CEIL = 7, i1.ROUND_HALF_FLOOR = 8, i1.EUCLID = 9, i1.config = i1.set = Mp, i1.clone = Ys, i1.isDecimal = qs, i1.abs = Sp, i1.acos = Rp, i1.acosh = Cp, i1.add = Ap, i1.asin = Ip, i1.asinh = kp, i1.atan = Op, i1.atanh = Dp, i1.atan2 = _p, i1.cbrt = Np, i1.ceil = Lp, i1.clamp = Fp, i1.cos = $p, i1.cosh = qp, i1.div = jp, i1.exp = Vp, i1.floor = Bp, i1.hypot = Up, i1.ln = Gp, i1.log = Qp, i1.log10 = Jp, i1.log2 = Wp, i1.max = Hp, i1.min = Kp, i1.mod = Yp, i1.mul = zp, i1.pow = Zp, i1.random = Xp, i1.round = ed, i1.sign = rd, i1.sin = td, i1.sinh = nd, i1.sqrt = id, i1.sub = od, i1.sum = sd, i1.tan = ad, i1.tanh = ld, i1.trunc = ud, e1 === void 0 && (e1 = {}), e1 && e1.defaults !== !0) for(n1 = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], r1 = 0; r1 < n1.length;)e1.hasOwnProperty(t1 = n1[r1++]) || (e1[t1] = this[t1]);\n    return i1.config(e1), i1;\n}\nfunction jp(e1, r1) {\n    return new this(e1).div(r1);\n}\nfunction Vp(e1) {\n    return new this(e1).exp();\n}\nfunction Bp(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 3);\n}\nfunction Up() {\n    var e1, r1, t1 = new this(0);\n    for(w = !1, e1 = 0; e1 < arguments.length;)if (r1 = new this(arguments[e1++]), r1.d) t1.d && (t1 = t1.plus(r1.times(r1)));\n    else {\n        if (r1.s) return w = !0, new this(1 / 0);\n        t1 = r1;\n    }\n    return w = !0, t1.sqrt();\n}\nfunction qs(e1) {\n    return e1 instanceof sr || e1 && e1.toStringTag === Us || !1;\n}\nfunction Gp(e1) {\n    return new this(e1).ln();\n}\nfunction Qp(e1, r1) {\n    return new this(e1).log(r1);\n}\nfunction Wp(e1) {\n    return new this(e1).log(2);\n}\nfunction Jp(e1) {\n    return new this(e1).log(10);\n}\nfunction Hp() {\n    return Js(this, arguments, -1);\n}\nfunction Kp() {\n    return Js(this, arguments, 1);\n}\nfunction Yp(e1, r1) {\n    return new this(e1).mod(r1);\n}\nfunction zp(e1, r1) {\n    return new this(e1).mul(r1);\n}\nfunction Zp(e1, r1) {\n    return new this(e1).pow(r1);\n}\nfunction Xp(e1) {\n    var r1, t1, n1, i1, o1 = 0, s1 = new this(1), a1 = [];\n    if (e1 === void 0 ? e1 = this.precision : ie(e1, 1, Ke), n1 = Math.ceil(e1 / E), this.crypto) if (crypto.getRandomValues) for(r1 = crypto.getRandomValues(new Uint32Array(n1)); o1 < n1;)i1 = r1[o1], i1 >= 429e7 ? r1[o1] = crypto.getRandomValues(new Uint32Array(1))[0] : a1[o1++] = i1 % 1e7;\n    else if (crypto.randomBytes) {\n        for(r1 = crypto.randomBytes(n1 *= 4); o1 < n1;)i1 = r1[o1] + (r1[o1 + 1] << 8) + (r1[o1 + 2] << 16) + ((r1[o1 + 3] & 127) << 24), i1 >= 214e7 ? crypto.randomBytes(4).copy(r1, o1) : (a1.push(i1 % 1e7), o1 += 4);\n        o1 = n1 / 4;\n    } else throw Error(Bs);\n    else for(; o1 < n1;)a1[o1++] = Math.random() * 1e7 | 0;\n    for(n1 = a1[--o1], e1 %= E, n1 && e1 && (i1 = U(10, E - e1), a1[o1] = (n1 / i1 | 0) * i1); a1[o1] === 0; o1--)a1.pop();\n    if (o1 < 0) t1 = 0, a1 = [\n        0\n    ];\n    else {\n        for(t1 = -1; a1[0] === 0; t1 -= E)a1.shift();\n        for(n1 = 1, i1 = a1[0]; i1 >= 10; i1 /= 10)n1++;\n        n1 < E && (t1 -= E - n1);\n    }\n    return s1.e = t1, s1.d = a1, s1;\n}\nfunction ed(e1) {\n    return y(e1 = new this(e1), e1.e + 1, this.rounding);\n}\nfunction rd(e1) {\n    return e1 = new this(e1), e1.d ? e1.d[0] ? e1.s : 0 * e1.s : e1.s || NaN;\n}\nfunction td(e1) {\n    return new this(e1).sin();\n}\nfunction nd(e1) {\n    return new this(e1).sinh();\n}\nfunction id(e1) {\n    return new this(e1).sqrt();\n}\nfunction od(e1, r1) {\n    return new this(e1).sub(r1);\n}\nfunction sd() {\n    var e1 = 0, r1 = arguments, t1 = new this(r1[e1]);\n    for(w = !1; t1.s && ++e1 < r1.length;)t1 = t1.plus(r1[e1]);\n    return w = !0, y(t1, this.precision, this.rounding);\n}\nfunction ad(e1) {\n    return new this(e1).tan();\n}\nfunction ld(e1) {\n    return new this(e1).tanh();\n}\nfunction ud(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar sr = m.constructor = Ys(ji);\nun = new sr(un);\ncn = new sr(cn);\nvar ve = sr;\nfunction Tr(e1) {\n    return e1 === null ? e1 : Array.isArray(e1) ? e1.map(Tr) : typeof e1 == \"object\" ? cd(e1) ? pd(e1) : xr(e1, Tr) : e1;\n}\nfunction cd(e1) {\n    return e1 !== null && typeof e1 == \"object\" && typeof e1.$type == \"string\";\n}\nfunction pd({ $type: e1, value: r1 }) {\n    switch(e1){\n        case \"BigInt\":\n            return BigInt(r1);\n        case \"Bytes\":\n            {\n                let { buffer: t1, byteOffset: n1, byteLength: i1 } = Buffer.from(r1, \"base64\");\n                return new Uint8Array(t1, n1, i1);\n            }\n        case \"DateTime\":\n            return new Date(r1);\n        case \"Decimal\":\n            return new ve(r1);\n        case \"Json\":\n            return JSON.parse(r1);\n        default:\n            _e(r1, \"Unknown tagged value\");\n    }\n}\nvar Pe = class {\n    get(r1) {\n        return this._map.get(r1)?.value;\n    }\n    set(r1, t1) {\n        this._map.set(r1, {\n            value: t1\n        });\n    }\n    getOrCreate(r1, t1) {\n        let n1 = this._map.get(r1);\n        if (n1) return n1.value;\n        let i1 = t1();\n        return this.set(r1, i1), i1;\n    }\n    constructor(){\n        this._map = new Map;\n    }\n};\nfunction Ye(e1) {\n    return e1.substring(0, 1).toLowerCase() + e1.substring(1);\n}\nfunction zs(e1, r1) {\n    let t1 = {};\n    for (let n1 of e1){\n        let i1 = n1[r1];\n        t1[i1] = n1;\n    }\n    return t1;\n}\nfunction at(e1) {\n    let r1;\n    return {\n        get () {\n            return r1 || (r1 = {\n                value: e1()\n            }), r1.value;\n        }\n    };\n}\nfunction Zs(e1) {\n    return {\n        models: Gi(e1.models),\n        enums: Gi(e1.enums),\n        types: Gi(e1.types)\n    };\n}\nfunction Gi(e1) {\n    let r1 = {};\n    for (let { name: t1, ...n1 } of e1)r1[t1] = n1;\n    return r1;\n}\nfunction Sr(e1) {\n    return e1 instanceof Date || Object.prototype.toString.call(e1) === \"[object Date]\";\n}\nfunction gn(e1) {\n    return e1.toString() !== \"Invalid Date\";\n}\nfunction Rr(e1) {\n    return sr.isDecimal(e1) ? !0 : e1 !== null && typeof e1 == \"object\" && typeof e1.s == \"number\" && typeof e1.e == \"number\" && typeof e1.toFixed == \"function\" && Array.isArray(e1.d);\n}\nvar lt = {};\ntr(lt, {\n    ModelAction: ()=>Cr,\n    datamodelEnumToSchemaEnum: ()=>dd\n});\nfunction dd(e1) {\n    return {\n        name: e1.name,\n        values: e1.values.map((r1)=>r1.name)\n    };\n}\nvar Cr = ((b1)=>(b1.findUnique = \"findUnique\", b1.findUniqueOrThrow = \"findUniqueOrThrow\", b1.findFirst = \"findFirst\", b1.findFirstOrThrow = \"findFirstOrThrow\", b1.findMany = \"findMany\", b1.create = \"create\", b1.createMany = \"createMany\", b1.createManyAndReturn = \"createManyAndReturn\", b1.update = \"update\", b1.updateMany = \"updateMany\", b1.updateManyAndReturn = \"updateManyAndReturn\", b1.upsert = \"upsert\", b1.delete = \"delete\", b1.deleteMany = \"deleteMany\", b1.groupBy = \"groupBy\", b1.count = \"count\", b1.aggregate = \"aggregate\", b1.findRaw = \"findRaw\", b1.aggregateRaw = \"aggregateRaw\", b1))(Cr || {});\nvar na = k(Ri());\nvar ta = k(__webpack_require__(/*! node:fs */ \"node:fs\"));\nvar Xs = {\n    keyword: Oe,\n    entity: Oe,\n    value: (e1)=>W(nr(e1)),\n    punctuation: nr,\n    directive: Oe,\n    function: Oe,\n    variable: (e1)=>W(nr(e1)),\n    string: (e1)=>W(qe(e1)),\n    boolean: ke,\n    number: Oe,\n    comment: Hr\n};\nvar md = (e1)=>e1, hn = {}, fd = 0, v = {\n    manual: hn.Prism && hn.Prism.manual,\n    disableWorkerMessageHandler: hn.Prism && hn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e1) {\n            if (e1 instanceof ge) {\n                let r1 = e1;\n                return new ge(r1.type, v.util.encode(r1.content), r1.alias);\n            } else return Array.isArray(e1) ? e1.map(v.util.encode) : e1.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e1) {\n            return Object.prototype.toString.call(e1).slice(8, -1);\n        },\n        objId: function(e1) {\n            return e1.__id || Object.defineProperty(e1, \"__id\", {\n                value: ++fd\n            }), e1.__id;\n        },\n        clone: function e1(r1, t1) {\n            let n1, i1, o1 = v.util.type(r1);\n            switch(t1 = t1 || {}, o1){\n                case \"Object\":\n                    if (i1 = v.util.objId(r1), t1[i1]) return t1[i1];\n                    n1 = {}, t1[i1] = n1;\n                    for(let s1 in r1)r1.hasOwnProperty(s1) && (n1[s1] = e1(r1[s1], t1));\n                    return n1;\n                case \"Array\":\n                    return i1 = v.util.objId(r1), t1[i1] ? t1[i1] : (n1 = [], t1[i1] = n1, r1.forEach(function(s1, a1) {\n                        n1[a1] = e1(s1, t1);\n                    }), n1);\n                default:\n                    return r1;\n            }\n        }\n    },\n    languages: {\n        extend: function(e1, r1) {\n            let t1 = v.util.clone(v.languages[e1]);\n            for(let n1 in r1)t1[n1] = r1[n1];\n            return t1;\n        },\n        insertBefore: function(e1, r1, t1, n1) {\n            n1 = n1 || v.languages;\n            let i1 = n1[e1], o1 = {};\n            for(let a1 in i1)if (i1.hasOwnProperty(a1)) {\n                if (a1 == r1) for(let l1 in t1)t1.hasOwnProperty(l1) && (o1[l1] = t1[l1]);\n                t1.hasOwnProperty(a1) || (o1[a1] = i1[a1]);\n            }\n            let s1 = n1[e1];\n            return n1[e1] = o1, v.languages.DFS(v.languages, function(a1, l1) {\n                l1 === s1 && a1 != e1 && (this[a1] = o1);\n            }), o1;\n        },\n        DFS: function e1(r1, t1, n1, i1) {\n            i1 = i1 || {};\n            let o1 = v.util.objId;\n            for(let s1 in r1)if (r1.hasOwnProperty(s1)) {\n                t1.call(r1, s1, r1[s1], n1 || s1);\n                let a1 = r1[s1], l1 = v.util.type(a1);\n                l1 === \"Object\" && !i1[o1(a1)] ? (i1[o1(a1)] = !0, e1(a1, t1, null, i1)) : l1 === \"Array\" && !i1[o1(a1)] && (i1[o1(a1)] = !0, e1(a1, t1, s1, i1));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e1, r1, t1) {\n        let n1 = {\n            code: e1,\n            grammar: r1,\n            language: t1\n        };\n        return v.hooks.run(\"before-tokenize\", n1), n1.tokens = v.tokenize(n1.code, n1.grammar), v.hooks.run(\"after-tokenize\", n1), ge.stringify(v.util.encode(n1.tokens), n1.language);\n    },\n    matchGrammar: function(e1, r1, t1, n1, i1, o1, s1) {\n        for(let h1 in t1){\n            if (!t1.hasOwnProperty(h1) || !t1[h1]) continue;\n            if (h1 == s1) return;\n            let I1 = t1[h1];\n            I1 = v.util.type(I1) === \"Array\" ? I1 : [\n                I1\n            ];\n            for(let P1 = 0; P1 < I1.length; ++P1){\n                let S1 = I1[P1], b1 = S1.inside, O1 = !!S1.lookbehind, me1 = !!S1.greedy, ae1 = 0, Jr1 = S1.alias;\n                if (me1 && !S1.pattern.global) {\n                    let V1 = S1.pattern.toString().match(/[imuy]*$/)[0];\n                    S1.pattern = RegExp(S1.pattern.source, V1 + \"g\");\n                }\n                S1 = S1.pattern || S1;\n                for(let V1 = n1, te1 = i1; V1 < r1.length; te1 += r1[V1].length, ++V1){\n                    let Ae1 = r1[V1];\n                    if (r1.length > e1.length) return;\n                    if (Ae1 instanceof ge) continue;\n                    if (me1 && V1 != r1.length - 1) {\n                        S1.lastIndex = te1;\n                        var p1 = S1.exec(e1);\n                        if (!p1) break;\n                        var c1 = p1.index + (O1 ? p1[1].length : 0), d1 = p1.index + p1[0].length, a1 = V1, l1 = te1;\n                        for(let _1 = r1.length; a1 < _1 && (l1 < d1 || !r1[a1].type && !r1[a1 - 1].greedy); ++a1)l1 += r1[a1].length, c1 >= l1 && (++V1, te1 = l1);\n                        if (r1[V1] instanceof ge) continue;\n                        u1 = a1 - V1, Ae1 = e1.slice(te1, l1), p1.index -= te1;\n                    } else {\n                        S1.lastIndex = 0;\n                        var p1 = S1.exec(Ae1), u1 = 1;\n                    }\n                    if (!p1) {\n                        if (o1) break;\n                        continue;\n                    }\n                    O1 && (ae1 = p1[1] ? p1[1].length : 0);\n                    var c1 = p1.index + ae1, p1 = p1[0].slice(ae1), d1 = c1 + p1.length, f1 = Ae1.slice(0, c1), g1 = Ae1.slice(d1);\n                    let H1 = [\n                        V1,\n                        u1\n                    ];\n                    f1 && (++V1, te1 += f1.length, H1.push(f1));\n                    let fr1 = new ge(h1, b1 ? v.tokenize(p1, b1) : p1, Jr1, p1, me1);\n                    if (H1.push(fr1), g1 && H1.push(g1), Array.prototype.splice.apply(r1, H1), u1 != 1 && v.matchGrammar(e1, r1, t1, V1, te1, !0, h1), o1) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e1, r1) {\n        let t1 = [\n            e1\n        ], n1 = r1.rest;\n        if (n1) {\n            for(let i1 in n1)r1[i1] = n1[i1];\n            delete r1.rest;\n        }\n        return v.matchGrammar(e1, t1, r1, 0, 0, !1), t1;\n    },\n    hooks: {\n        all: {},\n        add: function(e1, r1) {\n            let t1 = v.hooks.all;\n            t1[e1] = t1[e1] || [], t1[e1].push(r1);\n        },\n        run: function(e1, r1) {\n            let t1 = v.hooks.all[e1];\n            if (!(!t1 || !t1.length)) for(var n1 = 0, i1; i1 = t1[n1++];)i1(r1);\n        }\n    },\n    Token: ge\n};\nv.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nv.languages.javascript = v.languages.extend(\"clike\", {\n    \"class-name\": [\n        v.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nv.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nv.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: v.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nv.languages.markup && v.languages.markup.tag.addInlined(\"script\", \"javascript\");\nv.languages.js = v.languages.javascript;\nv.languages.typescript = v.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nv.languages.ts = v.languages.typescript;\nfunction ge(e1, r1, t1, n1, i1) {\n    this.type = e1, this.content = r1, this.alias = t1, this.length = (n1 || \"\").length | 0, this.greedy = !!i1;\n}\nge.stringify = function(e1, r1) {\n    return typeof e1 == \"string\" ? e1 : Array.isArray(e1) ? e1.map(function(t1) {\n        return ge.stringify(t1, r1);\n    }).join(\"\") : gd(e1.type)(e1.content);\n};\nfunction gd(e1) {\n    return Xs[e1] || md;\n}\nfunction ea(e1) {\n    return hd(e1, v.languages.javascript);\n}\nfunction hd(e1, r1) {\n    return v.tokenize(e1, r1).map((n1)=>ge.stringify(n1)).join(\"\");\n}\nfunction ra(e1) {\n    return Ti(e1);\n}\nvar yn = class e {\n    static read(r1) {\n        let t1;\n        try {\n            t1 = ta.default.readFileSync(r1, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(t1);\n    }\n    static fromContent(r1) {\n        let t1 = r1.split(/\\r?\\n/);\n        return new e(1, t1);\n    }\n    constructor(r1, t1){\n        this.firstLineNumber = r1, this.lines = t1;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(r1, t1) {\n        if (r1 < this.firstLineNumber || r1 > this.lines.length + this.firstLineNumber) return this;\n        let n1 = r1 - this.firstLineNumber, i1 = [\n            ...this.lines\n        ];\n        return i1[n1] = t1(i1[n1]), new e(this.firstLineNumber, i1);\n    }\n    mapLines(r1) {\n        return new e(this.firstLineNumber, this.lines.map((t1, n1)=>r1(t1, this.firstLineNumber + n1)));\n    }\n    lineAt(r1) {\n        return this.lines[r1 - this.firstLineNumber];\n    }\n    prependSymbolAt(r1, t1) {\n        return this.mapLines((n1, i1)=>i1 === r1 ? `${t1} ${n1}` : `  ${n1}`);\n    }\n    slice(r1, t1) {\n        let n1 = this.lines.slice(r1 - 1, t1).join(`\n`);\n        return new e(r1, ra(n1).split(`\n`));\n    }\n    highlight() {\n        let r1 = ea(this.toString());\n        return new e(this.firstLineNumber, r1.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yd = {\n    red: ce,\n    gray: Hr,\n    dim: Ie,\n    bold: W,\n    underline: Y,\n    highlightSource: (e1)=>e1.highlight()\n}, bd = {\n    red: (e1)=>e1,\n    gray: (e1)=>e1,\n    dim: (e1)=>e1,\n    bold: (e1)=>e1,\n    underline: (e1)=>e1,\n    highlightSource: (e1)=>e1\n};\nfunction Ed({ message: e1, originalMethod: r1, isPanic: t1, callArguments: n1 }) {\n    return {\n        functionName: `prisma.${r1}()`,\n        message: e1,\n        isPanic: t1 ?? !1,\n        callArguments: n1\n    };\n}\nfunction wd({ callsite: e1, message: r1, originalMethod: t1, isPanic: n1, callArguments: i1 }, o1) {\n    let s1 = Ed({\n        message: r1,\n        originalMethod: t1,\n        isPanic: n1,\n        callArguments: i1\n    });\n    if (!e1 || \"undefined\" < \"u\" || \"development\" === \"production\") return s1;\n    let a1 = e1.getLocation();\n    if (!a1 || !a1.lineNumber || !a1.columnNumber) return s1;\n    let l1 = Math.max(1, a1.lineNumber - 3), u1 = yn.read(a1.fileName)?.slice(l1, a1.lineNumber), c1 = u1?.lineAt(a1.lineNumber);\n    if (u1 && c1) {\n        let p1 = vd(c1), d1 = xd(c1);\n        if (!d1) return s1;\n        s1.functionName = `${d1.code})`, s1.location = a1, n1 || (u1 = u1.mapLineAt(a1.lineNumber, (g1)=>g1.slice(0, d1.openingBraceIndex))), u1 = o1.highlightSource(u1);\n        let f1 = String(u1.lastLineNumber).length;\n        if (s1.contextLines = u1.mapLines((g1, h1)=>o1.gray(String(h1).padStart(f1)) + \" \" + g1).mapLines((g1)=>o1.dim(g1)).prependSymbolAt(a1.lineNumber, o1.bold(o1.red(\"→\"))), i1) {\n            let g1 = p1 + f1 + 1;\n            g1 += 2, s1.callArguments = (0, na.default)(i1, g1).slice(g1);\n        }\n    }\n    return s1;\n}\nfunction xd(e1) {\n    let r1 = Object.keys(Cr).join(\"|\"), n1 = new RegExp(String.raw`\\.(${r1})\\(`).exec(e1);\n    if (n1) {\n        let i1 = n1.index + n1[0].length, o1 = e1.lastIndexOf(\" \", n1.index) + 1;\n        return {\n            code: e1.slice(o1, i1),\n            openingBraceIndex: i1\n        };\n    }\n    return null;\n}\nfunction vd(e1) {\n    let r1 = 0;\n    for(let t1 = 0; t1 < e1.length; t1++){\n        if (e1.charAt(t1) !== \" \") return r1;\n        r1++;\n    }\n    return r1;\n}\nfunction Pd({ functionName: e1, location: r1, message: t1, isPanic: n1, contextLines: i1, callArguments: o1 }, s1) {\n    let a1 = [\n        \"\"\n    ], l1 = r1 ? \" in\" : \":\";\n    if (n1 ? (a1.push(s1.red(`Oops, an unknown error occurred! This is ${s1.bold(\"on us\")}, you did nothing wrong.`)), a1.push(s1.red(`It occurred in the ${s1.bold(`\\`${e1}\\``)} invocation${l1}`))) : a1.push(s1.red(`Invalid ${s1.bold(`\\`${e1}\\``)} invocation${l1}`)), r1 && a1.push(s1.underline(Td(r1))), i1) {\n        a1.push(\"\");\n        let u1 = [\n            i1.toString()\n        ];\n        o1 && (u1.push(o1), u1.push(s1.dim(\")\"))), a1.push(u1.join(\"\")), o1 && a1.push(\"\");\n    } else a1.push(\"\"), o1 && a1.push(o1), a1.push(\"\");\n    return a1.push(t1), a1.join(`\n`);\n}\nfunction Td(e1) {\n    let r1 = [\n        e1.fileName\n    ];\n    return e1.lineNumber && r1.push(String(e1.lineNumber)), e1.columnNumber && r1.push(String(e1.columnNumber)), r1.join(\":\");\n}\nfunction bn(e1) {\n    let r1 = e1.showColors ? yd : bd, t1;\n    return t1 = wd(e1, r1), Pd(t1, r1);\n}\nvar da = k(Qi());\nfunction aa(e1, r1, t1) {\n    let n1 = la(e1), i1 = Sd(n1), o1 = Cd(i1);\n    o1 ? En(o1, r1, t1) : r1.addErrorMessage(()=>\"Unknown error\");\n}\nfunction la(e1) {\n    return e1.errors.flatMap((r1)=>r1.kind === \"Union\" ? la(r1) : [\n            r1\n        ]);\n}\nfunction Sd(e1) {\n    let r1 = new Map, t1 = [];\n    for (let n1 of e1){\n        if (n1.kind !== \"InvalidArgumentType\") {\n            t1.push(n1);\n            continue;\n        }\n        let i1 = `${n1.selectionPath.join(\".\")}:${n1.argumentPath.join(\".\")}`, o1 = r1.get(i1);\n        o1 ? r1.set(i1, {\n            ...n1,\n            argument: {\n                ...n1.argument,\n                typeNames: Rd(o1.argument.typeNames, n1.argument.typeNames)\n            }\n        }) : r1.set(i1, n1);\n    }\n    return t1.push(...r1.values()), t1;\n}\nfunction Rd(e1, r1) {\n    return [\n        ...new Set(e1.concat(r1))\n    ];\n}\nfunction Cd(e1) {\n    return $i(e1, (r1, t1)=>{\n        let n1 = oa(r1), i1 = oa(t1);\n        return n1 !== i1 ? n1 - i1 : sa(r1) - sa(t1);\n    });\n}\nfunction oa(e1) {\n    let r1 = 0;\n    return Array.isArray(e1.selectionPath) && (r1 += e1.selectionPath.length), Array.isArray(e1.argumentPath) && (r1 += e1.argumentPath.length), r1;\n}\nfunction sa(e1) {\n    switch(e1.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(r1, t1){\n        this.isRequired = !1;\n        this.name = r1;\n        this.value = t1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(r1) {\n        let { colors: { green: t1 } } = r1.context;\n        r1.addMarginSymbol(t1(this.isRequired ? \"+\" : \"?\")), r1.write(t1(this.name)), this.isRequired || r1.write(t1(\"?\")), r1.write(t1(\": \")), typeof this.value == \"string\" ? r1.write(t1(this.value)) : r1.write(this.value);\n    }\n};\nca();\nvar Ar = class {\n    constructor(r1 = 0, t1){\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.context = t1;\n        this.currentIndent = r1;\n    }\n    write(r1) {\n        return typeof r1 == \"string\" ? this.currentLine += r1 : r1.write(this), this;\n    }\n    writeJoined(r1, t1, n1 = (i1, o1)=>o1.write(i1)) {\n        let i1 = t1.length - 1;\n        for(let o1 = 0; o1 < t1.length; o1++)n1(t1[o1], this), o1 !== i1 && this.write(r1);\n        return this;\n    }\n    writeLine(r1) {\n        return this.write(r1).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let r1 = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, r1?.(), this;\n    }\n    withIndent(r1) {\n        return this.indent(), r1(this), this.unindent(), this;\n    }\n    afterNextNewline(r1) {\n        return this.afterNextNewLineCallback = r1, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(r1) {\n        return this.marginSymbol = r1, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let r1 = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + r1.slice(1) : r1;\n    }\n};\nua();\nvar wn = class {\n    constructor(r1){\n        this.value = r1;\n    }\n    write(r1) {\n        r1.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar xn = (e1)=>e1, vn = {\n    bold: xn,\n    red: xn,\n    green: xn,\n    dim: xn,\n    enabled: !1\n}, pa = {\n    bold: W,\n    red: ce,\n    green: qe,\n    dim: Ie,\n    enabled: !0\n}, Ir = {\n    write (e1) {\n        e1.writeLine(\",\");\n    }\n};\nvar Te = class {\n    constructor(r1){\n        this.isUnderlined = !1;\n        this.color = (r1)=>r1;\n        this.contents = r1;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(r1) {\n        return this.color = r1, this;\n    }\n    write(r1) {\n        let t1 = r1.getCurrentLineLength();\n        r1.write(this.color(this.contents)), this.isUnderlined && r1.afterNextNewline(()=>{\n            r1.write(\" \".repeat(t1)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar ze = class {\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n    constructor(){\n        this.hasError = !1;\n    }\n};\nvar kr = class extends ze {\n    addItem(r1) {\n        return this.items.push(new wn(r1)), this;\n    }\n    getField(r1) {\n        return this.items[r1];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((t1)=>t1.value.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithItems(r1);\n    }\n    writeEmpty(r1) {\n        let t1 = new Te(\"[]\");\n        this.hasError && t1.setColor(r1.context.colors.red).underline(), r1.write(t1);\n    }\n    writeWithItems(r1) {\n        let { colors: t1 } = r1.context;\n        r1.writeLine(\"[\").withIndent(()=>r1.writeJoined(Ir, this.items).newLine()).write(\"]\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(t1.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n    constructor(...args){\n        super(...args);\n        this.items = [];\n    }\n};\nvar Or = class e extends ze {\n    addField(r1) {\n        this.fields[r1.name] = r1;\n    }\n    addSuggestion(r1) {\n        this.suggestions.push(r1);\n    }\n    getField(r1) {\n        return this.fields[r1];\n    }\n    getDeepField(r1) {\n        let [t1, ...n1] = r1, i1 = this.getField(t1);\n        if (!i1) return;\n        let o1 = i1;\n        for (let s1 of n1){\n            let a1;\n            if (o1.value instanceof e ? a1 = o1.value.getField(s1) : o1.value instanceof kr && (a1 = o1.value.getField(Number(s1))), !a1) return;\n            o1 = a1;\n        }\n        return o1;\n    }\n    getDeepFieldValue(r1) {\n        return r1.length === 0 ? this : this.getDeepField(r1)?.value;\n    }\n    hasField(r1) {\n        return !!this.getField(r1);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r1) {\n        delete this.fields[r1];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r1) {\n        return this.getField(r1)?.value;\n    }\n    getDeepSubSelectionValue(r1) {\n        let t1 = this;\n        for (let n1 of r1){\n            if (!(t1 instanceof e)) return;\n            let i1 = t1.getSubSelectionValue(n1);\n            if (!i1) return;\n            t1 = i1;\n        }\n        return t1;\n    }\n    getDeepSelectionParent(r1) {\n        let t1 = this.getSelectionParent();\n        if (!t1) return;\n        let n1 = t1;\n        for (let i1 of r1){\n            let o1 = n1.value.getFieldValue(i1);\n            if (!o1 || !(o1 instanceof e)) return;\n            let s1 = o1.getSelectionParent();\n            if (!s1) return;\n            n1 = s1;\n        }\n        return n1;\n    }\n    getSelectionParent() {\n        let r1 = this.getField(\"select\")?.value.asObject();\n        if (r1) return {\n            kind: \"select\",\n            value: r1\n        };\n        let t1 = this.getField(\"include\")?.value.asObject();\n        if (t1) return {\n            kind: \"include\",\n            value: t1\n        };\n    }\n    getSubSelectionValue(r1) {\n        return this.getSelectionParent()?.value.fields[r1].value;\n    }\n    getPrintWidth() {\n        let r1 = Object.values(this.fields);\n        return r1.length == 0 ? 2 : Math.max(...r1.map((n1)=>n1.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        let t1 = Object.values(this.fields);\n        if (t1.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithContents(r1, t1);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r1) {\n        let t1 = new Te(\"{}\");\n        this.hasError && t1.setColor(r1.context.colors.red).underline(), r1.write(t1);\n    }\n    writeWithContents(r1, t1) {\n        r1.writeLine(\"{\").withIndent(()=>{\n            r1.writeJoined(Ir, [\n                ...t1,\n                ...this.suggestions\n            ]).newLine();\n        }), r1.write(\"}\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(r1.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.fields = {};\n        this.suggestions = [];\n    }\n};\nvar Q = class extends ze {\n    constructor(t1){\n        super();\n        this.text = t1;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(t1) {\n        let n1 = new Te(this.text);\n        this.hasError && n1.underline().setColor(t1.context.colors.red), t1.write(n1);\n    }\n    asObject() {}\n};\nvar ut = class {\n    addField(r1, t1) {\n        return this.fields.push({\n            write (n1) {\n                let { green: i1, dim: o1 } = n1.context.colors;\n                n1.write(i1(o1(`${r1}: ${t1}`))).addMarginSymbol(i1(o1(\"+\")));\n            }\n        }), this;\n    }\n    write(r1) {\n        let { colors: { green: t1 } } = r1.context;\n        r1.writeLine(t1(\"{\")).withIndent(()=>{\n            r1.writeJoined(Ir, this.fields).newLine();\n        }).write(t1(\"}\")).addMarginSymbol(t1(\"+\"));\n    }\n    constructor(){\n        this.fields = [];\n    }\n};\nfunction En(e1, r1, t1) {\n    switch(e1.kind){\n        case \"MutuallyExclusiveFields\":\n            Ad(e1, r1);\n            break;\n        case \"IncludeOnScalar\":\n            Id(e1, r1);\n            break;\n        case \"EmptySelection\":\n            kd(e1, r1, t1);\n            break;\n        case \"UnknownSelectionField\":\n            Nd(e1, r1);\n            break;\n        case \"InvalidSelectionValue\":\n            Ld(e1, r1);\n            break;\n        case \"UnknownArgument\":\n            Fd(e1, r1);\n            break;\n        case \"UnknownInputField\":\n            Md(e1, r1);\n            break;\n        case \"RequiredArgumentMissing\":\n            $d(e1, r1);\n            break;\n        case \"InvalidArgumentType\":\n            qd(e1, r1);\n            break;\n        case \"InvalidArgumentValue\":\n            jd(e1, r1);\n            break;\n        case \"ValueTooLarge\":\n            Vd(e1, r1);\n            break;\n        case \"SomeFieldsMissing\":\n            Bd(e1, r1);\n            break;\n        case \"TooManyFieldsGiven\":\n            Ud(e1, r1);\n            break;\n        case \"Union\":\n            aa(e1, r1, t1);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e1.kind);\n    }\n}\nfunction Ad(e1, r1) {\n    let t1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    t1 && (t1.getField(e1.firstField)?.markAsError(), t1.getField(e1.secondField)?.markAsError()), r1.addErrorMessage((n1)=>`Please ${n1.bold(\"either\")} use ${n1.green(`\\`${e1.firstField}\\``)} or ${n1.green(`\\`${e1.secondField}\\``)}, but ${n1.red(\"not both\")} at the same time.`);\n}\nfunction Id(e1, r1) {\n    let [t1, n1] = ct(e1.selectionPath), i1 = e1.outputType, o1 = r1.arguments.getDeepSelectionParent(t1)?.value;\n    if (o1 && (o1.getField(n1)?.markAsError(), i1)) for (let s1 of i1.fields)s1.isRelation && o1.addSuggestion(new ue(s1.name, \"true\"));\n    r1.addErrorMessage((s1)=>{\n        let a1 = `Invalid scalar field ${s1.red(`\\`${n1}\\``)} for ${s1.bold(\"include\")} statement`;\n        return i1 ? a1 += ` on model ${s1.bold(i1.name)}. ${pt(s1)}` : a1 += \".\", a1 += `\nNote that ${s1.bold(\"include\")} statements only accept relation fields.`, a1;\n    });\n}\nfunction kd(e1, r1, t1) {\n    let n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (n1) {\n        let i1 = n1.getField(\"omit\")?.value.asObject();\n        if (i1) {\n            Od(e1, r1, i1);\n            return;\n        }\n        if (n1.hasField(\"select\")) {\n            Dd(e1, r1);\n            return;\n        }\n    }\n    if (t1?.[Ye(e1.outputType.name)]) {\n        _d(e1, r1);\n        return;\n    }\n    r1.addErrorMessage(()=>`Unknown field at \"${e1.selectionPath.join(\".\")} selection\"`);\n}\nfunction Od(e1, r1, t1) {\n    t1.removeAllFields();\n    for (let n1 of e1.outputType.fields)t1.addSuggestion(new ue(n1.name, \"false\"));\n    r1.addErrorMessage((n1)=>`The ${n1.red(\"omit\")} statement includes every field of the model ${n1.bold(e1.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Dd(e1, r1) {\n    let t1 = e1.outputType, n1 = r1.arguments.getDeepSelectionParent(e1.selectionPath)?.value, i1 = n1?.isEmpty() ?? !1;\n    n1 && (n1.removeAllFields(), ga(n1, t1)), r1.addErrorMessage((o1)=>i1 ? `The ${o1.red(\"`select`\")} statement for type ${o1.bold(t1.name)} must not be empty. ${pt(o1)}` : `The ${o1.red(\"`select`\")} statement for type ${o1.bold(t1.name)} needs ${o1.bold(\"at least one truthy value\")}.`);\n}\nfunction _d(e1, r1) {\n    let t1 = new ut;\n    for (let i1 of e1.outputType.fields)i1.isRelation || t1.addField(i1.name, \"false\");\n    let n1 = new ue(\"omit\", t1).makeRequired();\n    if (e1.selectionPath.length === 0) r1.arguments.addSuggestion(n1);\n    else {\n        let [i1, o1] = ct(e1.selectionPath), a1 = r1.arguments.getDeepSelectionParent(i1)?.value.asObject()?.getField(o1);\n        if (a1) {\n            let l1 = a1?.value.asObject() ?? new Or;\n            l1.addSuggestion(n1), a1.value = l1;\n        }\n    }\n    r1.addErrorMessage((i1)=>`The global ${i1.red(\"omit\")} configuration excludes every field of the model ${i1.bold(e1.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Nd(e1, r1) {\n    let t1 = ha(e1.selectionPath, r1);\n    if (t1.parentKind !== \"unknown\") {\n        t1.field.markAsError();\n        let n1 = t1.parent;\n        switch(t1.parentKind){\n            case \"select\":\n                ga(n1, e1.outputType);\n                break;\n            case \"include\":\n                Gd(n1, e1.outputType);\n                break;\n            case \"omit\":\n                Qd(n1, e1.outputType);\n                break;\n        }\n    }\n    r1.addErrorMessage((n1)=>{\n        let i1 = [\n            `Unknown field ${n1.red(`\\`${t1.fieldName}\\``)}`\n        ];\n        return t1.parentKind !== \"unknown\" && i1.push(`for ${n1.bold(t1.parentKind)} statement`), i1.push(`on model ${n1.bold(`\\`${e1.outputType.name}\\``)}.`), i1.push(pt(n1)), i1.join(\" \");\n    });\n}\nfunction Ld(e1, r1) {\n    let t1 = ha(e1.selectionPath, r1);\n    t1.parentKind !== \"unknown\" && t1.field.value.markAsError(), r1.addErrorMessage((n1)=>`Invalid value for selection field \\`${n1.red(t1.fieldName)}\\`: ${e1.underlyingError}`);\n}\nfunction Fd(e1, r1) {\n    let t1 = e1.argumentPath[0], n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && (n1.getField(t1)?.markAsError(), Wd(n1, e1.arguments)), r1.addErrorMessage((i1)=>ma(i1, t1, e1.arguments.map((o1)=>o1.name)));\n}\nfunction Md(e1, r1) {\n    let [t1, n1] = ct(e1.argumentPath), i1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (i1) {\n        i1.getDeepField(e1.argumentPath)?.markAsError();\n        let o1 = i1.getDeepFieldValue(t1)?.asObject();\n        o1 && ya(o1, e1.inputType);\n    }\n    r1.addErrorMessage((o1)=>ma(o1, n1, e1.inputType.fields.map((s1)=>s1.name)));\n}\nfunction ma(e1, r1, t1) {\n    let n1 = [\n        `Unknown argument \\`${e1.red(r1)}\\`.`\n    ], i1 = Hd(r1, t1);\n    return i1 && n1.push(`Did you mean \\`${e1.green(i1)}\\`?`), t1.length > 0 && n1.push(pt(e1)), n1.join(\" \");\n}\nfunction $d(e1, r1) {\n    let t1;\n    r1.addErrorMessage((l1)=>t1?.value instanceof Q && t1.value.text === \"null\" ? `Argument \\`${l1.green(o1)}\\` must not be ${l1.red(\"null\")}.` : `Argument \\`${l1.green(o1)}\\` is missing.`);\n    let n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (!n1) return;\n    let [i1, o1] = ct(e1.argumentPath), s1 = new ut, a1 = n1.getDeepFieldValue(i1)?.asObject();\n    if (a1) if (t1 = a1.getField(o1), t1 && a1.removeField(o1), e1.inputTypes.length === 1 && e1.inputTypes[0].kind === \"object\") {\n        for (let l1 of e1.inputTypes[0].fields)s1.addField(l1.name, l1.typeNames.join(\" | \"));\n        a1.addSuggestion(new ue(o1, s1).makeRequired());\n    } else {\n        let l1 = e1.inputTypes.map(fa).join(\" | \");\n        a1.addSuggestion(new ue(o1, l1).makeRequired());\n    }\n}\nfunction fa(e1) {\n    return e1.kind === \"list\" ? `${fa(e1.elementType)}[]` : e1.name;\n}\nfunction qd(e1, r1) {\n    let t1 = e1.argument.name, n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), r1.addErrorMessage((i1)=>{\n        let o1 = Pn(\"or\", e1.argument.typeNames.map((s1)=>i1.green(s1)));\n        return `Argument \\`${i1.bold(t1)}\\`: Invalid value provided. Expected ${o1}, provided ${i1.red(e1.inferredType)}.`;\n    });\n}\nfunction jd(e1, r1) {\n    let t1 = e1.argument.name, n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), r1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Invalid value for argument \\`${i1.bold(t1)}\\``\n        ];\n        if (e1.underlyingError && o1.push(`: ${e1.underlyingError}`), o1.push(\".\"), e1.argument.typeNames.length > 0) {\n            let s1 = Pn(\"or\", e1.argument.typeNames.map((a1)=>i1.green(a1)));\n            o1.push(` Expected ${s1}.`);\n        }\n        return o1.join(\"\");\n    });\n}\nfunction Vd(e1, r1) {\n    let t1 = e1.argument.name, n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject(), i1;\n    if (n1) {\n        let s1 = n1.getDeepField(e1.argumentPath)?.value;\n        s1?.markAsError(), s1 instanceof Q && (i1 = s1.text);\n    }\n    r1.addErrorMessage((o1)=>{\n        let s1 = [\n            \"Unable to fit value\"\n        ];\n        return i1 && s1.push(o1.red(i1)), s1.push(`into a 64-bit signed integer for field \\`${o1.bold(t1)}\\``), s1.join(\" \");\n    });\n}\nfunction Bd(e1, r1) {\n    let t1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (n1) {\n        let i1 = n1.getDeepFieldValue(e1.argumentPath)?.asObject();\n        i1 && ya(i1, e1.inputType);\n    }\n    r1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Argument \\`${i1.bold(t1)}\\` of type ${i1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 ? e1.constraints.requiredFields ? o1.push(`${i1.green(\"at least one of\")} ${Pn(\"or\", e1.constraints.requiredFields.map((s1)=>`\\`${i1.bold(s1)}\\``))} arguments.`) : o1.push(`${i1.green(\"at least one\")} argument.`) : o1.push(`${i1.green(`at least ${e1.constraints.minFieldCount}`)} arguments.`), o1.push(pt(i1)), o1.join(\" \");\n    });\n}\nfunction Ud(e1, r1) {\n    let t1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = r1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject(), i1 = [];\n    if (n1) {\n        let o1 = n1.getDeepFieldValue(e1.argumentPath)?.asObject();\n        o1 && (o1.markAsError(), i1 = Object.keys(o1.getFields()));\n    }\n    r1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Argument \\`${o1.bold(t1)}\\` of type ${o1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 && e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"exactly one\")} argument,`) : e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"at most one\")} argument,`) : s1.push(`${o1.green(`at most ${e1.constraints.maxFieldCount}`)} arguments,`), s1.push(`but you provided ${Pn(\"and\", i1.map((a1)=>o1.red(a1)))}. Please choose`), e1.constraints.maxFieldCount === 1 ? s1.push(\"one.\") : s1.push(`${e1.constraints.maxFieldCount}.`), s1.join(\" \");\n    });\n}\nfunction ga(e1, r1) {\n    for (let t1 of r1.fields)e1.hasField(t1.name) || e1.addSuggestion(new ue(t1.name, \"true\"));\n}\nfunction Gd(e1, r1) {\n    for (let t1 of r1.fields)t1.isRelation && !e1.hasField(t1.name) && e1.addSuggestion(new ue(t1.name, \"true\"));\n}\nfunction Qd(e1, r1) {\n    for (let t1 of r1.fields)!e1.hasField(t1.name) && !t1.isRelation && e1.addSuggestion(new ue(t1.name, \"true\"));\n}\nfunction Wd(e1, r1) {\n    for (let t1 of r1)e1.hasField(t1.name) || e1.addSuggestion(new ue(t1.name, t1.typeNames.join(\" | \")));\n}\nfunction ha(e1, r1) {\n    let [t1, n1] = ct(e1), i1 = r1.arguments.getDeepSubSelectionValue(t1)?.asObject();\n    if (!i1) return {\n        parentKind: \"unknown\",\n        fieldName: n1\n    };\n    let o1 = i1.getFieldValue(\"select\")?.asObject(), s1 = i1.getFieldValue(\"include\")?.asObject(), a1 = i1.getFieldValue(\"omit\")?.asObject(), l1 = o1?.getField(n1);\n    return o1 && l1 ? {\n        parentKind: \"select\",\n        parent: o1,\n        field: l1,\n        fieldName: n1\n    } : (l1 = s1?.getField(n1), s1 && l1 ? {\n        parentKind: \"include\",\n        field: l1,\n        parent: s1,\n        fieldName: n1\n    } : (l1 = a1?.getField(n1), a1 && l1 ? {\n        parentKind: \"omit\",\n        field: l1,\n        parent: a1,\n        fieldName: n1\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n1\n    }));\n}\nfunction ya(e1, r1) {\n    if (r1.kind === \"object\") for (let t1 of r1.fields)e1.hasField(t1.name) || e1.addSuggestion(new ue(t1.name, t1.typeNames.join(\" | \")));\n}\nfunction ct(e1) {\n    let r1 = [\n        ...e1\n    ], t1 = r1.pop();\n    if (!t1) throw new Error(\"unexpected empty path\");\n    return [\n        r1,\n        t1\n    ];\n}\nfunction pt({ green: e1, enabled: r1 }) {\n    return \"Available options are \" + (r1 ? `listed in ${e1(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction Pn(e1, r1) {\n    if (r1.length === 1) return r1[0];\n    let t1 = [\n        ...r1\n    ], n1 = t1.pop();\n    return `${t1.join(\", \")} ${e1} ${n1}`;\n}\nvar Jd = 3;\nfunction Hd(e1, r1) {\n    let t1 = 1 / 0, n1;\n    for (let i1 of r1){\n        let o1 = (0, da.default)(e1, i1);\n        o1 > Jd || o1 < t1 && (t1 = o1, n1 = i1);\n    }\n    return n1;\n}\nvar dt = class {\n    constructor(r1, t1, n1, i1, o1){\n        this.modelName = r1, this.name = t1, this.typeName = n1, this.isList = i1, this.isEnum = o1;\n    }\n    _toGraphQLInputType() {\n        let r1 = this.isList ? \"List\" : \"\", t1 = this.isEnum ? \"Enum\" : \"\";\n        return `${r1}${t1}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction Dr(e1) {\n    return e1 instanceof dt;\n}\nvar Tn = Symbol(), Ji = new WeakMap, Fe = class {\n    constructor(r1){\n        r1 === Tn ? Ji.set(this, `Prisma.${this._getName()}`) : Ji.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Ji.get(this);\n    }\n}, mt = class extends Fe {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, ft = class extends mt {\n};\nHi(ft, \"DbNull\");\nvar gt = class extends mt {\n};\nHi(gt, \"JsonNull\");\nvar ht = class extends mt {\n};\nHi(ht, \"AnyNull\");\nvar Sn = {\n    classes: {\n        DbNull: ft,\n        JsonNull: gt,\n        AnyNull: ht\n    },\n    instances: {\n        DbNull: new ft(Tn),\n        JsonNull: new gt(Tn),\n        AnyNull: new ht(Tn)\n    }\n};\nfunction Hi(e1, r1) {\n    Object.defineProperty(e1, \"name\", {\n        value: r1,\n        configurable: !0\n    });\n}\nvar ba = \": \", Rn = class {\n    constructor(r1, t1){\n        this.hasError = !1;\n        this.name = r1;\n        this.value = t1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + ba.length;\n    }\n    write(r1) {\n        let t1 = new Te(this.name);\n        this.hasError && t1.underline().setColor(r1.context.colors.red), r1.write(t1).write(ba).write(this.value);\n    }\n};\nvar Ki = class {\n    constructor(r1){\n        this.errorMessages = [];\n        this.arguments = r1;\n    }\n    write(r1) {\n        r1.write(this.arguments);\n    }\n    addErrorMessage(r1) {\n        this.errorMessages.push(r1);\n    }\n    renderAllMessages(r1) {\n        return this.errorMessages.map((t1)=>t1(r1)).join(`\n`);\n    }\n};\nfunction _r(e1) {\n    return new Ki(Ea(e1));\n}\nfunction Ea(e1) {\n    let r1 = new Or;\n    for (let [t1, n1] of Object.entries(e1)){\n        let i1 = new Rn(t1, wa(n1));\n        r1.addField(i1);\n    }\n    return r1;\n}\nfunction wa(e1) {\n    if (typeof e1 == \"string\") return new Q(JSON.stringify(e1));\n    if (typeof e1 == \"number\" || typeof e1 == \"boolean\") return new Q(String(e1));\n    if (typeof e1 == \"bigint\") return new Q(`${e1}n`);\n    if (e1 === null) return new Q(\"null\");\n    if (e1 === void 0) return new Q(\"undefined\");\n    if (Rr(e1)) return new Q(`new Prisma.Decimal(\"${e1.toFixed()}\")`);\n    if (e1 instanceof Uint8Array) return Buffer.isBuffer(e1) ? new Q(`Buffer.alloc(${e1.byteLength})`) : new Q(`new Uint8Array(${e1.byteLength})`);\n    if (e1 instanceof Date) {\n        let r1 = gn(e1) ? e1.toISOString() : \"Invalid Date\";\n        return new Q(`new Date(\"${r1}\")`);\n    }\n    return e1 instanceof Fe ? new Q(`Prisma.${e1._getName()}`) : Dr(e1) ? new Q(`prisma.${Ye(e1.modelName)}.$fields.${e1.name}`) : Array.isArray(e1) ? Kd(e1) : typeof e1 == \"object\" ? Ea(e1) : new Q(Object.prototype.toString.call(e1));\n}\nfunction Kd(e1) {\n    let r1 = new kr;\n    for (let t1 of e1)r1.addItem(wa(t1));\n    return r1;\n}\nfunction Cn(e1, r1) {\n    let t1 = r1 === \"pretty\" ? pa : vn, n1 = e1.renderAllMessages(t1), i1 = new Ar(0, {\n        colors: t1\n    }).write(e1).toString();\n    return {\n        message: n1,\n        args: i1\n    };\n}\nfunction An({ args: e1, errors: r1, errorFormat: t1, callsite: n1, originalMethod: i1, clientVersion: o1, globalOmit: s1 }) {\n    let a1 = _r(e1);\n    for (let p1 of r1)En(p1, a1, s1);\n    let { message: l1, args: u1 } = Cn(a1, t1), c1 = bn({\n        message: l1,\n        callsite: n1,\n        originalMethod: i1,\n        showColors: t1 === \"pretty\",\n        callArguments: u1\n    });\n    throw new Z(c1, {\n        clientVersion: o1\n    });\n}\nfunction Se(e1) {\n    return e1.replace(/^./, (r1)=>r1.toLowerCase());\n}\nfunction va(e1, r1, t1) {\n    let n1 = Se(t1);\n    return !r1.result || !(r1.result.$allModels || r1.result[n1]) ? e1 : Yd({\n        ...e1,\n        ...xa(r1.name, e1, r1.result.$allModels),\n        ...xa(r1.name, e1, r1.result[n1])\n    });\n}\nfunction Yd(e1) {\n    let r1 = new Pe, t1 = (n1, i1)=>r1.getOrCreate(n1, ()=>i1.has(n1) ? [\n                n1\n            ] : (i1.add(n1), e1[n1] ? e1[n1].needs.flatMap((o1)=>t1(o1, i1)) : [\n                n1\n            ]));\n    return xr(e1, (n1)=>({\n            ...n1,\n            needs: t1(n1.name, new Set)\n        }));\n}\nfunction xa(e1, r1, t1) {\n    return t1 ? xr(t1, ({ needs: n1, compute: i1 }, o1)=>({\n            name: o1,\n            needs: n1 ? Object.keys(n1).filter((s1)=>n1[s1]) : [],\n            compute: zd(r1, o1, i1)\n        })) : {};\n}\nfunction zd(e1, r1, t1) {\n    let n1 = e1?.[r1]?.compute;\n    return n1 ? (i1)=>t1({\n            ...i1,\n            [r1]: n1(i1)\n        }) : t1;\n}\nfunction Pa(e1, r1) {\n    if (!r1) return e1;\n    let t1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(r1))if (e1[n1.name]) for (let i1 of n1.needs)t1[i1] = !0;\n    return t1;\n}\nfunction Ta(e1, r1) {\n    if (!r1) return e1;\n    let t1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(r1))if (!e1[n1.name]) for (let i1 of n1.needs)delete t1[i1];\n    return t1;\n}\nvar In = class {\n    constructor(r1, t1){\n        this.computedFieldsCache = new Pe;\n        this.modelExtensionsCache = new Pe;\n        this.queryCallbacksCache = new Pe;\n        this.clientExtensions = at(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = at(()=>{\n            let r1 = this.previous?.getAllBatchQueryCallbacks() ?? [], t1 = this.extension.query?.$__internalBatch;\n            return t1 ? r1.concat(t1) : r1;\n        });\n        this.extension = r1;\n        this.previous = t1;\n    }\n    getAllComputedFields(r1) {\n        return this.computedFieldsCache.getOrCreate(r1, ()=>va(this.previous?.getAllComputedFields(r1), this.extension, r1));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(r1) {\n        return this.modelExtensionsCache.getOrCreate(r1, ()=>{\n            let t1 = Se(r1);\n            return !this.extension.model || !(this.extension.model[t1] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(r1) : {\n                ...this.previous?.getAllModelExtensions(r1),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[t1]\n            };\n        });\n    }\n    getAllQueryCallbacks(r1, t1) {\n        return this.queryCallbacksCache.getOrCreate(`${r1}:${t1}`, ()=>{\n            let n1 = this.previous?.getAllQueryCallbacks(r1, t1) ?? [], i1 = [], o1 = this.extension.query;\n            return !o1 || !(o1[r1] || o1.$allModels || o1[t1] || o1.$allOperations) ? n1 : (o1[r1] !== void 0 && (o1[r1][t1] !== void 0 && i1.push(o1[r1][t1]), o1[r1].$allOperations !== void 0 && i1.push(o1[r1].$allOperations)), r1 !== \"$none\" && o1.$allModels !== void 0 && (o1.$allModels[t1] !== void 0 && i1.push(o1.$allModels[t1]), o1.$allModels.$allOperations !== void 0 && i1.push(o1.$allModels.$allOperations)), o1[t1] !== void 0 && i1.push(o1[t1]), o1.$allOperations !== void 0 && i1.push(o1.$allOperations), n1.concat(i1));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Nr = class e {\n    constructor(r1){\n        this.head = r1;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(r1) {\n        return new e(new In(r1));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(r1) {\n        return new e(new In(r1, this.head));\n    }\n    getAllComputedFields(r1) {\n        return this.head?.getAllComputedFields(r1);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(r1) {\n        return this.head?.getAllModelExtensions(r1);\n    }\n    getAllQueryCallbacks(r1, t1) {\n        return this.head?.getAllQueryCallbacks(r1, t1) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar kn = class {\n    constructor(r1){\n        this.name = r1;\n    }\n};\nfunction Sa(e1) {\n    return e1 instanceof kn;\n}\nfunction Ra(e1) {\n    return new kn(e1);\n}\nvar Ca = Symbol(), yt = class {\n    constructor(r1){\n        if (r1 !== Ca) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(r1) {\n        return r1 === void 0 ? On : r1;\n    }\n}, On = new yt(Ca);\nfunction Re(e1) {\n    return e1 instanceof yt;\n}\nvar Zd = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    updateManyAndReturn: \"updateManyAndReturn\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, Aa = \"explicitly `undefined` values are not allowed\";\nfunction Dn({ modelName: e1, action: r1, args: t1, runtimeDataModel: n1, extensions: i1 = Nr.empty(), callsite: o1, clientMethod: s1, errorFormat: a1, clientVersion: l1, previewFeatures: u1, globalOmit: c1 }) {\n    let p1 = new Yi({\n        runtimeDataModel: n1,\n        modelName: e1,\n        action: r1,\n        rootArgs: t1,\n        callsite: o1,\n        extensions: i1,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s1,\n        errorFormat: a1,\n        clientVersion: l1,\n        previewFeatures: u1,\n        globalOmit: c1\n    });\n    return {\n        modelName: e1,\n        action: Zd[r1],\n        query: bt(t1, p1)\n    };\n}\nfunction bt({ select: e1, include: r1, ...t1 } = {}, n1) {\n    let i1 = t1.omit;\n    return delete t1.omit, {\n        arguments: ka(t1, n1),\n        selection: Xd(e1, r1, i1, n1)\n    };\n}\nfunction Xd(e1, r1, t1, n1) {\n    return e1 ? (r1 ? n1.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n1.getSelectionPath()\n    }) : t1 && n1.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n1.getSelectionPath()\n    }), nm(e1, n1)) : em(n1, r1, t1);\n}\nfunction em(e1, r1, t1) {\n    let n1 = {};\n    return e1.modelOrType && !e1.isRawAction() && (n1.$composites = !0, n1.$scalars = !0), r1 && rm(n1, r1, e1), tm(n1, t1, e1), n1;\n}\nfunction rm(e1, r1, t1) {\n    for (let [n1, i1] of Object.entries(r1)){\n        if (Re(i1)) continue;\n        let o1 = t1.nestSelection(n1);\n        if (zi(i1, o1), i1 === !1 || i1 === void 0) {\n            e1[n1] = !1;\n            continue;\n        }\n        let s1 = t1.findField(n1);\n        if (s1 && s1.kind !== \"object\" && t1.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: t1.getSelectionPath().concat(n1),\n            outputType: t1.getOutputTypeDescription()\n        }), s1) {\n            e1[n1] = bt(i1 === !0 ? {} : i1, o1);\n            continue;\n        }\n        if (i1 === !0) {\n            e1[n1] = !0;\n            continue;\n        }\n        e1[n1] = bt(i1, o1);\n    }\n}\nfunction tm(e1, r1, t1) {\n    let n1 = t1.getComputedFields(), i1 = {\n        ...t1.getGlobalOmit(),\n        ...r1\n    }, o1 = Ta(i1, n1);\n    for (let [s1, a1] of Object.entries(o1)){\n        if (Re(a1)) continue;\n        zi(a1, t1.nestSelection(s1));\n        let l1 = t1.findField(s1);\n        n1?.[s1] && !l1 || (e1[s1] = !a1);\n    }\n}\nfunction nm(e1, r1) {\n    let t1 = {}, n1 = r1.getComputedFields(), i1 = Pa(e1, n1);\n    for (let [o1, s1] of Object.entries(i1)){\n        if (Re(s1)) continue;\n        let a1 = r1.nestSelection(o1);\n        zi(s1, a1);\n        let l1 = r1.findField(o1);\n        if (!(n1?.[o1] && !l1)) {\n            if (s1 === !1 || s1 === void 0 || Re(s1)) {\n                t1[o1] = !1;\n                continue;\n            }\n            if (s1 === !0) {\n                l1?.kind === \"object\" ? t1[o1] = bt({}, a1) : t1[o1] = !0;\n                continue;\n            }\n            t1[o1] = bt(s1, a1);\n        }\n    }\n    return t1;\n}\nfunction Ia(e1, r1) {\n    if (e1 === null) return null;\n    if (typeof e1 == \"string\" || typeof e1 == \"number\" || typeof e1 == \"boolean\") return e1;\n    if (typeof e1 == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e1)\n    };\n    if (Sr(e1)) {\n        if (gn(e1)) return {\n            $type: \"DateTime\",\n            value: e1.toISOString()\n        };\n        r1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: r1.getSelectionPath(),\n            argumentPath: r1.getArgumentPath(),\n            argument: {\n                name: r1.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (Sa(e1)) return {\n        $type: \"Param\",\n        value: e1.name\n    };\n    if (Dr(e1)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e1.name,\n            _container: e1.modelName\n        }\n    };\n    if (Array.isArray(e1)) return im(e1, r1);\n    if (ArrayBuffer.isView(e1)) {\n        let { buffer: t1, byteOffset: n1, byteLength: i1 } = e1;\n        return {\n            $type: \"Bytes\",\n            value: Buffer.from(t1, n1, i1).toString(\"base64\")\n        };\n    }\n    if (om(e1)) return e1.values;\n    if (Rr(e1)) return {\n        $type: \"Decimal\",\n        value: e1.toFixed()\n    };\n    if (e1 instanceof Fe) {\n        if (e1 !== Sn.instances[e1._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e1._getName()\n        };\n    }\n    if (sm(e1)) return e1.toJSON();\n    if (typeof e1 == \"object\") return ka(e1, r1);\n    r1.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: r1.getSelectionPath(),\n        argumentPath: r1.getArgumentPath(),\n        argument: {\n            name: r1.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e1)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction ka(e1, r1) {\n    if (e1.$type) return {\n        $type: \"Raw\",\n        value: e1\n    };\n    let t1 = {};\n    for(let n1 in e1){\n        let i1 = e1[n1], o1 = r1.nestArgument(n1);\n        Re(i1) || (i1 !== void 0 ? t1[n1] = Ia(i1, o1) : r1.isPreviewFeatureOn(\"strictUndefinedChecks\") && r1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o1.getArgumentPath(),\n            selectionPath: r1.getSelectionPath(),\n            argument: {\n                name: r1.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: Aa\n        }));\n    }\n    return t1;\n}\nfunction im(e1, r1) {\n    let t1 = [];\n    for(let n1 = 0; n1 < e1.length; n1++){\n        let i1 = r1.nestArgument(String(n1)), o1 = e1[n1];\n        if (o1 === void 0 || Re(o1)) {\n            let s1 = o1 === void 0 ? \"undefined\" : \"Prisma.skip\";\n            r1.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i1.getSelectionPath(),\n                argumentPath: i1.getArgumentPath(),\n                argument: {\n                    name: `${r1.getArgumentName()}[${n1}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s1}\\` value within array. Use \\`null\\` or filter out \\`${s1}\\` values`\n            });\n        }\n        t1.push(Ia(o1, i1));\n    }\n    return t1;\n}\nfunction om(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.__prismaRawParameters__ === !0;\n}\nfunction sm(e1) {\n    return typeof e1 == \"object\" && e1 !== null && typeof e1.toJSON == \"function\";\n}\nfunction zi(e1, r1) {\n    e1 === void 0 && r1.isPreviewFeatureOn(\"strictUndefinedChecks\") && r1.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: r1.getSelectionPath(),\n        underlyingError: Aa\n    });\n}\nvar Yi = class e {\n    constructor(r1){\n        this.params = r1;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(r1) {\n        An({\n            errors: [\n                r1\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((r1)=>({\n                    name: r1.name,\n                    typeName: \"boolean\",\n                    isRelation: r1.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(r1) {\n        return this.params.previewFeatures.includes(r1);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(r1) {\n        return this.modelOrType?.fields.find((t1)=>t1.name === r1);\n    }\n    nestSelection(r1) {\n        let t1 = this.findField(r1), n1 = t1?.kind === \"object\" ? t1.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n1,\n            selectionPath: this.params.selectionPath.concat(r1)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Ye(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"updateManyAndReturn\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                _e(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(r1) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(r1)\n        });\n    }\n};\nfunction Oa(e1) {\n    if (!e1._hasPreviewFlag(\"metrics\")) throw new Z(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n        clientVersion: e1._clientVersion\n    });\n}\nvar Lr = class {\n    constructor(r1){\n        this._client = r1;\n    }\n    prometheus(r1) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"prometheus\",\n            ...r1\n        });\n    }\n    json(r1) {\n        return Oa(this._client), this._client._engine.metrics({\n            format: \"json\",\n            ...r1\n        });\n    }\n};\nfunction Da(e1, r1) {\n    let t1 = at(()=>am(r1));\n    Object.defineProperty(e1, \"dmmf\", {\n        get: ()=>t1.get()\n    });\n}\nfunction am(e1) {\n    return {\n        datamodel: {\n            models: Zi(e1.models),\n            enums: Zi(e1.enums),\n            types: Zi(e1.types)\n        }\n    };\n}\nfunction Zi(e1) {\n    return Object.entries(e1).map(([r1, t1])=>({\n            name: r1,\n            ...t1\n        }));\n}\nvar Xi = new WeakMap, _n = \"$$PrismaTypedSql\", Et = class {\n    constructor(r1, t1){\n        Xi.set(this, {\n            sql: r1,\n            values: t1\n        }), Object.defineProperty(this, _n, {\n            value: _n\n        });\n    }\n    get sql() {\n        return Xi.get(this).sql;\n    }\n    get values() {\n        return Xi.get(this).values;\n    }\n};\nfunction _a(e1) {\n    return (...r1)=>new Et(e1, r1);\n}\nfunction Nn(e1) {\n    return e1 != null && e1[_n] === _n;\n}\nvar pu = k(Ei());\nvar du = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\"), mu = __webpack_require__(/*! node:events */ \"node:events\"), fu = k(__webpack_require__(/*! node:fs */ \"node:fs\")), Zn = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar oe = class e {\n    constructor(r1, t1){\n        if (r1.length - 1 !== t1.length) throw r1.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${r1.length} strings to have ${r1.length - 1} values`);\n        let n1 = t1.reduce((s1, a1)=>s1 + (a1 instanceof e ? a1.values.length : 1), 0);\n        this.values = new Array(n1), this.strings = new Array(n1 + 1), this.strings[0] = r1[0];\n        let i1 = 0, o1 = 0;\n        for(; i1 < t1.length;){\n            let s1 = t1[i1++], a1 = r1[i1];\n            if (s1 instanceof e) {\n                this.strings[o1] += s1.strings[0];\n                let l1 = 0;\n                for(; l1 < s1.values.length;)this.values[o1++] = s1.values[l1++], this.strings[o1] = s1.strings[l1];\n                this.strings[o1] += a1;\n            } else this.values[o1++] = s1, this.strings[o1] = a1;\n        }\n    }\n    get sql() {\n        let r1 = this.strings.length, t1 = 1, n1 = this.strings[0];\n        for(; t1 < r1;)n1 += `?${this.strings[t1++]}`;\n        return n1;\n    }\n    get statement() {\n        let r1 = this.strings.length, t1 = 1, n1 = this.strings[0];\n        for(; t1 < r1;)n1 += `:${t1}${this.strings[t1++]}`;\n        return n1;\n    }\n    get text() {\n        let r1 = this.strings.length, t1 = 1, n1 = this.strings[0];\n        for(; t1 < r1;)n1 += `$${t1}${this.strings[t1++]}`;\n        return n1;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction Na(e1, r1 = \",\", t1 = \"\", n1 = \"\") {\n    if (e1.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        t1,\n        ...Array(e1.length - 1).fill(r1),\n        n1\n    ], e1);\n}\nfunction eo(e1) {\n    return new oe([\n        e1\n    ], []);\n}\nvar La = eo(\"\");\nfunction ro(e1, ...r1) {\n    return new oe(e1, r1);\n}\nfunction wt(e1) {\n    return {\n        getKeys () {\n            return Object.keys(e1);\n        },\n        getPropertyValue (r1) {\n            return e1[r1];\n        }\n    };\n}\nfunction re(e1, r1) {\n    return {\n        getKeys () {\n            return [\n                e1\n            ];\n        },\n        getPropertyValue () {\n            return r1();\n        }\n    };\n}\nfunction ar(e1) {\n    let r1 = new Pe;\n    return {\n        getKeys () {\n            return e1.getKeys();\n        },\n        getPropertyValue (t1) {\n            return r1.getOrCreate(t1, ()=>e1.getPropertyValue(t1));\n        },\n        getPropertyDescriptor (t1) {\n            return e1.getPropertyDescriptor?.(t1);\n        }\n    };\n}\nvar Ln = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Fn(e1) {\n    let r1 = new Set(e1);\n    return {\n        getPrototypeOf: ()=>Object.prototype,\n        getOwnPropertyDescriptor: ()=>Ln,\n        has: (t1, n1)=>r1.has(n1),\n        set: (t1, n1, i1)=>r1.add(n1) && Reflect.set(t1, n1, i1),\n        ownKeys: ()=>[\n                ...r1\n            ]\n    };\n}\nvar Fa = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction he(e1, r1) {\n    let t1 = lm(r1), n1 = new Set, i1 = new Proxy(e1, {\n        get (o1, s1) {\n            if (n1.has(s1)) return o1[s1];\n            let a1 = t1.get(s1);\n            return a1 ? a1.getPropertyValue(s1) : o1[s1];\n        },\n        has (o1, s1) {\n            if (n1.has(s1)) return !0;\n            let a1 = t1.get(s1);\n            return a1 ? a1.has?.(s1) ?? !0 : Reflect.has(o1, s1);\n        },\n        ownKeys (o1) {\n            let s1 = Ma(Reflect.ownKeys(o1), t1), a1 = Ma(Array.from(t1.keys()), t1);\n            return [\n                ...new Set([\n                    ...s1,\n                    ...a1,\n                    ...n1\n                ])\n            ];\n        },\n        set (o1, s1, a1) {\n            return t1.get(s1)?.getPropertyDescriptor?.(s1)?.writable === !1 ? !1 : (n1.add(s1), Reflect.set(o1, s1, a1));\n        },\n        getOwnPropertyDescriptor (o1, s1) {\n            let a1 = Reflect.getOwnPropertyDescriptor(o1, s1);\n            if (a1 && !a1.configurable) return a1;\n            let l1 = t1.get(s1);\n            return l1 ? l1.getPropertyDescriptor ? {\n                ...Ln,\n                ...l1?.getPropertyDescriptor(s1)\n            } : Ln : a1;\n        },\n        defineProperty (o1, s1, a1) {\n            return n1.add(s1), Reflect.defineProperty(o1, s1, a1);\n        },\n        getPrototypeOf: ()=>Object.prototype\n    });\n    return i1[Fa] = function() {\n        let o1 = {\n            ...this\n        };\n        return delete o1[Fa], o1;\n    }, i1;\n}\nfunction lm(e1) {\n    let r1 = new Map;\n    for (let t1 of e1){\n        let n1 = t1.getKeys();\n        for (let i1 of n1)r1.set(i1, t1);\n    }\n    return r1;\n}\nfunction Ma(e1, r1) {\n    return e1.filter((t1)=>r1.get(t1)?.has?.(t1) ?? !0);\n}\nfunction Fr(e1) {\n    return {\n        getKeys () {\n            return e1;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Mr(e1, r1) {\n    return {\n        batch: e1,\n        transaction: r1?.kind === \"batch\" ? {\n            isolationLevel: r1.options.isolationLevel\n        } : void 0\n    };\n}\nfunction $a(e1) {\n    if (e1 === void 0) return \"\";\n    let r1 = _r(e1);\n    return new Ar(0, {\n        colors: vn\n    }).write(r1).toString();\n}\nvar um = \"P2037\";\nfunction $r({ error: e1, user_facing_error: r1 }, t1, n1) {\n    return r1.error_code ? new z(cm(r1, n1), {\n        code: r1.error_code,\n        clientVersion: t1,\n        meta: r1.meta,\n        batchRequestIdx: r1.batch_request_idx\n    }) : new j(e1, {\n        clientVersion: t1,\n        batchRequestIdx: r1.batch_request_idx\n    });\n}\nfunction cm(e1, r1) {\n    let t1 = e1.message;\n    return (r1 === \"postgresql\" || r1 === \"postgres\" || r1 === \"mysql\") && e1.error_code === um && (t1 += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), t1;\n}\nvar xt = \"<unknown>\";\nfunction qa(e1) {\n    var r1 = e1.split(`\n`);\n    return r1.reduce(function(t1, n1) {\n        var i1 = mm(n1) || gm(n1) || bm(n1) || vm(n1) || wm(n1);\n        return i1 && t1.push(i1), t1;\n    }, []);\n}\nvar pm = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, dm = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction mm(e1) {\n    var r1 = pm.exec(e1);\n    if (!r1) return null;\n    var t1 = r1[2] && r1[2].indexOf(\"native\") === 0, n1 = r1[2] && r1[2].indexOf(\"eval\") === 0, i1 = dm.exec(r1[2]);\n    return n1 && i1 != null && (r1[2] = i1[1], r1[3] = i1[2], r1[4] = i1[3]), {\n        file: t1 ? null : r1[2],\n        methodName: r1[1] || xt,\n        arguments: t1 ? [\n            r1[2]\n        ] : [],\n        lineNumber: r1[3] ? +r1[3] : null,\n        column: r1[4] ? +r1[4] : null\n    };\n}\nvar fm = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction gm(e1) {\n    var r1 = fm.exec(e1);\n    return r1 ? {\n        file: r1[2],\n        methodName: r1[1] || xt,\n        arguments: [],\n        lineNumber: +r1[3],\n        column: r1[4] ? +r1[4] : null\n    } : null;\n}\nvar hm = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, ym = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction bm(e1) {\n    var r1 = hm.exec(e1);\n    if (!r1) return null;\n    var t1 = r1[3] && r1[3].indexOf(\" > eval\") > -1, n1 = ym.exec(r1[3]);\n    return t1 && n1 != null && (r1[3] = n1[1], r1[4] = n1[2], r1[5] = null), {\n        file: r1[3],\n        methodName: r1[1] || xt,\n        arguments: r1[2] ? r1[2].split(\",\") : [],\n        lineNumber: r1[4] ? +r1[4] : null,\n        column: r1[5] ? +r1[5] : null\n    };\n}\nvar Em = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction wm(e1) {\n    var r1 = Em.exec(e1);\n    return r1 ? {\n        file: r1[3],\n        methodName: r1[1] || xt,\n        arguments: [],\n        lineNumber: +r1[4],\n        column: r1[5] ? +r1[5] : null\n    } : null;\n}\nvar xm = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction vm(e1) {\n    var r1 = xm.exec(e1);\n    return r1 ? {\n        file: r1[2],\n        methodName: r1[1] || xt,\n        arguments: [],\n        lineNumber: +r1[3],\n        column: r1[4] ? +r1[4] : null\n    } : null;\n}\nvar to = class {\n    getLocation() {\n        return null;\n    }\n}, no = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let r1 = this._error.stack;\n        if (!r1) return null;\n        let n1 = qa(r1).find((i1)=>{\n            if (!i1.file) return !1;\n            let o1 = Oi(i1.file);\n            return o1 !== \"<anonymous>\" && !o1.includes(\"@prisma\") && !o1.includes(\"/packages/client/src/runtime/\") && !o1.endsWith(\"/runtime/binary.js\") && !o1.endsWith(\"/runtime/library.js\") && !o1.endsWith(\"/runtime/edge.js\") && !o1.endsWith(\"/runtime/edge-esm.js\") && !o1.startsWith(\"internal/\") && !i1.methodName.includes(\"new \") && !i1.methodName.includes(\"getCallSite\") && !i1.methodName.includes(\"Proxy.\") && i1.methodName.split(\".\").length < 4;\n        });\n        return !n1 || !n1.file ? null : {\n            fileName: n1.file,\n            lineNumber: n1.lineNumber,\n            columnNumber: n1.column\n        };\n    }\n};\nfunction Ze(e1) {\n    return e1 === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e1 !== \"minimal\" ? new $EnabledCallSite : new to : new no;\n}\nvar ja = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction qr(e1 = {}) {\n    let r1 = Tm(e1);\n    return Object.entries(r1).reduce((n1, [i1, o1])=>(ja[i1] !== void 0 ? n1.select[i1] = {\n            select: o1\n        } : n1[i1] = o1, n1), {\n        select: {}\n    });\n}\nfunction Tm(e1 = {}) {\n    return typeof e1._count == \"boolean\" ? {\n        ...e1,\n        _count: {\n            _all: e1._count\n        }\n    } : e1;\n}\nfunction Mn(e1 = {}) {\n    return (r1)=>(typeof e1._count == \"boolean\" && (r1._count = r1._count._all), r1);\n}\nfunction Va(e1, r1) {\n    let t1 = Mn(e1);\n    return r1({\n        action: \"aggregate\",\n        unpacker: t1,\n        argsMapper: qr\n    })(e1);\n}\nfunction Sm(e1 = {}) {\n    let { select: r1, ...t1 } = e1;\n    return typeof r1 == \"object\" ? qr({\n        ...t1,\n        _count: r1\n    }) : qr({\n        ...t1,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Rm(e1 = {}) {\n    return typeof e1.select == \"object\" ? (r1)=>Mn(e1)(r1)._count : (r1)=>Mn(e1)(r1)._count._all;\n}\nfunction Ba(e1, r1) {\n    return r1({\n        action: \"count\",\n        unpacker: Rm(e1),\n        argsMapper: Sm\n    })(e1);\n}\nfunction Cm(e1 = {}) {\n    let r1 = qr(e1);\n    if (Array.isArray(r1.by)) for (let t1 of r1.by)typeof t1 == \"string\" && (r1.select[t1] = !0);\n    else typeof r1.by == \"string\" && (r1.select[r1.by] = !0);\n    return r1;\n}\nfunction Am(e1 = {}) {\n    return (r1)=>(typeof e1?._count == \"boolean\" && r1.forEach((t1)=>{\n            t1._count = t1._count._all;\n        }), r1);\n}\nfunction Ua(e1, r1) {\n    return r1({\n        action: \"groupBy\",\n        unpacker: Am(e1),\n        argsMapper: Cm\n    })(e1);\n}\nfunction Ga(e1, r1, t1) {\n    if (r1 === \"aggregate\") return (n1)=>Va(n1, t1);\n    if (r1 === \"count\") return (n1)=>Ba(n1, t1);\n    if (r1 === \"groupBy\") return (n1)=>Ua(n1, t1);\n}\nfunction Qa(e1, r1) {\n    let t1 = r1.fields.filter((i1)=>!i1.relationName), n1 = zs(t1, \"name\");\n    return new Proxy({}, {\n        get (i1, o1) {\n            if (o1 in i1 || typeof o1 == \"symbol\") return i1[o1];\n            let s1 = n1[o1];\n            if (s1) return new dt(e1, o1, s1.type, s1.isList, s1.kind === \"enum\");\n        },\n        ...Fn(Object.keys(n1))\n    });\n}\nvar Wa = (e1)=>Array.isArray(e1) ? e1 : e1.split(\".\"), io = (e1, r1)=>Wa(r1).reduce((t1, n1)=>t1 && t1[n1], e1), Ja = (e1, r1, t1)=>Wa(r1).reduceRight((n1, i1, o1, s1)=>Object.assign({}, io(e1, s1.slice(0, o1)), {\n            [i1]: n1\n        }), t1);\nfunction Im(e1, r1) {\n    return e1 === void 0 || r1 === void 0 ? [] : [\n        ...r1,\n        \"select\",\n        e1\n    ];\n}\nfunction km(e1, r1, t1) {\n    return r1 === void 0 ? e1 ?? {} : Ja(r1, t1, e1 || !0);\n}\nfunction oo(e1, r1, t1, n1, i1, o1) {\n    let a1 = e1._runtimeDataModel.models[r1].fields.reduce((l1, u1)=>({\n            ...l1,\n            [u1.name]: u1\n        }), {});\n    return (l1)=>{\n        let u1 = Ze(e1._errorFormat), c1 = Im(n1, i1), p1 = km(l1, o1, c1), d1 = t1({\n            dataPath: c1,\n            callsite: u1\n        })(p1), f1 = Om(e1, r1);\n        return new Proxy(d1, {\n            get (g1, h1) {\n                if (!f1.includes(h1)) return g1[h1];\n                let P1 = [\n                    a1[h1].type,\n                    t1,\n                    h1\n                ], S1 = [\n                    c1,\n                    p1\n                ];\n                return oo(e1, ...P1, ...S1);\n            },\n            ...Fn([\n                ...f1,\n                ...Object.getOwnPropertyNames(d1)\n            ])\n        });\n    };\n}\nfunction Om(e1, r1) {\n    return e1._runtimeDataModel.models[r1].fields.filter((t1)=>t1.kind === \"object\").map((t1)=>t1.name);\n}\nvar Dm = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], _m = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction so(e1, r1) {\n    let t1 = e1._extensions.getAllModelExtensions(r1) ?? {}, n1 = [\n        Nm(e1, r1),\n        Fm(e1, r1),\n        wt(t1),\n        re(\"name\", ()=>r1),\n        re(\"$name\", ()=>r1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ];\n    return he({}, n1);\n}\nfunction Nm(e1, r1) {\n    let t1 = Se(r1), n1 = Object.keys(Cr).concat(\"count\");\n    return {\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = i1, s1 = (a1)=>(l1)=>{\n                    let u1 = Ze(e1._errorFormat);\n                    return e1._createPrismaPromise((c1)=>{\n                        let p1 = {\n                            args: l1,\n                            dataPath: [],\n                            action: o1,\n                            model: r1,\n                            clientMethod: `${t1}.${i1}`,\n                            jsModelName: t1,\n                            transaction: c1,\n                            callsite: u1\n                        };\n                        return e1._request({\n                            ...p1,\n                            ...a1\n                        });\n                    }, {\n                        action: o1,\n                        args: l1,\n                        model: r1\n                    });\n                };\n            return Dm.includes(o1) ? oo(e1, r1, s1) : Lm(i1) ? Ga(e1, i1, s1) : s1({});\n        }\n    };\n}\nfunction Lm(e1) {\n    return _m.includes(e1);\n}\nfunction Fm(e1, r1) {\n    return ar(re(\"fields\", ()=>{\n        let t1 = e1._runtimeDataModel.models[r1];\n        return Qa(r1, t1);\n    }));\n}\nfunction Ha(e1) {\n    return e1.replace(/^./, (r1)=>r1.toUpperCase());\n}\nvar ao = Symbol();\nfunction vt(e1) {\n    let r1 = [\n        Mm(e1),\n        $m(e1),\n        re(ao, ()=>e1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ], t1 = e1._extensions.getAllClientExtensions();\n    return t1 && r1.push(wt(t1)), he(e1, r1);\n}\nfunction Mm(e1) {\n    let r1 = Object.getPrototypeOf(e1._originalClient), t1 = [\n        ...new Set(Object.getOwnPropertyNames(r1))\n    ];\n    return {\n        getKeys () {\n            return t1;\n        },\n        getPropertyValue (n1) {\n            return e1[n1];\n        }\n    };\n}\nfunction $m(e1) {\n    let r1 = Object.keys(e1._runtimeDataModel.models), t1 = r1.map(Se), n1 = [\n        ...new Set(r1.concat(t1))\n    ];\n    return ar({\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = Ha(i1);\n            if (e1._runtimeDataModel.models[o1] !== void 0) return so(e1, o1);\n            if (e1._runtimeDataModel.models[i1] !== void 0) return so(e1, i1);\n        },\n        getPropertyDescriptor (i1) {\n            if (!t1.includes(i1)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Ka(e1) {\n    return e1[ao] ? e1[ao] : e1;\n}\nfunction Ya(e1) {\n    if (typeof e1 == \"function\") return e1(this);\n    if (e1.client?.__AccelerateEngine) {\n        let t1 = e1.client.__AccelerateEngine;\n        this._originalClient._engine = new t1(this._originalClient._accelerateEngineConfig);\n    }\n    let r1 = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e1)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return vt(r1);\n}\nfunction za({ result: e1, modelName: r1, select: t1, omit: n1, extensions: i1 }) {\n    let o1 = i1.getAllComputedFields(r1);\n    if (!o1) return e1;\n    let s1 = [], a1 = [];\n    for (let l1 of Object.values(o1)){\n        if (n1) {\n            if (n1[l1.name]) continue;\n            let u1 = l1.needs.filter((c1)=>n1[c1]);\n            u1.length > 0 && a1.push(Fr(u1));\n        } else if (t1) {\n            if (!t1[l1.name]) continue;\n            let u1 = l1.needs.filter((c1)=>!t1[c1]);\n            u1.length > 0 && a1.push(Fr(u1));\n        }\n        qm(e1, l1.needs) && s1.push(jm(l1, he(e1, s1)));\n    }\n    return s1.length > 0 || a1.length > 0 ? he(e1, [\n        ...s1,\n        ...a1\n    ]) : e1;\n}\nfunction qm(e1, r1) {\n    return r1.every((t1)=>Mi(e1, t1));\n}\nfunction jm(e1, r1) {\n    return ar(re(e1.name, ()=>e1.compute(r1)));\n}\nfunction $n({ visitor: e1, result: r1, args: t1, runtimeDataModel: n1, modelName: i1 }) {\n    if (Array.isArray(r1)) {\n        for(let s1 = 0; s1 < r1.length; s1++)r1[s1] = $n({\n            result: r1[s1],\n            args: t1,\n            modelName: i1,\n            runtimeDataModel: n1,\n            visitor: e1\n        });\n        return r1;\n    }\n    let o1 = e1(r1, i1, t1) ?? r1;\n    return t1.include && Za({\n        includeOrSelect: t1.include,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), t1.select && Za({\n        includeOrSelect: t1.select,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), o1;\n}\nfunction Za({ includeOrSelect: e1, result: r1, parentModelName: t1, runtimeDataModel: n1, visitor: i1 }) {\n    for (let [o1, s1] of Object.entries(e1)){\n        if (!s1 || r1[o1] == null || Re(s1)) continue;\n        let l1 = n1.models[t1].fields.find((c1)=>c1.name === o1);\n        if (!l1 || l1.kind !== \"object\" || !l1.relationName) continue;\n        let u1 = typeof s1 == \"object\" ? s1 : {};\n        r1[o1] = $n({\n            visitor: i1,\n            result: r1[o1],\n            args: u1,\n            modelName: l1.type,\n            runtimeDataModel: n1\n        });\n    }\n}\nfunction Xa({ result: e1, modelName: r1, args: t1, extensions: n1, runtimeDataModel: i1, globalOmit: o1 }) {\n    return n1.isEmpty() || e1 == null || typeof e1 != \"object\" || !i1.models[r1] ? e1 : $n({\n        result: e1,\n        args: t1 ?? {},\n        modelName: r1,\n        runtimeDataModel: i1,\n        visitor: (a1, l1, u1)=>{\n            let c1 = Se(l1);\n            return za({\n                result: a1,\n                modelName: c1,\n                select: u1.select,\n                omit: u1.select ? void 0 : {\n                    ...o1?.[c1],\n                    ...u1.omit\n                },\n                extensions: n1\n            });\n        }\n    });\n}\nvar Vm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], el = Vm;\nfunction rl(e1) {\n    if (e1 instanceof oe) return Bm(e1);\n    if (Nn(e1)) return Um(e1);\n    if (Array.isArray(e1)) {\n        let t1 = [\n            e1[0]\n        ];\n        for(let n1 = 1; n1 < e1.length; n1++)t1[n1] = Pt(e1[n1]);\n        return t1;\n    }\n    let r1 = {};\n    for(let t1 in e1)r1[t1] = Pt(e1[t1]);\n    return r1;\n}\nfunction Bm(e1) {\n    return new oe(e1.strings, e1.values);\n}\nfunction Um(e1) {\n    return new Et(e1.sql, e1.values);\n}\nfunction Pt(e1) {\n    if (typeof e1 != \"object\" || e1 == null || e1 instanceof Fe || Dr(e1)) return e1;\n    if (Rr(e1)) return new ve(e1.toFixed());\n    if (Sr(e1)) return new Date(+e1);\n    if (ArrayBuffer.isView(e1)) return e1.slice(0);\n    if (Array.isArray(e1)) {\n        let r1 = e1.length, t1;\n        for(t1 = Array(r1); r1--;)t1[r1] = Pt(e1[r1]);\n        return t1;\n    }\n    if (typeof e1 == \"object\") {\n        let r1 = {};\n        for(let t1 in e1)t1 === \"__proto__\" ? Object.defineProperty(r1, t1, {\n            value: Pt(e1[t1]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : r1[t1] = Pt(e1[t1]);\n        return r1;\n    }\n    _e(e1, \"Unknown value\");\n}\nfunction nl(e1, r1, t1, n1 = 0) {\n    return e1._createPrismaPromise((i1)=>{\n        let o1 = r1.customDataProxyFetch;\n        return \"transaction\" in r1 && i1 !== void 0 && (r1.transaction?.kind === \"batch\" && r1.transaction.lock.then(), r1.transaction = i1), n1 === t1.length ? e1._executeRequest(r1) : t1[n1]({\n            model: r1.model,\n            operation: r1.model ? r1.action : r1.clientMethod,\n            args: rl(r1.args ?? {}),\n            __internalParams: r1,\n            query: (s1, a1 = r1)=>{\n                let l1 = a1.customDataProxyFetch;\n                return a1.customDataProxyFetch = al(o1, l1), a1.args = s1, nl(e1, a1, t1, n1 + 1);\n            }\n        });\n    });\n}\nfunction il(e1, r1) {\n    let { jsModelName: t1, action: n1, clientMethod: i1 } = r1, o1 = t1 ? n1 : i1;\n    if (e1._extensions.isEmpty()) return e1._executeRequest(r1);\n    let s1 = e1._extensions.getAllQueryCallbacks(t1 ?? \"$none\", o1);\n    return nl(e1, r1, s1);\n}\nfunction ol(e1) {\n    return (r1)=>{\n        let t1 = {\n            requests: r1\n        }, n1 = r1[0].extensions.getAllBatchQueryCallbacks();\n        return n1.length ? sl(t1, n1, 0, e1) : e1(t1);\n    };\n}\nfunction sl(e1, r1, t1, n1) {\n    if (t1 === r1.length) return n1(e1);\n    let i1 = e1.customDataProxyFetch, o1 = e1.requests[0].transaction;\n    return r1[t1]({\n        args: {\n            queries: e1.requests.map((s1)=>({\n                    model: s1.modelName,\n                    operation: s1.action,\n                    args: s1.args\n                })),\n            transaction: o1 ? {\n                isolationLevel: o1.kind === \"batch\" ? o1.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e1,\n        query (s1, a1 = e1) {\n            let l1 = a1.customDataProxyFetch;\n            return a1.customDataProxyFetch = al(i1, l1), sl(a1, r1, t1 + 1, n1);\n        }\n    });\n}\nvar tl = (e1)=>e1;\nfunction al(e1 = tl, r1 = tl) {\n    return (t1)=>e1(r1(t1));\n}\nvar ll = N(\"prisma:client\"), ul = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction cl({ postinstall: e1, ciName: r1, clientVersion: t1 }) {\n    if (ll(\"checkPlatformCaching:postinstall\", e1), ll(\"checkPlatformCaching:ciName\", r1), e1 === !0 && r1 && r1 in ul) {\n        let n1 = `Prisma has detected that this project was built on ${r1}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${ul[r1]}-build`;\n        throw console.error(n1), new T(n1, t1);\n    }\n}\nfunction pl(e1, r1) {\n    return e1 ? e1.datasources ? e1.datasources : e1.datasourceUrl ? {\n        [r1[0]]: {\n            url: e1.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Gm = ()=>globalThis.process?.release?.name === \"node\", Qm = ()=>!!globalThis.Bun || !!globalThis.process?.versions?.bun, Wm = ()=>!!globalThis.Deno, Jm = ()=>typeof globalThis.Netlify == \"object\", Hm = ()=>typeof globalThis.EdgeRuntime == \"object\", Km = ()=>globalThis.navigator?.userAgent === \"Cloudflare-Workers\";\nfunction Ym() {\n    return [\n        [\n            Jm,\n            \"netlify\"\n        ],\n        [\n            Hm,\n            \"edge-light\"\n        ],\n        [\n            Km,\n            \"workerd\"\n        ],\n        [\n            Wm,\n            \"deno\"\n        ],\n        [\n            Qm,\n            \"bun\"\n        ],\n        [\n            Gm,\n            \"node\"\n        ]\n    ].flatMap((t1)=>t1[0]() ? [\n            t1[1]\n        ] : []).at(0) ?? \"\";\n}\nvar zm = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction qn() {\n    let e1 = Ym();\n    return {\n        id: e1,\n        prettyName: zm[e1] || e1,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e1)\n    };\n}\nvar hl = k(__webpack_require__(/*! node:fs */ \"node:fs\")), Tt = k(__webpack_require__(/*! node:path */ \"node:path\"));\nfunction jn(e1) {\n    let { runtimeBinaryTarget: r1 } = e1;\n    return `Add \"${r1}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Zm(e1)}`;\n}\nfunction Zm(e1) {\n    let { generator: r1, generatorBinaryTargets: t1, runtimeBinaryTarget: n1 } = e1, i1 = {\n        fromEnvVar: null,\n        value: n1\n    }, o1 = [\n        ...t1,\n        i1\n    ];\n    return Ai({\n        ...r1,\n        binaryTargets: o1\n    });\n}\nfunction Xe(e1) {\n    let { runtimeBinaryTarget: r1 } = e1;\n    return `Prisma Client could not locate the Query Engine for runtime \"${r1}\".`;\n}\nfunction er(e1) {\n    let { searchedLocations: r1 } = e1;\n    return `The following locations have been searched:\n${[\n        ...new Set(r1)\n    ].map((i1)=>`  ${i1}`).join(`\n`)}`;\n}\nfunction dl(e1) {\n    let { runtimeBinaryTarget: r1 } = e1;\n    return `${Xe(e1)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${r1}\".\n${jn(e1)}\n\n${er(e1)}`;\n}\nfunction Vn(e1) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e1}`;\n}\nfunction Bn(e1) {\n    let { errorStack: r1 } = e1;\n    return r1?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction ml(e1) {\n    let { queryEngineName: r1 } = e1;\n    return `${Xe(e1)}${Bn(e1)}\n\nThis is likely caused by a bundler that has not copied \"${r1}\" next to the resulting bundle.\nEnsure that \"${r1}\" has been copied next to the bundle or in \"${e1.expectedLocation}\".\n\n${Vn(\"engine-not-found-bundler-investigation\")}\n\n${er(e1)}`;\n}\nfunction fl(e1) {\n    let { runtimeBinaryTarget: r1, generatorBinaryTargets: t1 } = e1, n1 = t1.find((i1)=>i1.native);\n    return `${Xe(e1)}\n\nThis happened because Prisma Client was generated for \"${n1?.value ?? \"unknown\"}\", but the actual deployment required \"${r1}\".\n${jn(e1)}\n\n${er(e1)}`;\n}\nfunction gl(e1) {\n    let { queryEngineName: r1 } = e1;\n    return `${Xe(e1)}${Bn(e1)}\n\nThis is likely caused by tooling that has not copied \"${r1}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${r1}\" has been copied to \"${e1.expectedLocation}\".\n\n${Vn(\"engine-not-found-tooling-investigation\")}\n\n${er(e1)}`;\n}\nvar Xm = N(\"prisma:client:engines:resolveEnginePath\"), ef = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function yl(e1, r1) {\n    let t1 = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e1] ?? r1.prismaPath;\n    if (t1 !== void 0) return t1;\n    let { enginePath: n1, searchedLocations: i1 } = await rf(e1, r1);\n    if (Xm(\"enginePath\", n1), n1 !== void 0 && e1 === \"binary\" && vi(n1), n1 !== void 0) return r1.prismaPath = n1;\n    let o1 = await ir(), s1 = r1.generator?.binaryTargets ?? [], a1 = s1.some((d1)=>d1.native), l1 = !s1.some((d1)=>d1.value === o1), u1 = __filename.match(ef()) === null, c1 = {\n        searchedLocations: i1,\n        generatorBinaryTargets: s1,\n        generator: r1.generator,\n        runtimeBinaryTarget: o1,\n        queryEngineName: bl(e1, o1),\n        expectedLocation: Tt.default.relative(process.cwd(), r1.dirname),\n        errorStack: new Error().stack\n    }, p1;\n    throw a1 && l1 ? p1 = fl(c1) : l1 ? p1 = dl(c1) : u1 ? p1 = ml(c1) : p1 = gl(c1), new T(p1, r1.clientVersion);\n}\nasync function rf(engineType, config) {\n    let binaryTarget = await ir(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        Tt.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        Tt.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(gs());\n    for (let e of searchLocations){\n        let r = bl(engineType, binaryTarget), t = Tt.default.join(e, r);\n        if (searchedLocations.push(e), hl.default.existsSync(t)) return {\n            enginePath: t,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction bl(e1, r1) {\n    return e1 === \"library\" ? Bt(r1, \"fs\") : `query-engine-${r1}${r1 === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar lo = k(ki());\nfunction El(e1) {\n    return e1 ? e1.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (r1)=>`${r1[0]}5`) : \"\";\n}\nfunction wl(e1) {\n    return e1.split(`\n`).map((r1)=>r1.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar xl = k(Ls());\nfunction vl({ title: e1, user: r1 = \"prisma\", repo: t1 = \"prisma\", template: n1 = \"bug_report.yml\", body: i1 }) {\n    return (0, xl.default)({\n        user: r1,\n        repo: t1,\n        template: n1,\n        title: e1,\n        body: i1\n    });\n}\nfunction Pl({ version: e1, binaryTarget: r1, title: t1, description: n1, engineVersion: i1, database: o1, query: s1 }) {\n    let a1 = Go(6e3 - (s1?.length ?? 0)), l1 = wl((0, lo.default)(a1)), u1 = n1 ? `# Description\n\\`\\`\\`\n${n1}\n\\`\\`\\`` : \"\", c1 = (0, lo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${r1?.padEnd(19)}|\n| Prisma Client   | ${e1?.padEnd(19)}|\n| Query Engine    | ${i1?.padEnd(19)}|\n| Database        | ${o1?.padEnd(19)}|\n\n${u1}\n\n## Logs\n\\`\\`\\`\n${l1}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s1 ? El(s1) : \"\"}\n\\`\\`\\`\n`), p1 = vl({\n        title: t1,\n        body: c1\n    });\n    return `${t1}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${Y(p1)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction jr({ inlineDatasources: e1, overrideDatasources: r1, env: t1, clientVersion: n1 }) {\n    let i1, o1 = Object.keys(e1)[0], s1 = e1[o1]?.url, a1 = r1[o1]?.url;\n    if (o1 === void 0 ? i1 = void 0 : a1 ? i1 = a1 : s1?.value ? i1 = s1.value : s1?.fromEnvVar && (i1 = t1[s1.fromEnvVar]), s1?.fromEnvVar !== void 0 && i1 === void 0) throw new T(`error: Environment variable not found: ${s1.fromEnvVar}.`, n1);\n    if (i1 === void 0) throw new T(\"error: Missing URL environment variable, value, or override.\", n1);\n    return i1;\n}\nvar Un = class extends Error {\n    constructor(r1, t1){\n        super(r1), this.clientVersion = t1.clientVersion, this.cause = t1.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends Un {\n    constructor(r1, t1){\n        super(r1, t1), this.isRetryable = t1.isRetryable ?? !0;\n    }\n};\nfunction R(e1, r1) {\n    return {\n        ...e1,\n        isRetryable: r1\n    };\n}\nvar Vr = class extends se {\n    constructor(r1){\n        super(\"This request must be retried\", R(r1, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nx(Vr, \"ForcedRetryError\");\nvar lr = class extends se {\n    constructor(r1, t1){\n        super(r1, R(t1, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nx(lr, \"InvalidDatasourceError\");\nvar ur = class extends se {\n    constructor(r1, t1){\n        super(r1, R(t1, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nx(ur, \"NotImplementedYetError\");\nvar $ = class extends se {\n    constructor(r1, t1){\n        super(r1, t1), this.response = t1.response;\n        let n1 = this.response.headers.get(\"prisma-request-id\");\n        if (n1) {\n            let i1 = `(The request id was: ${n1})`;\n            this.message = this.message + \" \" + i1;\n        }\n    }\n};\nvar cr = class extends $ {\n    constructor(r1){\n        super(\"Schema needs to be uploaded\", R(r1, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nx(cr, \"SchemaMissingError\");\nvar uo = \"This request could not be understood by the server\", St = class extends $ {\n    constructor(r1, t1, n1){\n        var _temp;\n        _temp = super(t1 || uo, R(r1, !1)), this.name = \"BadRequestError\", this.code = \"P5000\", _temp, n1 && (this.code = n1);\n    }\n};\nx(St, \"BadRequestError\");\nvar Rt = class extends $ {\n    constructor(r1, t1){\n        var _temp;\n        _temp = super(\"Engine not started: healthcheck timeout\", R(r1, !0)), this.name = \"HealthcheckTimeoutError\", this.code = \"P5013\", _temp, this.logs = t1;\n    }\n};\nx(Rt, \"HealthcheckTimeoutError\");\nvar Ct = class extends $ {\n    constructor(r1, t1, n1){\n        var _temp;\n        _temp = super(t1, R(r1, !0)), this.name = \"EngineStartupError\", this.code = \"P5014\", _temp, this.logs = n1;\n    }\n};\nx(Ct, \"EngineStartupError\");\nvar At = class extends $ {\n    constructor(r1){\n        super(\"Engine version is not supported\", R(r1, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nx(At, \"EngineVersionNotSupportedError\");\nvar co = \"Request timed out\", It = class extends $ {\n    constructor(r1, t1 = co){\n        super(t1, R(r1, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nx(It, \"GatewayTimeoutError\");\nvar tf = \"Interactive transaction error\", kt = class extends $ {\n    constructor(r1, t1 = tf){\n        super(t1, R(r1, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nx(kt, \"InteractiveTransactionError\");\nvar nf = \"Request parameters are invalid\", Ot = class extends $ {\n    constructor(r1, t1 = nf){\n        super(t1, R(r1, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nx(Ot, \"InvalidRequestError\");\nvar po = \"Requested resource does not exist\", Dt = class extends $ {\n    constructor(r1, t1 = po){\n        super(t1, R(r1, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nx(Dt, \"NotFoundError\");\nvar mo = \"Unknown server error\", Br = class extends $ {\n    constructor(r1, t1, n1){\n        var _temp;\n        _temp = super(t1 || mo, R(r1, !0)), this.name = \"ServerError\", this.code = \"P5006\", _temp, this.logs = n1;\n    }\n};\nx(Br, \"ServerError\");\nvar fo = \"Unauthorized, check your connection string\", _t = class extends $ {\n    constructor(r1, t1 = fo){\n        super(t1, R(r1, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nx(_t, \"UnauthorizedError\");\nvar go = \"Usage exceeded, retry again later\", Nt = class extends $ {\n    constructor(r1, t1 = go){\n        super(t1, R(r1, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nx(Nt, \"UsageExceededError\");\nasync function of(e1) {\n    let r1;\n    try {\n        r1 = await e1.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let t1 = JSON.parse(r1);\n        if (typeof t1 == \"string\") switch(t1){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: t1\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: t1\n                };\n        }\n        if (typeof t1 == \"object\" && t1 !== null) {\n            if (\"is_panic\" in t1 && \"message\" in t1 && \"error_code\" in t1) return {\n                type: \"QueryEngineError\",\n                body: t1\n            };\n            if (\"EngineNotStarted\" in t1 || \"InteractiveTransactionMisrouted\" in t1 || \"InvalidRequestError\" in t1) {\n                let n1 = Object.values(t1)[0].reason;\n                return typeof n1 == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n1) ? {\n                    type: \"UnknownJsonError\",\n                    body: t1\n                } : {\n                    type: \"DataProxyError\",\n                    body: t1\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: t1\n        };\n    } catch  {\n        return r1 === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: r1\n        };\n    }\n}\nasync function Lt(e1, r1) {\n    if (e1.ok) return;\n    let t1 = {\n        clientVersion: r1,\n        response: e1\n    }, n1 = await of(e1);\n    if (n1.type === \"QueryEngineError\") throw new z(n1.body.message, {\n        code: n1.body.error_code,\n        clientVersion: r1\n    });\n    if (n1.type === \"DataProxyError\") {\n        if (n1.body === \"InternalDataProxyError\") throw new Br(t1, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n1.body) {\n            if (n1.body.EngineNotStarted.reason === \"SchemaMissing\") return new cr(t1);\n            if (n1.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new At(t1);\n            if (\"EngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, logs: o1 } = n1.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ct(t1, i1, o1);\n            }\n            if (\"KnownEngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, error_code: o1 } = n1.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new T(i1, r1, o1);\n            }\n            if (\"HealthcheckTimeout\" in n1.body.EngineNotStarted.reason) {\n                let { logs: i1 } = n1.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Rt(t1, i1);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n1.body) {\n            let i1 = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new kt(t1, i1[n1.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n1.body) throw new Ot(t1, n1.body.InvalidRequestError.reason);\n    }\n    if (e1.status === 401 || e1.status === 403) throw new _t(t1, Ur(fo, n1));\n    if (e1.status === 404) return new Dt(t1, Ur(po, n1));\n    if (e1.status === 429) throw new Nt(t1, Ur(go, n1));\n    if (e1.status === 504) throw new It(t1, Ur(co, n1));\n    if (e1.status >= 500) throw new Br(t1, Ur(mo, n1));\n    if (e1.status >= 400) throw new St(t1, Ur(uo, n1));\n}\nfunction Ur(e1, r1) {\n    return r1.type === \"EmptyError\" ? e1 : `${e1}: ${JSON.stringify(r1)}`;\n}\nfunction Tl(e1) {\n    let r1 = Math.pow(2, e1) * 50, t1 = Math.ceil(Math.random() * r1) - Math.ceil(r1 / 2), n1 = r1 + t1;\n    return new Promise((i1)=>setTimeout(()=>i1(n1), n1));\n}\nvar Me = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction Sl(e1) {\n    let r1 = new TextEncoder().encode(e1), t1 = \"\", n1 = r1.byteLength, i1 = n1 % 3, o1 = n1 - i1, s1, a1, l1, u1, c1;\n    for(let p1 = 0; p1 < o1; p1 = p1 + 3)c1 = r1[p1] << 16 | r1[p1 + 1] << 8 | r1[p1 + 2], s1 = (c1 & 16515072) >> 18, a1 = (c1 & 258048) >> 12, l1 = (c1 & 4032) >> 6, u1 = c1 & 63, t1 += Me[s1] + Me[a1] + Me[l1] + Me[u1];\n    return i1 == 1 ? (c1 = r1[o1], s1 = (c1 & 252) >> 2, a1 = (c1 & 3) << 4, t1 += Me[s1] + Me[a1] + \"==\") : i1 == 2 && (c1 = r1[o1] << 8 | r1[o1 + 1], s1 = (c1 & 64512) >> 10, a1 = (c1 & 1008) >> 4, l1 = (c1 & 15) << 2, t1 += Me[s1] + Me[a1] + Me[l1] + \"=\"), t1;\n}\nfunction Rl(e1) {\n    if (!!e1.generator?.previewFeatures.some((t1)=>t1.toLowerCase().includes(\"metrics\"))) throw new T(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e1.clientVersion);\n}\nfunction sf(e1) {\n    return e1[0] * 1e3 + e1[1] / 1e6;\n}\nfunction ho(e1) {\n    return new Date(sf(e1));\n}\nvar Cl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"6.6.0-53.f676762280b54cd07c770017ed3711ddde35f37a\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Ft = class extends se {\n    constructor(r1, t1){\n        super(`Cannot fetch data from service:\n${r1}`, R(t1, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nx(Ft, \"RequestError\");\nasync function pr(e1, r1, t1 = (n1)=>n1) {\n    let { clientVersion: n1, ...i1 } = r1, o1 = t1(fetch);\n    try {\n        return await o1(e1, i1);\n    } catch (s1) {\n        let a1 = s1.message ?? \"Unknown error\";\n        throw new Ft(a1, {\n            clientVersion: n1,\n            cause: s1\n        });\n    }\n}\nvar lf = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, Al = N(\"prisma:client:dataproxyEngine\");\nasync function uf(e1, r1) {\n    let t1 = Cl[\"@prisma/engines-version\"], n1 = r1.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e1.includes(\"accelerate\") && n1 !== \"0.0.0\" && n1 !== \"in-memory\") return n1;\n    let [i1, o1] = n1?.split(\"-\") ?? [];\n    if (o1 === void 0 && lf.test(i1)) return i1;\n    if (o1 !== void 0 || n1 === \"0.0.0\" || n1 === \"in-memory\") {\n        if (e1.startsWith(\"localhost\") || e1.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s1] = t1.split(\"-\") ?? [], [a1, l1, u1] = s1.split(\".\"), c1 = cf(`<=${a1}.${l1}.${u1}`), p1 = await pr(c1, {\n            clientVersion: n1\n        });\n        if (!p1.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p1.status} ${p1.statusText}, response body: ${await p1.text() || \"<empty body>\"}`);\n        let d1 = await p1.text();\n        Al(\"length of body fetched from unpkg.com\", d1.length);\n        let f1;\n        try {\n            f1 = JSON.parse(d1);\n        } catch (g1) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d1), g1;\n        }\n        return f1.version;\n    }\n    throw new ur(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n1\n    });\n}\nasync function Il(e1, r1) {\n    let t1 = await uf(e1, r1);\n    return Al(\"version\", t1), t1;\n}\nfunction cf(e1) {\n    return encodeURI(`https://unpkg.com/prisma@${e1}/package.json`);\n}\nvar kl = 3, Gn = N(\"prisma:client:dataproxyEngine\"), yo = class {\n    constructor({ apiKey: r1, tracingHelper: t1, logLevel: n1, logQueries: i1, engineHash: o1 }){\n        this.apiKey = r1, this.tracingHelper = t1, this.logLevel = n1, this.logQueries = i1, this.engineHash = o1;\n    }\n    build({ traceparent: r1, interactiveTransaction: t1 } = {}) {\n        let n1 = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n1.traceparent = r1 ?? this.tracingHelper.getTraceParent()), t1 && (n1[\"X-transaction-id\"] = t1.id);\n        let i1 = this.buildCaptureSettings();\n        return i1.length > 0 && (n1[\"X-capture-telemetry\"] = i1.join(\", \")), n1;\n    }\n    buildCaptureSettings() {\n        let r1 = [];\n        return this.tracingHelper.isEnabled() && r1.push(\"tracing\"), this.logLevel && r1.push(this.logLevel), this.logQueries && r1.push(\"query\"), r1;\n    }\n}, Mt = class {\n    constructor(r1){\n        this.name = \"DataProxyEngine\";\n        Rl(r1), this.config = r1, this.env = {\n            ...r1.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = Sl(r1.inlineSchema), this.inlineDatasources = r1.inlineDatasources, this.inlineSchemaHash = r1.inlineSchemaHash, this.clientVersion = r1.clientVersion, this.engineHash = r1.engineVersion, this.logEmitter = r1.logEmitter, this.tracingHelper = r1.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [r1, t1] = this.extractHostAndApiKey();\n            this.host = r1, this.headerBuilder = new yo({\n                apiKey: t1,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await Il(r1, this.config), Gn(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(r1) {\n        r1?.logs?.length && r1.logs.forEach((t1)=>{\n            switch(t1.level){\n                case \"debug\":\n                case \"trace\":\n                    Gn(t1);\n                    break;\n                case \"error\":\n                case \"warn\":\n                case \"info\":\n                    {\n                        this.logEmitter.emit(t1.level, {\n                            timestamp: ho(t1.timestamp),\n                            message: t1.attributes.message ?? \"\",\n                            target: t1.target\n                        });\n                        break;\n                    }\n                case \"query\":\n                    {\n                        this.logEmitter.emit(\"query\", {\n                            query: t1.attributes.query ?? \"\",\n                            timestamp: ho(t1.timestamp),\n                            duration: t1.attributes.duration_ms ?? 0,\n                            params: t1.attributes.params ?? \"\",\n                            target: t1.target\n                        });\n                        break;\n                    }\n                default:\n                    t1.level;\n            }\n        }), r1?.traces?.length && this.tracingHelper.dispatchEngineSpans(r1.traces);\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(r1) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${r1}`;\n    }\n    async uploadSchema() {\n        let r1 = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(r1, async ()=>{\n            let t1 = await pr(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            t1.ok || Gn(\"schema response status\", t1.status);\n            let n1 = await Lt(t1, this.clientVersion);\n            if (n1) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n1.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n1;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(r1, { traceparent: t1, interactiveTransaction: n1, customDataProxyFetch: i1 }) {\n        return this.requestInternal({\n            body: r1,\n            traceparent: t1,\n            interactiveTransaction: n1,\n            customDataProxyFetch: i1\n        });\n    }\n    async requestBatch(r1, { traceparent: t1, transaction: n1, customDataProxyFetch: i1 }) {\n        let o1 = n1?.kind === \"itx\" ? n1.options : void 0, s1 = Mr(r1, n1);\n        return (await this.requestInternal({\n            body: s1,\n            customDataProxyFetch: i1,\n            interactiveTransaction: o1,\n            traceparent: t1\n        })).map((l1)=>(l1.extensions && this.propagateResponseExtensions(l1.extensions), \"errors\" in l1 ? this.convertProtocolErrorsToClientError(l1.errors) : l1));\n    }\n    requestInternal({ body: r1, traceparent: t1, customDataProxyFetch: n1, interactiveTransaction: i1 }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o1 })=>{\n                let s1 = i1 ? `${i1.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o1(s1);\n                let a1 = await pr(s1, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: t1,\n                        interactiveTransaction: i1\n                    }),\n                    body: JSON.stringify(r1),\n                    clientVersion: this.clientVersion\n                }, n1);\n                a1.ok || Gn(\"graphql response status\", a1.status), await this.handleError(await Lt(a1, this.clientVersion));\n                let l1 = await a1.json();\n                if (l1.extensions && this.propagateResponseExtensions(l1.extensions), \"errors\" in l1) throw this.convertProtocolErrorsToClientError(l1.errors);\n                return \"batchResult\" in l1 ? l1.batchResult : l1;\n            }\n        });\n    }\n    async transaction(r1, t1, n1) {\n        let i1 = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i1[r1]} transaction`,\n            callback: async ({ logHttpCall: o1 })=>{\n                if (r1 === \"start\") {\n                    let s1 = JSON.stringify({\n                        max_wait: n1.maxWait,\n                        timeout: n1.timeout,\n                        isolation_level: n1.isolationLevel\n                    }), a1 = await this.url(\"transaction/start\");\n                    o1(a1);\n                    let l1 = await pr(a1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t1.traceparent\n                        }),\n                        body: s1,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Lt(l1, this.clientVersion));\n                    let u1 = await l1.json(), { extensions: c1 } = u1;\n                    c1 && this.propagateResponseExtensions(c1);\n                    let p1 = u1.id, d1 = u1[\"data-proxy\"].endpoint;\n                    return {\n                        id: p1,\n                        payload: {\n                            endpoint: d1\n                        }\n                    };\n                } else {\n                    let s1 = `${n1.payload.endpoint}/${r1}`;\n                    o1(s1);\n                    let a1 = await pr(s1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: t1.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Lt(a1, this.clientVersion));\n                    let l1 = await a1.json(), { extensions: u1 } = l1;\n                    u1 && this.propagateResponseExtensions(u1);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let r1 = {\n            clientVersion: this.clientVersion\n        }, t1 = Object.keys(this.inlineDatasources)[0], n1 = jr({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i1;\n        try {\n            i1 = new URL(n1);\n        } catch  {\n            throw new lr(`Error validating datasource \\`${t1}\\`: the URL must start with the protocol \\`prisma://\\``, r1);\n        }\n        let { protocol: o1, host: s1, searchParams: a1 } = i1;\n        if (o1 !== \"prisma:\" && o1 !== en) throw new lr(`Error validating datasource \\`${t1}\\`: the URL must start with the protocol \\`prisma://\\``, r1);\n        let l1 = a1.get(\"api_key\");\n        if (l1 === null || l1.length < 1) throw new lr(`Error validating datasource \\`${t1}\\`: the URL must contain a valid API key`, r1);\n        return [\n            s1,\n            l1\n        ];\n    }\n    metrics() {\n        throw new ur(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(r1) {\n        for(let t1 = 0;; t1++){\n            let n1 = (i1)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i1} (n=${t1})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await r1.callback({\n                    logHttpCall: n1\n                });\n            } catch (i1) {\n                if (!(i1 instanceof se) || !i1.isRetryable) throw i1;\n                if (t1 >= kl) throw i1 instanceof Vr ? i1.cause : i1;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${t1 + 1}/${kl} failed for ${r1.actionGerund}: ${i1.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o1 = await Tl(t1);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o1}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(r1) {\n        if (r1 instanceof cr) throw await this.uploadSchema(), new Vr({\n            clientVersion: this.clientVersion,\n            cause: r1\n        });\n        if (r1) throw r1;\n    }\n    convertProtocolErrorsToClientError(r1) {\n        return r1.length === 1 ? $r(r1[0], this.config.clientVersion, this.config.activeProvider) : new j(JSON.stringify(r1), {\n            clientVersion: this.config.clientVersion\n        });\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction bo(e1) {\n    return e1.name === \"DriverAdapterError\" && typeof e1.cause == \"object\";\n}\nfunction Qn(e1) {\n    return {\n        ok: !0,\n        value: e1,\n        map (r1) {\n            return Qn(r1(e1));\n        },\n        flatMap (r1) {\n            return r1(e1);\n        }\n    };\n}\nfunction dr(e1) {\n    return {\n        ok: !1,\n        error: e1,\n        map () {\n            return dr(e1);\n        },\n        flatMap () {\n            return dr(e1);\n        }\n    };\n}\nvar Ol = N(\"driver-adapter-utils\"), Eo = class {\n    consumeError(r1) {\n        return this.registeredErrors[r1];\n    }\n    registerNewError(r1) {\n        let t1 = 0;\n        for(; this.registeredErrors[t1] !== void 0;)t1++;\n        return this.registeredErrors[t1] = {\n            error: r1\n        }, t1;\n    }\n    constructor(){\n        this.registeredErrors = [];\n    }\n};\nvar wo = (e1, r1 = new Eo)=>{\n    let t1 = {\n        adapterName: e1.adapterName,\n        errorRegistry: r1,\n        queryRaw: $e(r1, e1.queryRaw.bind(e1)),\n        executeRaw: $e(r1, e1.executeRaw.bind(e1)),\n        executeScript: $e(r1, e1.executeScript.bind(e1)),\n        dispose: $e(r1, e1.dispose.bind(e1)),\n        provider: e1.provider,\n        startTransaction: async (...n1)=>(await $e(r1, e1.startTransaction.bind(e1))(...n1)).map((o1)=>pf(r1, o1))\n    };\n    return e1.getConnectionInfo && (t1.getConnectionInfo = df(r1, e1.getConnectionInfo.bind(e1))), t1;\n}, pf = (e1, r1)=>({\n        adapterName: r1.adapterName,\n        provider: r1.provider,\n        options: r1.options,\n        queryRaw: $e(e1, r1.queryRaw.bind(r1)),\n        executeRaw: $e(e1, r1.executeRaw.bind(r1)),\n        commit: $e(e1, r1.commit.bind(r1)),\n        rollback: $e(e1, r1.rollback.bind(r1))\n    });\nfunction $e(e1, r1) {\n    return async (...t1)=>{\n        try {\n            return Qn(await r1(...t1));\n        } catch (n1) {\n            if (Ol(\"[error@wrapAsync]\", n1), bo(n1)) return dr(n1.cause);\n            let i1 = e1.registerNewError(n1);\n            return dr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nfunction df(e1, r1) {\n    return (...t1)=>{\n        try {\n            return Qn(r1(...t1));\n        } catch (n1) {\n            if (Ol(\"[error@wrapSync]\", n1), bo(n1)) return dr(n1.cause);\n            let i1 = e1.registerNewError(n1);\n            return dr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nfunction Dl(e1) {\n    if (e1?.kind === \"itx\") return e1.options.id;\n}\nvar vo = k(__webpack_require__(/*! node:os */ \"node:os\")), _l = k(__webpack_require__(/*! node:path */ \"node:path\"));\nvar xo = Symbol(\"PrismaLibraryEngineCache\");\nfunction mf() {\n    let e1 = globalThis;\n    return e1[xo] === void 0 && (e1[xo] = {}), e1[xo];\n}\nfunction ff(e1) {\n    let r1 = mf();\n    if (r1[e1] !== void 0) return r1[e1];\n    let t1 = _l.default.toNamespacedPath(e1), n1 = {\n        exports: {}\n    }, i1 = 0;\n    return process.platform !== \"win32\" && (i1 = vo.default.constants.dlopen.RTLD_LAZY | vo.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n1, t1, i1), r1[e1] = n1.exports, n1.exports;\n}\nvar Nl = {\n    async loadLibrary (e1) {\n        let r1 = await pi(), t1 = await yl(\"library\", e1);\n        try {\n            return e1.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>ff(t1));\n        } catch (n1) {\n            let i1 = Pi({\n                e: n1,\n                platformInfo: r1,\n                id: t1\n            });\n            throw new T(i1, e1.clientVersion);\n        }\n    }\n};\nvar Po, Ll = {\n    async loadLibrary (e1) {\n        let { clientVersion: r1, adapter: t1, engineWasm: n1 } = e1;\n        if (t1 === void 0) throw new T(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${qn().prettyName})`, r1);\n        if (n1 === void 0) throw new T(\"WASM engine was unexpectedly `undefined`\", r1);\n        Po === void 0 && (Po = (async ()=>{\n            let o1 = await n1.getRuntime(), s1 = await n1.getQueryEngineWasmModule();\n            if (s1 == null) throw new T(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r1);\n            let a1 = {\n                \"./query_engine_bg.js\": o1\n            }, l1 = new WebAssembly.Instance(s1, a1), u1 = l1.exports.__wbindgen_start;\n            return o1.__wbg_set_wasm(l1.exports), u1(), o1.QueryEngine;\n        })());\n        let i1 = await Po;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i1\n        };\n    }\n};\nvar gf = \"P2036\", Ce = N(\"prisma:client:libraryEngine\");\nfunction hf(e1) {\n    return e1.item_type === \"query\" && \"query\" in e1;\n}\nfunction yf(e1) {\n    return \"level\" in e1 ? e1.level === \"error\" && e1.message === \"PANIC\" : !1;\n}\nvar Fl = [\n    ...oi,\n    \"native\"\n], bf = 0xffffffffffffffffn, To = 1n;\nfunction Ef() {\n    let e1 = To++;\n    return To > bf && (To = 1n), e1;\n}\nvar Gr = class {\n    constructor(r1, t1){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = t1 ?? Nl, r1.engineWasm !== void 0 && (this.libraryLoader = t1 ?? Ll), this.config = r1, this.libraryStarted = !1, this.logQueries = r1.logQueries ?? !1, this.logLevel = r1.logLevel ?? \"error\", this.logEmitter = r1.logEmitter, this.datamodel = r1.inlineSchema, this.tracingHelper = r1.tracingHelper, r1.enableDebugLogs && (this.logLevel = \"debug\");\n        let n1 = Object.keys(r1.overrideDatasources)[0], i1 = r1.overrideDatasources[n1]?.url;\n        n1 !== void 0 && i1 !== void 0 && (this.datasourceOverrides = {\n            [n1]: i1\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    wrapEngine(r1) {\n        return {\n            applyPendingMigrations: r1.applyPendingMigrations?.bind(r1),\n            commitTransaction: this.withRequestId(r1.commitTransaction.bind(r1)),\n            connect: this.withRequestId(r1.connect.bind(r1)),\n            disconnect: this.withRequestId(r1.disconnect.bind(r1)),\n            metrics: r1.metrics?.bind(r1),\n            query: this.withRequestId(r1.query.bind(r1)),\n            rollbackTransaction: this.withRequestId(r1.rollbackTransaction.bind(r1)),\n            sdlSchema: r1.sdlSchema?.bind(r1),\n            startTransaction: this.withRequestId(r1.startTransaction.bind(r1)),\n            trace: r1.trace.bind(r1)\n        };\n    }\n    withRequestId(r1) {\n        return async (...t1)=>{\n            let n1 = Ef().toString();\n            try {\n                return await r1(...t1, n1);\n            } finally{\n                if (this.tracingHelper.isEnabled()) {\n                    let i1 = await this.engine?.trace(n1);\n                    if (i1) {\n                        let o1 = JSON.parse(i1);\n                        this.tracingHelper.dispatchEngineSpans(o1.spans);\n                    }\n                }\n            }\n        };\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(r1, t1, n1) {\n        await this.start();\n        let i1 = await this.adapterPromise, o1 = JSON.stringify(t1), s1;\n        if (r1 === \"start\") {\n            let l1 = JSON.stringify({\n                max_wait: n1.maxWait,\n                timeout: n1.timeout,\n                isolation_level: n1.isolationLevel\n            });\n            s1 = await this.engine?.startTransaction(l1, o1);\n        } else r1 === \"commit\" ? s1 = await this.engine?.commitTransaction(n1.id, o1) : r1 === \"rollback\" && (s1 = await this.engine?.rollbackTransaction(n1.id, o1));\n        let a1 = this.parseEngineResponse(s1);\n        if (wf(a1)) {\n            let l1 = this.getExternalAdapterError(a1, i1?.errorRegistry);\n            throw l1 ? l1.error : new z(a1.message, {\n                code: a1.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: a1.meta\n            });\n        } else if (typeof a1.message == \"string\") throw new j(a1.message, {\n            clientVersion: this.config.clientVersion\n        });\n        return a1;\n    }\n    async instantiateLibrary() {\n        if (Ce(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        ii(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.tracingHelper.runInChildSpan(\"load_engine\", ()=>this.loadEngine()), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let r1 = await this.tracingHelper.runInChildSpan(\"detect_platform\", ()=>ir());\n            if (!Fl.includes(r1)) throw new T(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(W(r1))}. Possible binaryTargets: ${qe(Fl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return r1;\n        }\n    }\n    parseEngineResponse(r1) {\n        if (!r1) throw new j(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(r1);\n        } catch  {\n            throw new j(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let r1 = new WeakRef(this);\n                this.adapterPromise || (this.adapterPromise = this.config.adapter?.connect()?.then(wo));\n                let t1 = await this.adapterPromise;\n                t1 && Ce(\"Using driver adapter: %O\", t1), this.engine = this.wrapEngine(new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\",\n                    enableTracing: this.tracingHelper.isEnabled()\n                }, (n1)=>{\n                    r1.deref()?.logger(n1);\n                }, t1));\n            } catch (r1) {\n                let t1 = r1, n1 = this.parseInitError(t1.message);\n                throw typeof n1 == \"string\" ? t1 : new T(n1.message, this.config.clientVersion, n1.error_code);\n            }\n        }\n    }\n    logger(r1) {\n        let t1 = this.parseEngineResponse(r1);\n        t1 && (t1.level = t1?.level.toLowerCase() ?? \"unknown\", hf(t1) ? this.logEmitter.emit(\"query\", {\n            timestamp: new Date,\n            query: t1.query,\n            params: t1.params,\n            duration: Number(t1.duration_ms),\n            target: t1.module_path\n        }) : yf(t1) ? this.loggerRustPanic = new le(So(this, `${t1.message}: ${t1.reason} in ${t1.file}:${t1.line}:${t1.column}`), this.config.clientVersion) : this.logEmitter.emit(t1.level, {\n            timestamp: new Date,\n            message: t1.message,\n            target: t1.module_path\n        }));\n    }\n    parseInitError(r1) {\n        try {\n            return JSON.parse(r1);\n        } catch  {}\n        return r1;\n    }\n    parseRequestError(r1) {\n        try {\n            return JSON.parse(r1);\n        } catch  {}\n        return r1;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let r1 = async ()=>{\n            Ce(\"library starting\");\n            try {\n                let t1 = {\n                    traceparent: this.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(t1)), this.libraryStarted = !0, Ce(\"library started\");\n            } catch (t1) {\n                let n1 = this.parseInitError(t1.message);\n                throw typeof n1 == \"string\" ? t1 : new T(n1.message, this.config.clientVersion, n1.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.tracingHelper.runInChildSpan(\"connect\", r1), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ce(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let r1 = async ()=>{\n            await new Promise((n1)=>setTimeout(n1, 5)), Ce(\"library stopping\");\n            let t1 = {\n                traceparent: this.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(t1)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, await (await this.adapterPromise)?.dispose(), this.adapterPromise = void 0, Ce(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.tracingHelper.runInChildSpan(\"disconnect\", r1), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(r1) {\n        return this.library?.debugPanic(r1);\n    }\n    async request(r1, { traceparent: t1, interactiveTransaction: n1 }) {\n        Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i1 = JSON.stringify({\n            traceparent: t1\n        }), o1 = JSON.stringify(r1);\n        try {\n            await this.start();\n            let s1 = await this.adapterPromise;\n            this.executingQueryPromise = this.engine?.query(o1, i1, n1?.id), this.lastQuery = o1;\n            let a1 = this.parseEngineResponse(await this.executingQueryPromise);\n            if (a1.errors) throw a1.errors.length === 1 ? this.buildQueryError(a1.errors[0], s1?.errorRegistry) : new j(JSON.stringify(a1.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: a1\n            };\n        } catch (s1) {\n            if (s1 instanceof T) throw s1;\n            if (s1.code === \"GenericFailure\" && s1.message?.startsWith(\"PANIC:\")) throw new le(So(this, s1.message), this.config.clientVersion);\n            let a1 = this.parseRequestError(s1.message);\n            throw typeof a1 == \"string\" ? s1 : new j(`${a1.message}\n${a1.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(r1, { transaction: t1, traceparent: n1 }) {\n        Ce(\"requestBatch\");\n        let i1 = Mr(r1, t1);\n        await this.start();\n        let o1 = await this.adapterPromise;\n        this.lastQuery = JSON.stringify(i1), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n1\n        }), Dl(t1));\n        let s1 = await this.executingQueryPromise, a1 = this.parseEngineResponse(s1);\n        if (a1.errors) throw a1.errors.length === 1 ? this.buildQueryError(a1.errors[0], o1?.errorRegistry) : new j(JSON.stringify(a1.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: l1, errors: u1 } = a1;\n        if (Array.isArray(l1)) return l1.map((c1)=>c1.errors && c1.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(c1.errors[0], o1?.errorRegistry) : {\n                data: c1\n            });\n        throw u1 && u1.length === 1 ? new Error(u1[0].error) : new Error(JSON.stringify(a1));\n    }\n    buildQueryError(r1, t1) {\n        if (r1.user_facing_error.is_panic) return new le(So(this, r1.user_facing_error.message), this.config.clientVersion);\n        let n1 = this.getExternalAdapterError(r1.user_facing_error, t1);\n        return n1 ? n1.error : $r(r1, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(r1, t1) {\n        if (r1.error_code === gf && t1) {\n            let n1 = r1.meta?.id;\n            rn(typeof n1 == \"number\", \"Malformed external JS error received from the engine\");\n            let i1 = t1.consumeError(n1);\n            return rn(i1, \"External error with reported id was not registered\"), i1;\n        }\n    }\n    async metrics(r1) {\n        await this.start();\n        let t1 = await this.engine.metrics(JSON.stringify(r1));\n        return r1.format === \"prometheus\" ? t1 : this.parseEngineResponse(t1);\n    }\n};\nfunction wf(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.error_code !== void 0;\n}\nfunction So(e1, r1) {\n    return Pl({\n        binaryTarget: e1.binaryTarget,\n        title: r1,\n        version: e1.config.clientVersion,\n        engineVersion: e1.versionInfo?.commit,\n        database: e1.config.activeProvider,\n        query: e1.lastQuery\n    });\n}\nfunction Ml({ copyEngine: e1 = !0 }, r1) {\n    let t1;\n    try {\n        t1 = jr({\n            inlineDatasources: r1.inlineDatasources,\n            overrideDatasources: r1.overrideDatasources,\n            env: {\n                ...r1.env,\n                ...process.env\n            },\n            clientVersion: r1.clientVersion\n        });\n    } catch  {}\n    let n1 = !!(t1?.startsWith(\"prisma://\") || Si(t1));\n    e1 && n1 && ot(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i1 = Er(r1.generator), o1 = n1 || !e1, s1 = !!r1.adapter, a1 = i1 === \"library\", l1 = i1 === \"binary\", u1 = i1 === \"client\";\n    if (o1 && s1 || s1 && !1) {\n        let c1;\n        throw e1 ? t1?.startsWith(\"prisma://\") ? c1 = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : c1 = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : c1 = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new Z(c1.join(`\n`), {\n            clientVersion: r1.clientVersion\n        });\n    }\n    return o1 ? new Mt(r1) : a1 ? new Gr(r1) : new Gr(r1);\n}\nfunction Wn({ generator: e1 }) {\n    return e1?.previewFeatures ?? [];\n}\nvar $l = (e1)=>({\n        command: e1\n    });\nvar ql = (e1)=>e1.strings.reduce((r1, t1, n1)=>`${r1}@P${n1}${t1}`);\nfunction Qr(e1) {\n    try {\n        return jl(e1, \"fast\");\n    } catch  {\n        return jl(e1, \"slow\");\n    }\n}\nfunction jl(e1, r1) {\n    return JSON.stringify(e1.map((t1)=>Bl(t1, r1)));\n}\nfunction Bl(e1, r1) {\n    if (Array.isArray(e1)) return e1.map((t1)=>Bl(t1, r1));\n    if (typeof e1 == \"bigint\") return {\n        prisma__type: \"bigint\",\n        prisma__value: e1.toString()\n    };\n    if (Sr(e1)) return {\n        prisma__type: \"date\",\n        prisma__value: e1.toJSON()\n    };\n    if (ve.isDecimal(e1)) return {\n        prisma__type: \"decimal\",\n        prisma__value: e1.toJSON()\n    };\n    if (Buffer.isBuffer(e1)) return {\n        prisma__type: \"bytes\",\n        prisma__value: e1.toString(\"base64\")\n    };\n    if (xf(e1)) return {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e1).toString(\"base64\")\n    };\n    if (ArrayBuffer.isView(e1)) {\n        let { buffer: t1, byteOffset: n1, byteLength: i1 } = e1;\n        return {\n            prisma__type: \"bytes\",\n            prisma__value: Buffer.from(t1, n1, i1).toString(\"base64\")\n        };\n    }\n    return typeof e1 == \"object\" && r1 === \"slow\" ? Ul(e1) : e1;\n}\nfunction xf(e1) {\n    return e1 instanceof ArrayBuffer || e1 instanceof SharedArrayBuffer ? !0 : typeof e1 == \"object\" && e1 !== null ? e1[Symbol.toStringTag] === \"ArrayBuffer\" || e1[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Ul(e1) {\n    if (typeof e1 != \"object\" || e1 === null) return e1;\n    if (typeof e1.toJSON == \"function\") return e1.toJSON();\n    if (Array.isArray(e1)) return e1.map(Vl);\n    let r1 = {};\n    for (let t1 of Object.keys(e1))r1[t1] = Vl(e1[t1]);\n    return r1;\n}\nfunction Vl(e1) {\n    return typeof e1 == \"bigint\" ? e1.toString() : Ul(e1);\n}\nvar vf = /^(\\s*alter\\s)/i, Gl = N(\"prisma:client\");\nfunction Ro(e1, r1, t1, n1) {\n    if (!(e1 !== \"postgresql\" && e1 !== \"cockroachdb\") && t1.length > 0 && vf.exec(r1)) throw new Error(`Running ALTER using ${n1} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Co = ({ clientMethod: e1, activeProvider: r1 })=>(t1)=>{\n        let n1 = \"\", i1;\n        if (Nn(t1)) n1 = t1.sql, i1 = {\n            values: Qr(t1.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(t1)) {\n            let [o1, ...s1] = t1;\n            n1 = o1, i1 = {\n                values: Qr(s1 || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(r1){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n1 = t1.sql, i1 = {\n                        values: Qr(t1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n1 = t1.text, i1 = {\n                        values: Qr(t1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n1 = ql(t1), i1 = {\n                        values: Qr(t1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${r1} provider does not support ${e1}`);\n        }\n        return i1?.values ? Gl(`prisma.${e1}(${n1}, ${i1.values})`) : Gl(`prisma.${e1}(${n1})`), {\n            query: n1,\n            parameters: i1\n        };\n    }, Ql = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1.strings,\n            ...e1.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        let [r1, ...t1] = e1;\n        return new oe(r1, t1);\n    }\n}, Wl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        return e1[0];\n    }\n};\nfunction Ao(e1) {\n    return function(t1, n1) {\n        let i1, o1 = (s1 = e1)=>{\n            try {\n                return s1 === void 0 || s1?.kind === \"itx\" ? i1 ??= Jl(t1(s1)) : Jl(t1(s1));\n            } catch (a1) {\n                return Promise.reject(a1);\n            }\n        };\n        return {\n            get spec () {\n                return n1;\n            },\n            then (s1, a1) {\n                return o1().then(s1, a1);\n            },\n            catch (s1) {\n                return o1().catch(s1);\n            },\n            finally (s1) {\n                return o1().finally(s1);\n            },\n            requestTransaction (s1) {\n                let a1 = o1(s1);\n                return a1.requestTransaction ? a1.requestTransaction(s1) : a1;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Jl(e1) {\n    return typeof e1.then == \"function\" ? e1 : Promise.resolve(e1);\n}\nvar Pf = bi.split(\".\")[0], Tf = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    dispatchEngineSpans () {},\n    getActiveContext () {},\n    runInChildSpan (e1, r1) {\n        return r1();\n    }\n}, Io = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(r1) {\n        return this.getGlobalTracingHelper().getTraceParent(r1);\n    }\n    dispatchEngineSpans(r1) {\n        return this.getGlobalTracingHelper().dispatchEngineSpans(r1);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(r1, t1) {\n        return this.getGlobalTracingHelper().runInChildSpan(r1, t1);\n    }\n    getGlobalTracingHelper() {\n        let r1 = globalThis[`V${Pf}_PRISMA_INSTRUMENTATION`], t1 = globalThis.PRISMA_INSTRUMENTATION;\n        return r1?.helper ?? t1?.helper ?? Tf;\n    }\n};\nfunction Hl() {\n    return new Io;\n}\nfunction Kl(e1, r1 = ()=>{}) {\n    let t1, n1 = new Promise((i1)=>t1 = i1);\n    return {\n        then (i1) {\n            return --e1 === 0 && t1(r1()), i1?.(n1);\n        }\n    };\n}\nfunction Yl(e1) {\n    return typeof e1 == \"string\" ? e1 : e1.reduce((r1, t1)=>{\n        let n1 = typeof t1 == \"string\" ? t1 : t1.level;\n        return n1 === \"query\" ? r1 : r1 && (t1 === \"info\" || r1 === \"info\") ? \"info\" : n1;\n    }, void 0);\n}\nvar Jn = class {\n    use(r1) {\n        this._middlewares.push(r1);\n    }\n    get(r1) {\n        return this._middlewares[r1];\n    }\n    has(r1) {\n        return !!this._middlewares[r1];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n    constructor(){\n        this._middlewares = [];\n    }\n};\nvar Zl = k(ki());\nfunction Hn(e1) {\n    return typeof e1.batchRequestIdx == \"number\";\n}\nfunction zl(e1) {\n    if (e1.action !== \"findUnique\" && e1.action !== \"findUniqueOrThrow\") return;\n    let r1 = [];\n    return e1.modelName && r1.push(e1.modelName), e1.query.arguments && r1.push(ko(e1.query.arguments)), r1.push(ko(e1.query.selection)), r1.join(\"\");\n}\nfunction ko(e1) {\n    return `(${Object.keys(e1).sort().map((t1)=>{\n        let n1 = e1[t1];\n        return typeof n1 == \"object\" && n1 !== null ? `(${t1} ${ko(n1)})` : t1;\n    }).join(\" \")})`;\n}\nvar Sf = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateManyAndReturn: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction Oo(e1) {\n    return Sf[e1];\n}\nvar Kn = class {\n    constructor(r1){\n        this.tickActive = !1;\n        this.options = r1;\n        this.batches = {};\n    }\n    request(r1) {\n        let t1 = this.options.batchBy(r1);\n        return t1 ? (this.batches[t1] || (this.batches[t1] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n1, i1)=>{\n            this.batches[t1].push({\n                request: r1,\n                resolve: n1,\n                reject: i1\n            });\n        })) : this.options.singleLoader(r1);\n    }\n    dispatchBatches() {\n        for(let r1 in this.batches){\n            let t1 = this.batches[r1];\n            delete this.batches[r1], t1.length === 1 ? this.options.singleLoader(t1[0].request).then((n1)=>{\n                n1 instanceof Error ? t1[0].reject(n1) : t1[0].resolve(n1);\n            }).catch((n1)=>{\n                t1[0].reject(n1);\n            }) : (t1.sort((n1, i1)=>this.options.batchOrder(n1.request, i1.request)), this.options.batchLoader(t1.map((n1)=>n1.request)).then((n1)=>{\n                if (n1 instanceof Error) for(let i1 = 0; i1 < t1.length; i1++)t1[i1].reject(n1);\n                else for(let i1 = 0; i1 < t1.length; i1++){\n                    let o1 = n1[i1];\n                    o1 instanceof Error ? t1[i1].reject(o1) : t1[i1].resolve(o1);\n                }\n            }).catch((n1)=>{\n                for(let i1 = 0; i1 < t1.length; i1++)t1[i1].reject(n1);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction mr(e1, r1) {\n    if (r1 === null) return r1;\n    switch(e1){\n        case \"bigint\":\n            return BigInt(r1);\n        case \"bytes\":\n            {\n                let { buffer: t1, byteOffset: n1, byteLength: i1 } = Buffer.from(r1, \"base64\");\n                return new Uint8Array(t1, n1, i1);\n            }\n        case \"decimal\":\n            return new ve(r1);\n        case \"datetime\":\n        case \"date\":\n            return new Date(r1);\n        case \"time\":\n            return new Date(`1970-01-01T${r1}Z`);\n        case \"bigint-array\":\n            return r1.map((t1)=>mr(\"bigint\", t1));\n        case \"bytes-array\":\n            return r1.map((t1)=>mr(\"bytes\", t1));\n        case \"decimal-array\":\n            return r1.map((t1)=>mr(\"decimal\", t1));\n        case \"datetime-array\":\n            return r1.map((t1)=>mr(\"datetime\", t1));\n        case \"date-array\":\n            return r1.map((t1)=>mr(\"date\", t1));\n        case \"time-array\":\n            return r1.map((t1)=>mr(\"time\", t1));\n        default:\n            return r1;\n    }\n}\nfunction Yn(e1) {\n    let r1 = [], t1 = Rf(e1);\n    for(let n1 = 0; n1 < e1.rows.length; n1++){\n        let i1 = e1.rows[n1], o1 = {\n            ...t1\n        };\n        for(let s1 = 0; s1 < i1.length; s1++)o1[e1.columns[s1]] = mr(e1.types[s1], i1[s1]);\n        r1.push(o1);\n    }\n    return r1;\n}\nfunction Rf(e1) {\n    let r1 = {};\n    for(let t1 = 0; t1 < e1.columns.length; t1++)r1[e1.columns[t1]] = null;\n    return r1;\n}\nvar Cf = N(\"prisma:client:request_handler\"), zn = class {\n    constructor(r1, t1){\n        this.logEmitter = t1, this.client = r1, this.dataloader = new Kn({\n            batchLoader: ol(async ({ requests: n1, customDataProxyFetch: i1 })=>{\n                let { transaction: o1, otelParentCtx: s1 } = n1[0], a1 = n1.map((p1)=>p1.protocolQuery), l1 = this.client._tracingHelper.getTraceParent(s1), u1 = n1.some((p1)=>Oo(p1.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a1, {\n                    traceparent: l1,\n                    transaction: Af(o1),\n                    containsWrite: u1,\n                    customDataProxyFetch: i1\n                })).map((p1, d1)=>{\n                    if (p1 instanceof Error) return p1;\n                    try {\n                        return this.mapQueryEngineResult(n1[d1], p1);\n                    } catch (f1) {\n                        return f1;\n                    }\n                });\n            }),\n            singleLoader: async (n1)=>{\n                let i1 = n1.transaction?.kind === \"itx\" ? Xl(n1.transaction) : void 0, o1 = await this.client._engine.request(n1.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i1,\n                    isWrite: Oo(n1.protocolQuery.action),\n                    customDataProxyFetch: n1.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n1, o1);\n            },\n            batchBy: (n1)=>n1.transaction?.id ? `transaction-${n1.transaction.id}` : zl(n1.protocolQuery),\n            batchOrder (n1, i1) {\n                return n1.transaction?.kind === \"batch\" && i1.transaction?.kind === \"batch\" ? n1.transaction.index - i1.transaction.index : 0;\n            }\n        });\n    }\n    async request(r1) {\n        try {\n            return await this.dataloader.request(r1);\n        } catch (t1) {\n            let { clientMethod: n1, callsite: i1, transaction: o1, args: s1, modelName: a1 } = r1;\n            this.handleAndLogRequestError({\n                error: t1,\n                clientMethod: n1,\n                callsite: i1,\n                transaction: o1,\n                args: s1,\n                modelName: a1,\n                globalOmit: r1.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: r1, unpacker: t1 }, n1) {\n        let i1 = n1?.data, o1 = this.unpack(i1, r1, t1);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: o1\n        } : o1;\n    }\n    handleAndLogRequestError(r1) {\n        try {\n            this.handleRequestError(r1);\n        } catch (t1) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: t1.message,\n                target: r1.clientMethod,\n                timestamp: new Date\n            }), t1;\n        }\n    }\n    handleRequestError({ error: r1, clientMethod: t1, callsite: n1, transaction: i1, args: o1, modelName: s1, globalOmit: a1 }) {\n        if (Cf(r1), If(r1, i1)) throw r1;\n        if (r1 instanceof z && kf(r1)) {\n            let u1 = eu(r1.meta);\n            An({\n                args: o1,\n                errors: [\n                    u1\n                ],\n                callsite: n1,\n                errorFormat: this.client._errorFormat,\n                originalMethod: t1,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a1\n            });\n        }\n        let l1 = r1.message;\n        if (n1 && (l1 = bn({\n            callsite: n1,\n            originalMethod: t1,\n            isPanic: r1.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l1\n        })), l1 = this.sanitizeMessage(l1), r1.code) {\n            let u1 = s1 ? {\n                modelName: s1,\n                ...r1.meta\n            } : r1.meta;\n            throw new z(l1, {\n                code: r1.code,\n                clientVersion: this.client._clientVersion,\n                meta: u1,\n                batchRequestIdx: r1.batchRequestIdx\n            });\n        } else {\n            if (r1.isPanic) throw new le(l1, this.client._clientVersion);\n            if (r1 instanceof j) throw new j(l1, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: r1.batchRequestIdx\n            });\n            if (r1 instanceof T) throw new T(l1, this.client._clientVersion);\n            if (r1 instanceof le) throw new le(l1, this.client._clientVersion);\n        }\n        throw r1.clientVersion = this.client._clientVersion, r1;\n    }\n    sanitizeMessage(r1) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Zl.default)(r1) : r1;\n    }\n    unpack(r1, t1, n1) {\n        if (!r1 || (r1.data && (r1 = r1.data), !r1)) return r1;\n        let i1 = Object.keys(r1)[0], o1 = Object.values(r1)[0], s1 = t1.filter((u1)=>u1 !== \"select\" && u1 !== \"include\"), a1 = io(o1, s1), l1 = i1 === \"queryRaw\" ? Yn(a1) : Tr(a1);\n        return n1 ? n1(l1) : l1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction Af(e1) {\n    if (e1) {\n        if (e1.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e1.isolationLevel\n            }\n        };\n        if (e1.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Xl(e1)\n        };\n        _e(e1, \"Unknown transaction kind\");\n    }\n}\nfunction Xl(e1) {\n    return {\n        id: e1.id,\n        payload: e1.payload\n    };\n}\nfunction If(e1, r1) {\n    return Hn(e1) && r1?.kind === \"batch\" && e1.batchRequestIdx !== r1.index;\n}\nfunction kf(e1) {\n    return e1.code === \"P2009\" || e1.code === \"P2012\";\n}\nfunction eu(e1) {\n    if (e1.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e1.errors.map(eu)\n    };\n    if (Array.isArray(e1.selectionPath)) {\n        let [, ...r1] = e1.selectionPath;\n        return {\n            ...e1,\n            selectionPath: r1\n        };\n    }\n    return e1;\n}\nvar ru = \"6.6.0\";\nvar tu = ru;\nvar au = k(Qi());\nvar D = class extends Error {\n    constructor(r1){\n        super(r1 + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nx(D, \"PrismaClientConstructorValidationError\");\nvar nu = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], iu = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], ou = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Df = {\n    datasources: (e1, { datasourceNames: r1 })=>{\n        if (e1) {\n            if (typeof e1 != \"object\" || Array.isArray(e1)) throw new D(`Invalid value ${JSON.stringify(e1)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [t1, n1] of Object.entries(e1)){\n                if (!r1.includes(t1)) {\n                    let i1 = Wr(t1, r1) || ` Available datasources: ${r1.join(\", \")}`;\n                    throw new D(`Unknown datasource ${t1} provided to PrismaClient constructor.${i1}`);\n                }\n                if (typeof n1 != \"object\" || Array.isArray(n1)) throw new D(`Invalid value ${JSON.stringify(e1)} for datasource \"${t1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n1 && typeof n1 == \"object\") for (let [i1, o1] of Object.entries(n1)){\n                    if (i1 !== \"url\") throw new D(`Invalid value ${JSON.stringify(e1)} for datasource \"${t1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o1 != \"string\") throw new D(`Invalid value ${JSON.stringify(o1)} for datasource \"${t1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e1, r1)=>{\n        if (!e1 && Er(r1.generator) === \"client\") throw new D('Using engine type \"client\" requires a driver adapter to be provided to PrismaClient constructor.');\n        if (e1 === null) return;\n        if (e1 === void 0) throw new D('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Wn(r1).includes(\"driverAdapters\")) throw new D('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Er(r1.generator) === \"binary\") throw new D('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e1)=>{\n        if (typeof e1 < \"u\" && typeof e1 != \"string\") throw new D(`Invalid value ${JSON.stringify(e1)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e1)=>{\n        if (e1) {\n            if (typeof e1 != \"string\") throw new D(`Invalid value ${JSON.stringify(e1)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!iu.includes(e1)) {\n                let r1 = Wr(e1, iu);\n                throw new D(`Invalid errorFormat ${e1} provided to PrismaClient constructor.${r1}`);\n            }\n        }\n    },\n    log: (e1)=>{\n        if (!e1) return;\n        if (!Array.isArray(e1)) throw new D(`Invalid value ${JSON.stringify(e1)} for \"log\" provided to PrismaClient constructor.`);\n        function r1(t1) {\n            if (typeof t1 == \"string\" && !ou.includes(t1)) {\n                let n1 = Wr(t1, ou);\n                throw new D(`Invalid log level \"${t1}\" provided to PrismaClient constructor.${n1}`);\n            }\n        }\n        for (let t1 of e1){\n            r1(t1);\n            let n1 = {\n                level: r1,\n                emit: (i1)=>{\n                    let o1 = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o1.includes(i1)) {\n                        let s1 = Wr(i1, o1);\n                        throw new D(`Invalid value ${JSON.stringify(i1)} for \"emit\" in logLevel provided to PrismaClient constructor.${s1}`);\n                    }\n                }\n            };\n            if (t1 && typeof t1 == \"object\") for (let [i1, o1] of Object.entries(t1))if (n1[i1]) n1[i1](o1);\n            else throw new D(`Invalid property ${i1} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e1)=>{\n        if (!e1) return;\n        let r1 = e1.maxWait;\n        if (r1 != null && r1 <= 0) throw new D(`Invalid value ${r1} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let t1 = e1.timeout;\n        if (t1 != null && t1 <= 0) throw new D(`Invalid value ${t1} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e1, r1)=>{\n        if (typeof e1 != \"object\") throw new D('\"omit\" option is expected to be an object.');\n        if (e1 === null) throw new D('\"omit\" option can not be `null`');\n        let t1 = [];\n        for (let [n1, i1] of Object.entries(e1)){\n            let o1 = Nf(n1, r1.runtimeDataModel);\n            if (!o1) {\n                t1.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n1\n                });\n                continue;\n            }\n            for (let [s1, a1] of Object.entries(i1)){\n                let l1 = o1.fields.find((u1)=>u1.name === s1);\n                if (!l1) {\n                    t1.push({\n                        kind: \"UnknownField\",\n                        modelKey: n1,\n                        fieldName: s1\n                    });\n                    continue;\n                }\n                if (l1.relationName) {\n                    t1.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n1,\n                        fieldName: s1\n                    });\n                    continue;\n                }\n                typeof a1 != \"boolean\" && t1.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n1,\n                    fieldName: s1\n                });\n            }\n        }\n        if (t1.length > 0) throw new D(Lf(e1, t1));\n    },\n    __internal: (e1)=>{\n        if (!e1) return;\n        let r1 = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e1 != \"object\") throw new D(`Invalid value ${JSON.stringify(e1)} for \"__internal\" to PrismaClient constructor`);\n        for (let [t1] of Object.entries(e1))if (!r1.includes(t1)) {\n            let n1 = Wr(t1, r1);\n            throw new D(`Invalid property ${JSON.stringify(t1)} for \"__internal\" provided to PrismaClient constructor.${n1}`);\n        }\n    }\n};\nfunction lu(e1, r1) {\n    for (let [t1, n1] of Object.entries(e1)){\n        if (!nu.includes(t1)) {\n            let i1 = Wr(t1, nu);\n            throw new D(`Unknown property ${t1} provided to PrismaClient constructor.${i1}`);\n        }\n        Df[t1](n1, r1);\n    }\n    if (e1.datasourceUrl && e1.datasources) throw new D('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Wr(e1, r1) {\n    if (r1.length === 0 || typeof e1 != \"string\") return \"\";\n    let t1 = _f(e1, r1);\n    return t1 ? ` Did you mean \"${t1}\"?` : \"\";\n}\nfunction _f(e1, r1) {\n    if (r1.length === 0) return null;\n    let t1 = r1.map((i1)=>({\n            value: i1,\n            distance: (0, au.default)(e1, i1)\n        }));\n    t1.sort((i1, o1)=>i1.distance < o1.distance ? -1 : 1);\n    let n1 = t1[0];\n    return n1.distance < 3 ? n1.value : null;\n}\nfunction Nf(e1, r1) {\n    return su(r1.models, e1) ?? su(r1.types, e1);\n}\nfunction su(e1, r1) {\n    let t1 = Object.keys(e1).find((n1)=>Ye(n1) === r1);\n    if (t1) return e1[t1];\n}\nfunction Lf(e1, r1) {\n    let t1 = _r(e1);\n    for (let o1 of r1)switch(o1.kind){\n        case \"UnknownModel\":\n            t1.arguments.getField(o1.modelKey)?.markAsError(), t1.addErrorMessage(()=>`Unknown model name: ${o1.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            t1.arguments.getDeepField([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), t1.addErrorMessage(()=>`Model \"${o1.modelKey}\" does not have a field named \"${o1.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            t1.arguments.getDeepField([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), t1.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            t1.arguments.getDeepFieldValue([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), t1.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n1, args: i1 } = Cn(t1, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i1}\n\n${n1}`;\n}\nfunction uu(e1) {\n    return e1.length === 0 ? Promise.resolve([]) : new Promise((r1, t1)=>{\n        let n1 = new Array(e1.length), i1 = null, o1 = !1, s1 = 0, a1 = ()=>{\n            o1 || (s1++, s1 === e1.length && (o1 = !0, i1 ? t1(i1) : r1(n1)));\n        }, l1 = (u1)=>{\n            o1 || (o1 = !0, t1(u1));\n        };\n        for(let u1 = 0; u1 < e1.length; u1++)e1[u1].then((c1)=>{\n            n1[u1] = c1, a1();\n        }, (c1)=>{\n            if (!Hn(c1)) {\n                l1(c1);\n                return;\n            }\n            c1.batchRequestIdx === u1 ? l1(c1) : (i1 || (i1 = c1), a1());\n        });\n    });\n}\nvar rr = N(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar Ff = {\n    requestArgsToMiddlewareArgs: (e1)=>e1,\n    middlewareArgsToRequestArgs: (e1)=>e1\n}, Mf = Symbol.for(\"prisma.client.transaction.id\"), $f = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction gu(e1) {\n    class r1 {\n        constructor(n1){\n            this._originalClient = this;\n            this._middlewares = new Jn;\n            this._createPrismaPromise = Ao();\n            this.$metrics = new Lr(this);\n            this.$extends = Ya;\n            e1 = n1?.__internal?.configOverride?.(e1) ?? e1, cl(e1), n1 && lu(n1, e1);\n            let i1 = new mu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Nr.empty(), this._previewFeatures = Wn(e1), this._clientVersion = e1.clientVersion ?? tu, this._activeProvider = e1.activeProvider, this._globalOmit = n1?.omit, this._tracingHelper = Hl();\n            let o1 = e1.relativeEnvPaths && {\n                rootEnvPath: e1.relativeEnvPaths.rootEnvPath && Zn.default.resolve(e1.dirname, e1.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e1.relativeEnvPaths.schemaEnvPath && Zn.default.resolve(e1.dirname, e1.relativeEnvPaths.schemaEnvPath)\n            }, s1;\n            if (n1?.adapter) {\n                s1 = n1.adapter;\n                let l1 = e1.activeProvider === \"postgresql\" ? \"postgres\" : e1.activeProvider;\n                if (s1.provider !== l1) throw new T(`The Driver Adapter \\`${s1.adapterName}\\`, based on \\`${s1.provider}\\`, is not compatible with the provider \\`${l1}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n1.datasources || n1.datasourceUrl !== void 0) throw new T(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a1 = !s1 && o1 && it(o1, {\n                conflictCheck: \"none\"\n            }) || e1.injectableEdgeEnv?.();\n            try {\n                let l1 = n1 ?? {}, u1 = l1.__internal ?? {}, c1 = u1.debug === !0;\n                c1 && N.enable(\"prisma:client\");\n                let p1 = Zn.default.resolve(e1.dirname, e1.relativePath);\n                fu.default.existsSync(p1) || (p1 = e1.dirname), rr(\"dirname\", e1.dirname), rr(\"relativePath\", e1.relativePath), rr(\"cwd\", p1);\n                let d1 = u1.engine || {};\n                if (l1.errorFormat ? this._errorFormat = l1.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e1.runtimeDataModel, this._engineConfig = {\n                    cwd: p1,\n                    dirname: e1.dirname,\n                    enableDebugLogs: c1,\n                    allowTriggerPanic: d1.allowTriggerPanic,\n                    prismaPath: d1.binaryPath ?? void 0,\n                    engineEndpoint: d1.endpoint,\n                    generator: e1.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l1.log && Yl(l1.log),\n                    logQueries: l1.log && !!(typeof l1.log == \"string\" ? l1.log === \"query\" : l1.log.find((f1)=>typeof f1 == \"string\" ? f1 === \"query\" : f1.level === \"query\")),\n                    env: a1?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e1.engineWasm,\n                    compilerWasm: e1.compilerWasm,\n                    clientVersion: e1.clientVersion,\n                    engineVersion: e1.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e1.activeProvider,\n                    inlineSchema: e1.inlineSchema,\n                    overrideDatasources: pl(l1, e1.datasourceNames),\n                    inlineDatasources: e1.inlineDatasources,\n                    inlineSchemaHash: e1.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l1.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l1.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l1.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i1,\n                    isBundled: e1.isBundled,\n                    adapter: s1\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: jr,\n                        getBatchRequestPayload: Mr,\n                        prismaGraphQLToJSError: $r,\n                        PrismaClientUnknownRequestError: j,\n                        PrismaClientInitializationError: T,\n                        PrismaClientKnownRequestError: z,\n                        debug: N(\"prisma:client:accelerateEngine\"),\n                        engineVersion: pu.version,\n                        clientVersion: e1.clientVersion\n                    }\n                }, rr(\"clientVersion\", e1.clientVersion), this._engine = Ml(e1, this._engineConfig), this._requestHandler = new zn(this, i1), l1.log) for (let f1 of l1.log){\n                    let g1 = typeof f1 == \"string\" ? f1 : f1.emit === \"stdout\" ? f1.level : null;\n                    g1 && this.$on(g1, (h1)=>{\n                        tt.log(`${tt.tags[g1] ?? \"\"}`, h1.message || h1.query);\n                    });\n                }\n            } catch (l1) {\n                throw l1.clientVersion = this._clientVersion, l1;\n            }\n            return this._appliedParent = vt(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n1) {\n            this._middlewares.use(n1);\n        }\n        $on(n1, i1) {\n            return n1 === \"beforeExit\" ? this._engine.onBeforeExit(i1) : n1 && this._engineConfig.logEmitter.on(n1, i1), this;\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            } finally{\n                Qo();\n            }\n        }\n        $executeRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Co({\n                    clientMethod: i1,\n                    activeProvider: a1\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $executeRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) {\n                    let [s1, a1] = cu(n1, i1);\n                    return Ro(this._activeProvider, s1.text, s1.values, Array.isArray(n1) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o1, \"$executeRaw\", s1, a1);\n                }\n                throw new Z(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>(Ro(this._activeProvider, n1, i1, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o1, \"$executeRawUnsafe\", [\n                    n1,\n                    ...i1\n                ])));\n        }\n        $runCommandRaw(n1) {\n            if (e1.activeProvider !== \"mongodb\") throw new Z(`The ${e1.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i1)=>this._request({\n                    args: n1,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: $l,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i1\n                }));\n        }\n        async $queryRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Co({\n                    clientMethod: i1,\n                    activeProvider: a1\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $queryRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) return this.$queryRawInternal(o1, \"$queryRaw\", ...cu(n1, i1));\n                throw new Z(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n1) {\n            return this._createPrismaPromise((i1)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new Z(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i1, \"$queryRawTyped\", n1);\n            });\n        }\n        $queryRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>this.$queryRawInternal(o1, \"$queryRawUnsafe\", [\n                    n1,\n                    ...i1\n                ]));\n        }\n        _transactionWithArray({ promises: n1, options: i1 }) {\n            let o1 = $f.nextId(), s1 = Kl(n1.length), a1 = n1.map((l1, u1)=>{\n                if (l1?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c1 = i1?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p1 = {\n                    kind: \"batch\",\n                    id: o1,\n                    index: u1,\n                    isolationLevel: c1,\n                    lock: s1\n                };\n                return l1.requestTransaction?.(p1) ?? l1;\n            });\n            return uu(a1);\n        }\n        async _transactionWithCallback({ callback: n1, options: i1 }) {\n            let o1 = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s1 = {\n                maxWait: i1?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i1?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i1?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a1 = await this._engine.transaction(\"start\", o1, s1), l1;\n            try {\n                let u1 = {\n                    kind: \"itx\",\n                    ...a1\n                };\n                l1 = await n1(this._createItxClient(u1)), await this._engine.transaction(\"commit\", o1, a1);\n            } catch (u1) {\n                throw await this._engine.transaction(\"rollback\", o1, a1).catch(()=>{}), u1;\n            }\n            return l1;\n        }\n        _createItxClient(n1) {\n            return he(vt(he(Ka(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n1)),\n                re(\"_createPrismaPromise\", ()=>Ao(n1)),\n                re(Mf, ()=>n1.id)\n            ])), [\n                Fr(el)\n            ]);\n        }\n        $transaction(n1, i1) {\n            let o1;\n            typeof n1 == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o1 = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o1 = ()=>this._transactionWithCallback({\n                    callback: n1,\n                    options: i1\n                }) : o1 = ()=>this._transactionWithArray({\n                    promises: n1,\n                    options: i1\n                });\n            let s1 = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s1, o1);\n        }\n        _request(n1) {\n            n1.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i1 = n1.middlewareArgsMapper ?? Ff, o1 = {\n                args: i1.requestArgsToMiddlewareArgs(n1.args),\n                dataPath: n1.dataPath,\n                runInTransaction: !!n1.transaction,\n                action: n1.action,\n                model: n1.model\n            }, s1 = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o1.action,\n                        model: o1.model,\n                        name: o1.model ? `${o1.model}.${o1.action}` : o1.action\n                    }\n                }\n            }, a1 = -1, l1 = async (u1)=>{\n                let c1 = this._middlewares.get(++a1);\n                if (c1) return this._tracingHelper.runInChildSpan(s1.middleware, (I1)=>c1(u1, (P1)=>(I1?.end(), l1(P1))));\n                let { runInTransaction: p1, args: d1, ...f1 } = u1, g1 = {\n                    ...n1,\n                    ...f1\n                };\n                d1 && (g1.args = i1.middlewareArgsToRequestArgs(d1)), n1.transaction !== void 0 && p1 === !1 && delete g1.transaction;\n                let h1 = await il(this, g1);\n                return g1.model ? Xa({\n                    result: h1,\n                    modelName: g1.model,\n                    args: g1.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : h1;\n            };\n            return this._tracingHelper.runInChildSpan(s1.operation, ()=>new du.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l1(o1)));\n        }\n        async _executeRequest({ args: n1, clientMethod: i1, dataPath: o1, callsite: s1, action: a1, model: l1, argsMapper: u1, transaction: c1, unpacker: p1, otelParentCtx: d1, customDataProxyFetch: f1 }) {\n            try {\n                n1 = u1 ? u1(n1) : n1;\n                let g1 = {\n                    name: \"serialize\"\n                }, h1 = this._tracingHelper.runInChildSpan(g1, ()=>Dn({\n                        modelName: l1,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a1,\n                        args: n1,\n                        clientMethod: i1,\n                        callsite: s1,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return N.enabled(\"prisma:client\") && (rr(\"Prisma Client call:\"), rr(`prisma.${i1}(${$a(n1)})`), rr(\"Generated request:\"), rr(JSON.stringify(h1, null, 2) + `\n`)), c1?.kind === \"batch\" && await c1.lock, this._requestHandler.request({\n                    protocolQuery: h1,\n                    modelName: l1,\n                    action: a1,\n                    clientMethod: i1,\n                    dataPath: o1,\n                    callsite: s1,\n                    args: n1,\n                    extensions: this._extensions,\n                    transaction: c1,\n                    unpacker: p1,\n                    otelParentCtx: d1,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f1\n                });\n            } catch (g1) {\n                throw g1.clientVersion = this._clientVersion, g1;\n            }\n        }\n        _hasPreviewFlag(n1) {\n            return !!this._engineConfig.previewFeatures?.includes(n1);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return r1;\n}\nfunction cu(e1, r1) {\n    return qf(e1) ? [\n        new oe(e1, r1),\n        Ql\n    ] : [\n        e1,\n        Wl\n    ];\n}\nfunction qf(e1) {\n    return Array.isArray(e1) && Array.isArray(e1.raw);\n}\nvar jf = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction hu(e1) {\n    return new Proxy(e1, {\n        get (r1, t1) {\n            if (t1 in r1) return r1[t1];\n            if (!jf.has(t1)) throw new TypeError(`Invalid enum value: ${String(t1)}`);\n        }\n    });\n}\nfunction yu(e1) {\n    it(e1, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.5.0\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQUEsSUFBSUEsS0FBR0MsT0FBT0MsTUFBTTtBQUFDLElBQUlDLEtBQUdGLE9BQU9HLGNBQWM7QUFBQyxJQUFJQyxLQUFHSixPQUFPSyx3QkFBd0I7QUFBQyxJQUFJQyxLQUFHTixPQUFPTyxtQkFBbUI7QUFBQyxJQUFJQyxLQUFHUixPQUFPUyxjQUFjLEVBQUNDLEtBQUdWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUFDLElBQUlDLEtBQUcsQ0FBQ0MsSUFBRUMsS0FBSSxJQUFLRCxDQUFBQSxNQUFJQyxDQUFBQSxLQUFFRCxHQUFFQSxLQUFFLEVBQUMsR0FBR0MsRUFBQUE7QUFBRyxJQUFJQyxLQUFHLENBQUNGLElBQUVDLEtBQUksSUFBS0EsQ0FBQUEsTUFBR0QsR0FBRSxDQUFDQyxLQUFFO1lBQUNFLFNBQVEsQ0FBQztRQUFDLEdBQUdBLE9BQU8sRUFBQ0YsS0FBR0EsR0FBRUUsT0FBTyxHQUFFQyxLQUFHLENBQUNKLElBQUVDO0lBQUssSUFBSSxJQUFJSSxNQUFLSixHQUFFYixHQUFHWSxJQUFFSyxJQUFFO1FBQUNDLEtBQUlMLEVBQUMsQ0FBQ0ksR0FBRTtRQUFDRSxZQUFXLENBQUM7SUFBQztBQUFFLEdBQUVDLEtBQUcsQ0FBQ1IsSUFBRUMsSUFBRUksSUFBRUk7SUFBSyxJQUFHUixNQUFHLE9BQU9BLE1BQUcsWUFBVSxPQUFPQSxNQUFHLFlBQVcsS0FBSSxJQUFJUyxNQUFLbEIsR0FBR1MsSUFBRyxDQUFDTCxHQUFHZSxJQUFJLENBQUNYLElBQUVVLE9BQUlBLE9BQUlMLE1BQUdqQixHQUFHWSxJQUFFVSxJQUFFO1FBQUNKLEtBQUksSUFBSUwsRUFBQyxDQUFDUyxHQUFFO1FBQUNILFlBQVcsQ0FBRUUsQ0FBQUEsS0FBRW5CLEdBQUdXLElBQUVTLEdBQUMsS0FBSUQsR0FBRUYsVUFBVTtJQUFBO0lBQUcsT0FBT1A7QUFB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bmluZy8uL25vZGVfbW9kdWxlcy8ucHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM/MjVkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjt2YXIgYnU9T2JqZWN0LmNyZWF0ZTt2YXIgcXQ9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBFdT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciB3dT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lczt2YXIgeHU9T2JqZWN0LmdldFByb3RvdHlwZU9mLHZ1PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIERvPShlLHIpPT4oKT0+KGUmJihyPWUoZT0wKSkscik7dmFyIG5lPShlLHIpPT4oKT0+KHJ8fGUoKHI9e2V4cG9ydHM6e319KS5leHBvcnRzLHIpLHIuZXhwb3J0cyksdHI9KGUscik9Pntmb3IodmFyIHQgaW4gcilxdChlLHQse2dldDpyW3RdLGVudW1lcmFibGU6ITB9KX0sX289KGUscix0LG4pPT57aWYociYmdHlwZW9mIHI9PVwib2JqZWN0XCJ8fHR5cGVvZiByPT1cImZ1bmN0aW9uXCIpZm9yKGxldCBpIG9mIHd1KHIpKSF2dS5jYWxsKGUsaSkmJmkhPT10JiZxdChlLGkse2dldDooKT0+cltpXSxlbnVtZXJhYmxlOiEobj1FdShyLGkpKXx8bi5lbnVtZXJhYmxlfSk7cmV0dXJuIGV9O3ZhciBrPShlLHIsdCk9Pih0PWUhPW51bGw/YnUoeHUoZSkpOnt9LF9vKHJ8fCFlfHwhZS5fX2VzTW9kdWxlP3F0KHQsXCJkZWZhdWx0XCIse3ZhbHVlOmUsZW51bWVyYWJsZTohMH0pOnQsZSkpLFB1PWU9Pl9vKHF0KHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUpO3ZhciBtaT1uZSgoX2csc3MpPT57XCJ1c2Ugc3RyaWN0XCI7c3MuZXhwb3J0cz0oZSxyPXByb2Nlc3MuYXJndik9PntsZXQgdD1lLnN0YXJ0c1dpdGgoXCItXCIpP1wiXCI6ZS5sZW5ndGg9PT0xP1wiLVwiOlwiLS1cIixuPXIuaW5kZXhPZih0K2UpLGk9ci5pbmRleE9mKFwiLS1cIik7cmV0dXJuIG4hPT0tMSYmKGk9PT0tMXx8bjxpKX19KTt2YXIgdXM9bmUoKE5nLGxzKT0+e1widXNlIHN0cmljdFwiO3ZhciBNYz1yZXF1aXJlKFwibm9kZTpvc1wiKSxhcz1yZXF1aXJlKFwibm9kZTp0dHlcIiksZGU9bWkoKSx7ZW52Okd9PXByb2Nlc3MsUWU7ZGUoXCJuby1jb2xvclwiKXx8ZGUoXCJuby1jb2xvcnNcIil8fGRlKFwiY29sb3I9ZmFsc2VcIil8fGRlKFwiY29sb3I9bmV2ZXJcIik/UWU9MDooZGUoXCJjb2xvclwiKXx8ZGUoXCJjb2xvcnNcIil8fGRlKFwiY29sb3I9dHJ1ZVwiKXx8ZGUoXCJjb2xvcj1hbHdheXNcIikpJiYoUWU9MSk7XCJGT1JDRV9DT0xPUlwiaW4gRyYmKEcuRk9SQ0VfQ09MT1I9PT1cInRydWVcIj9RZT0xOkcuRk9SQ0VfQ09MT1I9PT1cImZhbHNlXCI/UWU9MDpRZT1HLkZPUkNFX0NPTE9SLmxlbmd0aD09PTA/MTpNYXRoLm1pbihwYXJzZUludChHLkZPUkNFX0NPTE9SLDEwKSwzKSk7ZnVuY3Rpb24gZmkoZSl7cmV0dXJuIGU9PT0wPyExOntsZXZlbDplLGhhc0Jhc2ljOiEwLGhhczI1NjplPj0yLGhhczE2bTplPj0zfX1mdW5jdGlvbiBnaShlLHIpe2lmKFFlPT09MClyZXR1cm4gMDtpZihkZShcImNvbG9yPTE2bVwiKXx8ZGUoXCJjb2xvcj1mdWxsXCIpfHxkZShcImNvbG9yPXRydWVjb2xvclwiKSlyZXR1cm4gMztpZihkZShcImNvbG9yPTI1NlwiKSlyZXR1cm4gMjtpZihlJiYhciYmUWU9PT12b2lkIDApcmV0dXJuIDA7bGV0IHQ9UWV8fDA7aWYoRy5URVJNPT09XCJkdW1iXCIpcmV0dXJuIHQ7aWYocHJvY2Vzcy5wbGF0Zm9ybT09PVwid2luMzJcIil7bGV0IG49TWMucmVsZWFzZSgpLnNwbGl0KFwiLlwiKTtyZXR1cm4gTnVtYmVyKG5bMF0pPj0xMCYmTnVtYmVyKG5bMl0pPj0xMDU4Nj9OdW1iZXIoblsyXSk+PTE0OTMxPzM6MjoxfWlmKFwiQ0lcImluIEcpcmV0dXJuW1wiVFJBVklTXCIsXCJDSVJDTEVDSVwiLFwiQVBQVkVZT1JcIixcIkdJVExBQl9DSVwiLFwiR0lUSFVCX0FDVElPTlNcIixcIkJVSUxES0lURVwiXS5zb21lKG49Pm4gaW4gRyl8fEcuQ0lfTkFNRT09PVwiY29kZXNoaXBcIj8xOnQ7aWYoXCJURUFNQ0lUWV9WRVJTSU9OXCJpbiBHKXJldHVybi9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KEcuVEVBTUNJVFlfVkVSU0lPTik/MTowO2lmKEcuQ09MT1JURVJNPT09XCJ0cnVlY29sb3JcIilyZXR1cm4gMztpZihcIlRFUk1fUFJPR1JBTVwiaW4gRyl7bGV0IG49cGFyc2VJbnQoKEcuVEVSTV9QUk9HUkFNX1ZFUlNJT058fFwiXCIpLnNwbGl0KFwiLlwiKVswXSwxMCk7c3dpdGNoKEcuVEVSTV9QUk9HUkFNKXtjYXNlXCJpVGVybS5hcHBcIjpyZXR1cm4gbj49Mz8zOjI7Y2FzZVwiQXBwbGVfVGVybWluYWxcIjpyZXR1cm4gMn19cmV0dXJuLy0yNTYoY29sb3IpPyQvaS50ZXN0KEcuVEVSTSk/MjovXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoRy5URVJNKXx8XCJDT0xPUlRFUk1cImluIEc/MTp0fWZ1bmN0aW9uICRjKGUpe2xldCByPWdpKGUsZSYmZS5pc1RUWSk7cmV0dXJuIGZpKHIpfWxzLmV4cG9ydHM9e3N1cHBvcnRzQ29sb3I6JGMsc3Rkb3V0OmZpKGdpKCEwLGFzLmlzYXR0eSgxKSkpLHN0ZGVycjpmaShnaSghMCxhcy5pc2F0dHkoMikpKX19KTt2YXIgZHM9bmUoKExnLHBzKT0+e1widXNlIHN0cmljdFwiO3ZhciBxYz11cygpLGJyPW1pKCk7ZnVuY3Rpb24gY3MoZSl7aWYoL15cXGR7Myw0fSQvLnRlc3QoZSkpe2xldCB0PS8oXFxkezEsMn0pKFxcZHsyfSkvLmV4ZWMoZSl8fFtdO3JldHVybnttYWpvcjowLG1pbm9yOnBhcnNlSW50KHRbMV0sMTApLHBhdGNoOnBhcnNlSW50KHRbMl0sMTApfX1sZXQgcj0oZXx8XCJcIikuc3BsaXQoXCIuXCIpLm1hcCh0PT5wYXJzZUludCh0LDEwKSk7cmV0dXJue21ham9yOnJbMF0sbWlub3I6clsxXSxwYXRjaDpyWzJdfX1mdW5jdGlvbiBoaShlKXtsZXR7Q0k6cixGT1JDRV9IWVBFUkxJTks6dCxORVRMSUZZOm4sVEVBTUNJVFlfVkVSU0lPTjppLFRFUk1fUFJPR1JBTTpvLFRFUk1fUFJPR1JBTV9WRVJTSU9OOnMsVlRFX1ZFUlNJT046YSxURVJNOmx9PXByb2Nlc3MuZW52O2lmKHQpcmV0dXJuISh0Lmxlbmd0aD4wJiZwYXJzZUludCh0LDEwKT09PTApO2lmKGJyKFwibm8taHlwZXJsaW5rXCIpfHxicihcIm5vLWh5cGVybGlua3NcIil8fGJyKFwiaHlwZXJsaW5rPWZhbHNlXCIpfHxicihcImh5cGVybGluaz1uZXZlclwiKSlyZXR1cm4hMTtpZihicihcImh5cGVybGluaz10cnVlXCIpfHxicihcImh5cGVybGluaz1hbHdheXNcIil8fG4pcmV0dXJuITA7aWYoIXFjLnN1cHBvcnRzQ29sb3IoZSl8fGUmJiFlLmlzVFRZKXJldHVybiExO2lmKFwiV1RfU0VTU0lPTlwiaW4gcHJvY2Vzcy5lbnYpcmV0dXJuITA7aWYocHJvY2Vzcy5wbGF0Zm9ybT09PVwid2luMzJcInx8cnx8aSlyZXR1cm4hMTtpZihvKXtsZXQgdT1jcyhzfHxcIlwiKTtzd2l0Y2gobyl7Y2FzZVwiaVRlcm0uYXBwXCI6cmV0dXJuIHUubWFqb3I9PT0zP3UubWlub3I+PTE6dS5tYWpvcj4zO2Nhc2VcIldlelRlcm1cIjpyZXR1cm4gdS5tYWpvcj49MjAyMDA2MjA7Y2FzZVwidnNjb2RlXCI6cmV0dXJuIHUubWFqb3I+MXx8dS5tYWpvcj09PTEmJnUubWlub3I+PTcyO2Nhc2VcImdob3N0dHlcIjpyZXR1cm4hMH19aWYoYSl7aWYoYT09PVwiMC41MC4wXCIpcmV0dXJuITE7bGV0IHU9Y3MoYSk7cmV0dXJuIHUubWFqb3I+MHx8dS5taW5vcj49NTB9c3dpdGNoKGwpe2Nhc2VcImFsYWNyaXR0eVwiOnJldHVybiEwfXJldHVybiExfXBzLmV4cG9ydHM9e3N1cHBvcnRzSHlwZXJsaW5rOmhpLHN0ZG91dDpoaShwcm9jZXNzLnN0ZG91dCksc3RkZXJyOmhpKHByb2Nlc3Muc3RkZXJyKX19KTt2YXIgbXM9bmUoKEhnLGpjKT0+e2pjLmV4cG9ydHM9e25hbWU6XCJAcHJpc21hL2ludGVybmFsc1wiLHZlcnNpb246XCI2LjYuMFwiLGRlc2NyaXB0aW9uOlwiVGhpcyBwYWNrYWdlIGlzIGludGVuZGVkIGZvciBQcmlzbWEncyBpbnRlcm5hbCB1c2VcIixtYWluOlwiZGlzdC9pbmRleC5qc1wiLHR5cGVzOlwiZGlzdC9pbmRleC5kLnRzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL2ludGVybmFsc1wifSxob21lcGFnZTpcImh0dHBzOi8vd3d3LnByaXNtYS5pb1wiLGF1dGhvcjpcIlRpbSBTdWNoYW5layA8c3VjaGFuZWtAcHJpc21hLmlvPlwiLGJ1Z3M6XCJodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9pc3N1ZXNcIixsaWNlbnNlOlwiQXBhY2hlLTIuMFwiLHNjcmlwdHM6e2RldjpcIkRFVj10cnVlIHRzeCBoZWxwZXJzL2J1aWxkLnRzXCIsYnVpbGQ6XCJ0c3ggaGVscGVycy9idWlsZC50c1wiLHRlc3Q6XCJkb3RlbnYgLWUgLi4vLi4vLmRiLmVudiAtLSBqZXN0IC0tc2lsZW50XCIscHJlcHVibGlzaE9ubHk6XCJwbnBtIHJ1biBidWlsZFwifSxmaWxlczpbXCJSRUFETUUubWRcIixcImRpc3RcIixcIiEqKi9saWJxdWVyeV9lbmdpbmUqXCIsXCIhZGlzdC9nZXQtZ2VuZXJhdG9ycy9lbmdpbmVzLypcIixcInNjcmlwdHNcIl0sZGV2RGVwZW5kZW5jaWVzOntcIkBiYWJlbC9oZWxwZXItdmFsaWRhdG9yLWlkZW50aWZpZXJcIjpcIjcuMjUuOVwiLFwiQG9wZW50ZWxlbWV0cnkvYXBpXCI6XCIxLjkuMFwiLFwiQHN3Yy9jb3JlXCI6XCIxLjExLjVcIixcIkBzd2MvamVzdFwiOlwiMC4yLjM3XCIsXCJAdHlwZXMvYmFiZWxfX2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiOlwiNy4xNS4yXCIsXCJAdHlwZXMvamVzdFwiOlwiMjkuNS4xNFwiLFwiQHR5cGVzL25vZGVcIjpcIjE4LjE5Ljc2XCIsXCJAdHlwZXMvcmVzb2x2ZVwiOlwiMS4yMC42XCIsYXJjaGl2ZXI6XCI2LjAuMlwiLFwiY2hlY2twb2ludC1jbGllbnRcIjpcIjEuMS4zM1wiLFwiY2xpLXRydW5jYXRlXCI6XCI0LjAuMFwiLGRvdGVudjpcIjE2LjQuN1wiLGVzYnVpbGQ6XCIwLjI1LjFcIixcImVzY2FwZS1zdHJpbmctcmVnZXhwXCI6XCI1LjAuMFwiLGV4ZWNhOlwiNS4xLjFcIixcImZhc3QtZ2xvYlwiOlwiMy4zLjNcIixcImZpbmQtdXBcIjpcIjcuMC4wXCIsXCJmcC10c1wiOlwiMi4xNi45XCIsXCJmcy1leHRyYVwiOlwiMTEuMy4wXCIsXCJmcy1qZXRwYWNrXCI6XCI1LjEuMFwiLFwiZ2xvYmFsLWRpcnNcIjpcIjQuMC4wXCIsZ2xvYmJ5OlwiMTEuMS4wXCIsXCJpZGVudGlmaWVyLXJlZ2V4XCI6XCIxLjAuMFwiLFwiaW5kZW50LXN0cmluZ1wiOlwiNC4wLjBcIixcImlzLXdpbmRvd3NcIjpcIjEuMC4yXCIsXCJpcy13c2xcIjpcIjMuMS4wXCIsamVzdDpcIjI5LjcuMFwiLFwiamVzdC1qdW5pdFwiOlwiMTYuMC4wXCIsa2xldXI6XCI0LjEuNVwiLFwibW9jay1zdGRpblwiOlwiMS4wLjBcIixcIm5ldy1naXRodWItaXNzdWUtdXJsXCI6XCIwLjIuMVwiLFwibm9kZS1mZXRjaFwiOlwiMy4zLjJcIixcIm5wbS1wYWNrbGlzdFwiOlwiNS4xLjNcIixvcGVuOlwiNy40LjJcIixcInAtbWFwXCI6XCI0LjAuMFwiLFwicmVhZC1wYWNrYWdlLXVwXCI6XCIxMS4wLjBcIixyZXNvbHZlOlwiMS4yMi4xMFwiLFwic3RyaW5nLXdpZHRoXCI6XCI3LjIuMFwiLFwic3RyaXAtYW5zaVwiOlwiNi4wLjFcIixcInN0cmlwLWluZGVudFwiOlwiNC4wLjBcIixcInRlbXAtZGlyXCI6XCIyLjAuMFwiLHRlbXB5OlwiMS4wLjFcIixcInRlcm1pbmFsLWxpbmtcIjpcIjQuMC4wXCIsdG1wOlwiMC4yLjNcIixcInRzLW5vZGVcIjpcIjEwLjkuMlwiLFwidHMtcGF0dGVyblwiOlwiNS42LjJcIixcInRzLXRvb2xiZWx0XCI6XCI5LjYuMFwiLHR5cGVzY3JpcHQ6XCI1LjQuNVwiLHlhcm46XCIxLjIyLjIyXCJ9LGRlcGVuZGVuY2llczp7XCJAcHJpc21hL2NvbmZpZ1wiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZGVidWdcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2RtbWZcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2RyaXZlci1hZGFwdGVyLXV0aWxzXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9lbmdpbmVzXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9mZXRjaC1lbmdpbmVcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2dlbmVyYXRvclwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZ2VuZXJhdG9yLWhlbHBlclwiOlwid29ya3NwYWNlOipcIixcIkBwcmlzbWEvZ2V0LXBsYXRmb3JtXCI6XCJ3b3Jrc3BhY2U6KlwiLFwiQHByaXNtYS9wcmlzbWEtc2NoZW1hLXdhc21cIjpcIjYuNi4wLTUzLmY2NzY3NjIyODBiNTRjZDA3Yzc3MDAxN2VkMzcxMWRkZGUzNWYzN2FcIixcIkBwcmlzbWEvc2NoZW1hLWVuZ2luZS13YXNtXCI6XCI2LjYuMC01My5mNjc2NzYyMjgwYjU0Y2QwN2M3NzAwMTdlZDM3MTFkZGRlMzVmMzdhXCIsXCJAcHJpc21hL3NjaGVtYS1maWxlcy1sb2FkZXJcIjpcIndvcmtzcGFjZToqXCIsYXJnOlwiNS4wLjJcIixwcm9tcHRzOlwiMi40LjJcIn0scGVlckRlcGVuZGVuY2llczp7dHlwZXNjcmlwdDpcIj49NS4xLjBcIn0scGVlckRlcGVuZGVuY2llc01ldGE6e3R5cGVzY3JpcHQ6e29wdGlvbmFsOiEwfX0sc2lkZUVmZmVjdHM6ITF9fSk7dmFyIEVpPW5lKCh6ZyxVYyk9PntVYy5leHBvcnRzPXtuYW1lOlwiQHByaXNtYS9lbmdpbmVzLXZlcnNpb25cIix2ZXJzaW9uOlwiNi42LjAtNTMuZjY3Njc2MjI4MGI1NGNkMDdjNzcwMDE3ZWQzNzExZGRkZTM1ZjM3YVwiLG1haW46XCJpbmRleC5qc1wiLHR5cGVzOlwiaW5kZXguZC50c1wiLGxpY2Vuc2U6XCJBcGFjaGUtMi4wXCIsYXV0aG9yOlwiVGltIFN1Y2hhbmVrIDxzdWNoYW5la0BwcmlzbWEuaW8+XCIscHJpc21hOntlbmdpbmVzVmVyc2lvbjpcImY2NzY3NjIyODBiNTRjZDA3Yzc3MDAxN2VkMzcxMWRkZGUzNWYzN2FcIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvZW5naW5lcy13cmFwcGVyLmdpdFwiLGRpcmVjdG9yeTpcInBhY2thZ2VzL2VuZ2luZXMtdmVyc2lvblwifSxkZXZEZXBlbmRlbmNpZXM6e1wiQHR5cGVzL25vZGVcIjpcIjE4LjE5Ljc2XCIsdHlwZXNjcmlwdDpcIjQuOS41XCJ9LGZpbGVzOltcImluZGV4LmpzXCIsXCJpbmRleC5kLnRzXCJdLHNjcmlwdHM6e2J1aWxkOlwidHNjIC1kXCJ9fX0pO3ZhciB3aT1uZShYdD0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShYdCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtYdC5lbmdpbmVzVmVyc2lvbj12b2lkIDA7WHQuZW5naW5lc1ZlcnNpb249RWkoKS5wcmlzbWEuZW5naW5lc1ZlcnNpb259KTt2YXIgYnM9bmUoKGhoLHlzKT0+e1widXNlIHN0cmljdFwiO3lzLmV4cG9ydHM9ZT0+e2xldCByPWUubWF0Y2goL15bIFxcdF0qKD89XFxTKS9nbSk7cmV0dXJuIHI/ci5yZWR1Y2UoKHQsbik9Pk1hdGgubWluKHQsbi5sZW5ndGgpLDEvMCk6MH19KTt2YXIgUmk9bmUoKEVoLHhzKT0+e1widXNlIHN0cmljdFwiO3hzLmV4cG9ydHM9KGUscj0xLHQpPT57aWYodD17aW5kZW50OlwiIFwiLGluY2x1ZGVFbXB0eUxpbmVzOiExLC4uLnR9LHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGlucHV0XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2YgZX1cXGBgKTtpZih0eXBlb2YgciE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBjb3VudFxcYCB0byBiZSBhIFxcYG51bWJlclxcYCwgZ290IFxcYCR7dHlwZW9mIHJ9XFxgYCk7aWYodHlwZW9mIHQuaW5kZW50IT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYG9wdGlvbnMuaW5kZW50XFxgIHRvIGJlIGEgXFxgc3RyaW5nXFxgLCBnb3QgXFxgJHt0eXBlb2YgdC5pbmRlbnR9XFxgYCk7aWYocj09PTApcmV0dXJuIGU7bGV0IG49dC5pbmNsdWRlRW1wdHlMaW5lcz8vXi9nbTovXig/IVxccyokKS9nbTtyZXR1cm4gZS5yZXBsYWNlKG4sdC5pbmRlbnQucmVwZWF0KHIpKX19KTt2YXIgU3M9bmUoKHZoLFRzKT0+e1widXNlIHN0cmljdFwiO1RzLmV4cG9ydHM9KHtvbmx5Rmlyc3Q6ZT0hMX09e30pPT57bGV0IHI9W1wiW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxcXGRdKyg/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSopKik/XFxcXHUwMDA3KVwiLFwiKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1udHFyeT0+PH5dKSlcIl0uam9pbihcInxcIik7cmV0dXJuIG5ldyBSZWdFeHAocixlP3ZvaWQgMDpcImdcIil9fSk7dmFyIGtpPW5lKChQaCxScyk9PntcInVzZSBzdHJpY3RcIjt2YXIgWGM9U3MoKTtScy5leHBvcnRzPWU9PnR5cGVvZiBlPT1cInN0cmluZ1wiP2UucmVwbGFjZShYYygpLFwiXCIpOmV9KTt2YXIgQ3M9bmUoKENoLGVwKT0+e2VwLmV4cG9ydHM9e25hbWU6XCJkb3RlbnZcIix2ZXJzaW9uOlwiMTYuNC43XCIsZGVzY3JpcHRpb246XCJMb2FkcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAuZW52IGZpbGVcIixtYWluOlwibGliL21haW4uanNcIix0eXBlczpcImxpYi9tYWluLmQudHNcIixleHBvcnRzOntcIi5cIjp7dHlwZXM6XCIuL2xpYi9tYWluLmQudHNcIixyZXF1aXJlOlwiLi9saWIvbWFpbi5qc1wiLGRlZmF1bHQ6XCIuL2xpYi9tYWluLmpzXCJ9LFwiLi9jb25maWdcIjpcIi4vY29uZmlnLmpzXCIsXCIuL2NvbmZpZy5qc1wiOlwiLi9jb25maWcuanNcIixcIi4vbGliL2Vudi1vcHRpb25zXCI6XCIuL2xpYi9lbnYtb3B0aW9ucy5qc1wiLFwiLi9saWIvZW52LW9wdGlvbnMuanNcIjpcIi4vbGliL2Vudi1vcHRpb25zLmpzXCIsXCIuL2xpYi9jbGktb3B0aW9uc1wiOlwiLi9saWIvY2xpLW9wdGlvbnMuanNcIixcIi4vbGliL2NsaS1vcHRpb25zLmpzXCI6XCIuL2xpYi9jbGktb3B0aW9ucy5qc1wiLFwiLi9wYWNrYWdlLmpzb25cIjpcIi4vcGFja2FnZS5qc29uXCJ9LHNjcmlwdHM6e1wiZHRzLWNoZWNrXCI6XCJ0c2MgLS1wcm9qZWN0IHRlc3RzL3R5cGVzL3RzY29uZmlnLmpzb25cIixsaW50Olwic3RhbmRhcmRcIixwcmV0ZXN0OlwibnBtIHJ1biBsaW50ICYmIG5wbSBydW4gZHRzLWNoZWNrXCIsdGVzdDpcInRhcCBydW4gLS1hbGxvdy1lbXB0eS1jb3ZlcmFnZSAtLWRpc2FibGUtY292ZXJhZ2UgLS10aW1lb3V0PTYwMDAwXCIsXCJ0ZXN0OmNvdmVyYWdlXCI6XCJ0YXAgcnVuIC0tc2hvdy1mdWxsLWNvdmVyYWdlIC0tdGltZW91dD02MDAwMCAtLWNvdmVyYWdlLXJlcG9ydD1sY292XCIscHJlcmVsZWFzZTpcIm5wbSB0ZXN0XCIscmVsZWFzZTpcInN0YW5kYXJkLXZlcnNpb25cIn0scmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52LmdpdFwifSxmdW5kaW5nOlwiaHR0cHM6Ly9kb3RlbnZ4LmNvbVwiLGtleXdvcmRzOltcImRvdGVudlwiLFwiZW52XCIsXCIuZW52XCIsXCJlbnZpcm9ubWVudFwiLFwidmFyaWFibGVzXCIsXCJjb25maWdcIixcInNldHRpbmdzXCJdLHJlYWRtZUZpbGVuYW1lOlwiUkVBRE1FLm1kXCIsbGljZW5zZTpcIkJTRC0yLUNsYXVzZVwiLGRldkRlcGVuZGVuY2llczp7XCJAdHlwZXMvbm9kZVwiOlwiXjE4LjExLjNcIixkZWNhY2hlOlwiXjQuNi4yXCIsc2lub246XCJeMTQuMC4xXCIsc3RhbmRhcmQ6XCJeMTcuMC4wXCIsXCJzdGFuZGFyZC12ZXJzaW9uXCI6XCJeOS41LjBcIix0YXA6XCJeMTkuMi4wXCIsdHlwZXNjcmlwdDpcIl40LjguNFwifSxlbmdpbmVzOntub2RlOlwiPj0xMlwifSxicm93c2VyOntmczohMX19fSk7dmFyIE9zPW5lKChBaCxOZSk9PntcInVzZSBzdHJpY3RcIjt2YXIgRGk9cmVxdWlyZShcIm5vZGU6ZnNcIiksX2k9cmVxdWlyZShcIm5vZGU6cGF0aFwiKSxycD1yZXF1aXJlKFwibm9kZTpvc1wiKSx0cD1yZXF1aXJlKFwibm9kZTpjcnlwdG9cIiksbnA9Q3MoKSxOaT1ucC52ZXJzaW9uLGlwPS8oPzpefF4pXFxzKig/OmV4cG9ydFxccyspPyhbXFx3Li1dKykoPzpcXHMqPVxccyo/fDpcXHMrPykoXFxzKicoPzpcXFxcJ3xbXiddKSonfFxccypcIig/OlxcXFxcInxbXlwiXSkqXCJ8XFxzKmAoPzpcXFxcYHxbXmBdKSpgfFteI1xcclxcbl0rKT9cXHMqKD86Iy4qKT8oPzokfCQpL21nO2Z1bmN0aW9uIG9wKGUpe2xldCByPXt9LHQ9ZS50b1N0cmluZygpO3Q9dC5yZXBsYWNlKC9cXHJcXG4/L21nLGBcbmApO2xldCBuO2Zvcig7KG49aXAuZXhlYyh0KSkhPW51bGw7KXtsZXQgaT1uWzFdLG89blsyXXx8XCJcIjtvPW8udHJpbSgpO2xldCBzPW9bMF07bz1vLnJlcGxhY2UoL14oWydcImBdKShbXFxzXFxTXSopXFwxJC9tZyxcIiQyXCIpLHM9PT0nXCInJiYobz1vLnJlcGxhY2UoL1xcXFxuL2csYFxuYCksbz1vLnJlcGxhY2UoL1xcXFxyL2csXCJcXHJcIikpLHJbaV09b31yZXR1cm4gcn1mdW5jdGlvbiBzcChlKXtsZXQgcj1rcyhlKSx0PUIuY29uZmlnRG90ZW52KHtwYXRoOnJ9KTtpZighdC5wYXJzZWQpe2xldCBzPW5ldyBFcnJvcihgTUlTU0lOR19EQVRBOiBDYW5ub3QgcGFyc2UgJHtyfSBmb3IgYW4gdW5rbm93biByZWFzb25gKTt0aHJvdyBzLmNvZGU9XCJNSVNTSU5HX0RBVEFcIixzfWxldCBuPUlzKGUpLnNwbGl0KFwiLFwiKSxpPW4ubGVuZ3RoLG87Zm9yKGxldCBzPTA7czxpO3MrKyl0cnl7bGV0IGE9bltzXS50cmltKCksbD11cCh0LGEpO289Qi5kZWNyeXB0KGwuY2lwaGVydGV4dCxsLmtleSk7YnJlYWt9Y2F0Y2goYSl7aWYocysxPj1pKXRocm93IGF9cmV0dXJuIEIucGFyc2Uobyl9ZnVuY3Rpb24gYXAoZSl7Y29uc29sZS5sb2coYFtkb3RlbnZAJHtOaX1dW0lORk9dICR7ZX1gKX1mdW5jdGlvbiBscChlKXtjb25zb2xlLmxvZyhgW2RvdGVudkAke05pfV1bV0FSTl0gJHtlfWApfWZ1bmN0aW9uIHRuKGUpe2NvbnNvbGUubG9nKGBbZG90ZW52QCR7Tml9XVtERUJVR10gJHtlfWApfWZ1bmN0aW9uIElzKGUpe3JldHVybiBlJiZlLkRPVEVOVl9LRVkmJmUuRE9URU5WX0tFWS5sZW5ndGg+MD9lLkRPVEVOVl9LRVk6cHJvY2Vzcy5lbnYuRE9URU5WX0tFWSYmcHJvY2Vzcy5lbnYuRE9URU5WX0tFWS5sZW5ndGg+MD9wcm9jZXNzLmVudi5ET1RFTlZfS0VZOlwiXCJ9ZnVuY3Rpb24gdXAoZSxyKXtsZXQgdDt0cnl7dD1uZXcgVVJMKHIpfWNhdGNoKGEpe2lmKGEuY29kZT09PVwiRVJSX0lOVkFMSURfVVJMXCIpe2xldCBsPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogV3JvbmcgZm9ybWF0LiBNdXN0IGJlIGluIHZhbGlkIHVyaSBmb3JtYXQgbGlrZSBkb3RlbnY6Ly86a2V5XzEyMzRAZG90ZW52eC5jb20vdmF1bHQvLmVudi52YXVsdD9lbnZpcm9ubWVudD1kZXZlbG9wbWVudFwiKTt0aHJvdyBsLmNvZGU9XCJJTlZBTElEX0RPVEVOVl9LRVlcIixsfXRocm93IGF9bGV0IG49dC5wYXNzd29yZDtpZighbil7bGV0IGE9bmV3IEVycm9yKFwiSU5WQUxJRF9ET1RFTlZfS0VZOiBNaXNzaW5nIGtleSBwYXJ0XCIpO3Rocm93IGEuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGF9bGV0IGk9dC5zZWFyY2hQYXJhbXMuZ2V0KFwiZW52aXJvbm1lbnRcIik7aWYoIWkpe2xldCBhPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogTWlzc2luZyBlbnZpcm9ubWVudCBwYXJ0XCIpO3Rocm93IGEuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGF9bGV0IG89YERPVEVOVl9WQVVMVF8ke2kudG9VcHBlckNhc2UoKX1gLHM9ZS5wYXJzZWRbb107aWYoIXMpe2xldCBhPW5ldyBFcnJvcihgTk9UX0ZPVU5EX0RPVEVOVl9FTlZJUk9OTUVOVDogQ2Fubm90IGxvY2F0ZSBlbnZpcm9ubWVudCAke299IGluIHlvdXIgLmVudi52YXVsdCBmaWxlLmApO3Rocm93IGEuY29kZT1cIk5PVF9GT1VORF9ET1RFTlZfRU5WSVJPTk1FTlRcIixhfXJldHVybntjaXBoZXJ0ZXh0OnMsa2V5Om59fWZ1bmN0aW9uIGtzKGUpe2xldCByPW51bGw7aWYoZSYmZS5wYXRoJiZlLnBhdGgubGVuZ3RoPjApaWYoQXJyYXkuaXNBcnJheShlLnBhdGgpKWZvcihsZXQgdCBvZiBlLnBhdGgpRGkuZXhpc3RzU3luYyh0KSYmKHI9dC5lbmRzV2l0aChcIi52YXVsdFwiKT90OmAke3R9LnZhdWx0YCk7ZWxzZSByPWUucGF0aC5lbmRzV2l0aChcIi52YXVsdFwiKT9lLnBhdGg6YCR7ZS5wYXRofS52YXVsdGA7ZWxzZSByPV9pLnJlc29sdmUocHJvY2Vzcy5jd2QoKSxcIi5lbnYudmF1bHRcIik7cmV0dXJuIERpLmV4aXN0c1N5bmMocik/cjpudWxsfWZ1bmN0aW9uIEFzKGUpe3JldHVybiBlWzBdPT09XCJ+XCI/X2kuam9pbihycC5ob21lZGlyKCksZS5zbGljZSgxKSk6ZX1mdW5jdGlvbiBjcChlKXthcChcIkxvYWRpbmcgZW52IGZyb20gZW5jcnlwdGVkIC5lbnYudmF1bHRcIik7bGV0IHI9Qi5fcGFyc2VWYXVsdChlKSx0PXByb2Nlc3MuZW52O3JldHVybiBlJiZlLnByb2Nlc3NFbnYhPW51bGwmJih0PWUucHJvY2Vzc0VudiksQi5wb3B1bGF0ZSh0LHIsZSkse3BhcnNlZDpyfX1mdW5jdGlvbiBwcChlKXtsZXQgcj1faS5yZXNvbHZlKHByb2Nlc3MuY3dkKCksXCIuZW52XCIpLHQ9XCJ1dGY4XCIsbj0hIShlJiZlLmRlYnVnKTtlJiZlLmVuY29kaW5nP3Q9ZS5lbmNvZGluZzpuJiZ0bihcIk5vIGVuY29kaW5nIGlzIHNwZWNpZmllZC4gVVRGLTggaXMgdXNlZCBieSBkZWZhdWx0XCIpO2xldCBpPVtyXTtpZihlJiZlLnBhdGgpaWYoIUFycmF5LmlzQXJyYXkoZS5wYXRoKSlpPVtBcyhlLnBhdGgpXTtlbHNle2k9W107Zm9yKGxldCBsIG9mIGUucGF0aClpLnB1c2goQXMobCkpfWxldCBvLHM9e307Zm9yKGxldCBsIG9mIGkpdHJ5e2xldCB1PUIucGFyc2UoRGkucmVhZEZpbGVTeW5jKGwse2VuY29kaW5nOnR9KSk7Qi5wb3B1bGF0ZShzLHUsZSl9Y2F0Y2godSl7biYmdG4oYEZhaWxlZCB0byBsb2FkICR7bH0gJHt1Lm1lc3NhZ2V9YCksbz11fWxldCBhPXByb2Nlc3MuZW52O3JldHVybiBlJiZlLnByb2Nlc3NFbnYhPW51bGwmJihhPWUucHJvY2Vzc0VudiksQi5wb3B1bGF0ZShhLHMsZSksbz97cGFyc2VkOnMsZXJyb3I6b306e3BhcnNlZDpzfX1mdW5jdGlvbiBkcChlKXtpZihJcyhlKS5sZW5ndGg9PT0wKXJldHVybiBCLmNvbmZpZ0RvdGVudihlKTtsZXQgcj1rcyhlKTtyZXR1cm4gcj9CLl9jb25maWdWYXVsdChlKToobHAoYFlvdSBzZXQgRE9URU5WX0tFWSBidXQgeW91IGFyZSBtaXNzaW5nIGEgLmVudi52YXVsdCBmaWxlIGF0ICR7cn0uIERpZCB5b3UgZm9yZ2V0IHRvIGJ1aWxkIGl0P2ApLEIuY29uZmlnRG90ZW52KGUpKX1mdW5jdGlvbiBtcChlLHIpe2xldCB0PUJ1ZmZlci5mcm9tKHIuc2xpY2UoLTY0KSxcImhleFwiKSxuPUJ1ZmZlci5mcm9tKGUsXCJiYXNlNjRcIiksaT1uLnN1YmFycmF5KDAsMTIpLG89bi5zdWJhcnJheSgtMTYpO249bi5zdWJhcnJheSgxMiwtMTYpO3RyeXtsZXQgcz10cC5jcmVhdGVEZWNpcGhlcml2KFwiYWVzLTI1Ni1nY21cIix0LGkpO3JldHVybiBzLnNldEF1dGhUYWcobyksYCR7cy51cGRhdGUobil9JHtzLmZpbmFsKCl9YH1jYXRjaChzKXtsZXQgYT1zIGluc3RhbmNlb2YgUmFuZ2VFcnJvcixsPXMubWVzc2FnZT09PVwiSW52YWxpZCBrZXkgbGVuZ3RoXCIsdT1zLm1lc3NhZ2U9PT1cIlVuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YVwiO2lmKGF8fGwpe2xldCBjPW5ldyBFcnJvcihcIklOVkFMSURfRE9URU5WX0tFWTogSXQgbXVzdCBiZSA2NCBjaGFyYWN0ZXJzIGxvbmcgKG9yIG1vcmUpXCIpO3Rocm93IGMuY29kZT1cIklOVkFMSURfRE9URU5WX0tFWVwiLGN9ZWxzZSBpZih1KXtsZXQgYz1uZXcgRXJyb3IoXCJERUNSWVBUSU9OX0ZBSUxFRDogUGxlYXNlIGNoZWNrIHlvdXIgRE9URU5WX0tFWVwiKTt0aHJvdyBjLmNvZGU9XCJERUNSWVBUSU9OX0ZBSUxFRFwiLGN9ZWxzZSB0aHJvdyBzfX1mdW5jdGlvbiBmcChlLHIsdD17fSl7bGV0IG49ISEodCYmdC5kZWJ1ZyksaT0hISh0JiZ0Lm92ZXJyaWRlKTtpZih0eXBlb2YgciE9XCJvYmplY3RcIil7bGV0IG89bmV3IEVycm9yKFwiT0JKRUNUX1JFUVVJUkVEOiBQbGVhc2UgY2hlY2sgdGhlIHByb2Nlc3NFbnYgYXJndW1lbnQgYmVpbmcgcGFzc2VkIHRvIHBvcHVsYXRlXCIpO3Rocm93IG8uY29kZT1cIk9CSkVDVF9SRVFVSVJFRFwiLG99Zm9yKGxldCBvIG9mIE9iamVjdC5rZXlzKHIpKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pPyhpPT09ITAmJihlW29dPXJbb10pLG4mJnRuKGk9PT0hMD9gXCIke299XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFuZCBXQVMgb3ZlcndyaXR0ZW5gOmBcIiR7b31cIiBpcyBhbHJlYWR5IGRlZmluZWQgYW5kIHdhcyBOT1Qgb3ZlcndyaXR0ZW5gKSk6ZVtvXT1yW29dfXZhciBCPXtjb25maWdEb3RlbnY6cHAsX2NvbmZpZ1ZhdWx0OmNwLF9wYXJzZVZhdWx0OnNwLGNvbmZpZzpkcCxkZWNyeXB0Om1wLHBhcnNlOm9wLHBvcHVsYXRlOmZwfTtOZS5leHBvcnRzLmNvbmZpZ0RvdGVudj1CLmNvbmZpZ0RvdGVudjtOZS5leHBvcnRzLl9jb25maWdWYXVsdD1CLl9jb25maWdWYXVsdDtOZS5leHBvcnRzLl9wYXJzZVZhdWx0PUIuX3BhcnNlVmF1bHQ7TmUuZXhwb3J0cy5jb25maWc9Qi5jb25maWc7TmUuZXhwb3J0cy5kZWNyeXB0PUIuZGVjcnlwdDtOZS5leHBvcnRzLnBhcnNlPUIucGFyc2U7TmUuZXhwb3J0cy5wb3B1bGF0ZT1CLnBvcHVsYXRlO05lLmV4cG9ydHM9Qn0pO3ZhciBMcz1uZSgoTmgsb24pPT57XCJ1c2Ugc3RyaWN0XCI7b24uZXhwb3J0cz0oZT17fSk9PntsZXQgcjtpZihlLnJlcG9Vcmwpcj1lLnJlcG9Vcmw7ZWxzZSBpZihlLnVzZXImJmUucmVwbylyPWBodHRwczovL2dpdGh1Yi5jb20vJHtlLnVzZXJ9LyR7ZS5yZXBvfWA7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbmVlZCB0byBzcGVjaWZ5IGVpdGhlciB0aGUgYHJlcG9VcmxgIG9wdGlvbiBvciBib3RoIHRoZSBgdXNlcmAgYW5kIGByZXBvYCBvcHRpb25zXCIpO2xldCB0PW5ldyBVUkwoYCR7cn0vaXNzdWVzL25ld2ApLG49W1wiYm9keVwiLFwidGl0bGVcIixcImxhYmVsc1wiLFwidGVtcGxhdGVcIixcIm1pbGVzdG9uZVwiLFwiYXNzaWduZWVcIixcInByb2plY3RzXCJdO2ZvcihsZXQgaSBvZiBuKXtsZXQgbz1lW2ldO2lmKG8hPT12b2lkIDApe2lmKGk9PT1cImxhYmVsc1wifHxpPT09XCJwcm9qZWN0c1wiKXtpZighQXJyYXkuaXNBcnJheShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXFxgJHtpfVxcYCBvcHRpb24gc2hvdWxkIGJlIGFuIGFycmF5YCk7bz1vLmpvaW4oXCIsXCIpfXQuc2VhcmNoUGFyYW1zLnNldChpLG8pfX1yZXR1cm4gdC50b1N0cmluZygpfTtvbi5leHBvcnRzLmRlZmF1bHQ9b24uZXhwb3J0c30pO3ZhciBRaT1uZSgocGIsaWEpPT57XCJ1c2Ugc3RyaWN0XCI7aWEuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocix0LG4saSxvKXtyZXR1cm4gcjx0fHxuPHQ/cj5uP24rMTpyKzE6aT09PW8/dDp0KzF9cmV0dXJuIGZ1bmN0aW9uKHIsdCl7aWYocj09PXQpcmV0dXJuIDA7aWYoci5sZW5ndGg+dC5sZW5ndGgpe3ZhciBuPXI7cj10LHQ9bn1mb3IodmFyIGk9ci5sZW5ndGgsbz10Lmxlbmd0aDtpPjAmJnIuY2hhckNvZGVBdChpLTEpPT09dC5jaGFyQ29kZUF0KG8tMSk7KWktLSxvLS07Zm9yKHZhciBzPTA7czxpJiZyLmNoYXJDb2RlQXQocyk9PT10LmNoYXJDb2RlQXQocyk7KXMrKztpZihpLT1zLG8tPXMsaT09PTB8fG88MylyZXR1cm4gbzt2YXIgYT0wLGwsdSxjLHAsZCxmLGcsaCxJLFAsUyxiLE89W107Zm9yKGw9MDtsPGk7bCsrKU8ucHVzaChsKzEpLE8ucHVzaChyLmNoYXJDb2RlQXQocytsKSk7Zm9yKHZhciBtZT1PLmxlbmd0aC0xO2E8by0zOylmb3IoST10LmNoYXJDb2RlQXQocysodT1hKSksUD10LmNoYXJDb2RlQXQocysoYz1hKzEpKSxTPXQuY2hhckNvZGVBdChzKyhwPWErMikpLGI9dC5jaGFyQ29kZUF0KHMrKGQ9YSszKSksZj1hKz00LGw9MDtsPG1lO2wrPTIpZz1PW2xdLGg9T1tsKzFdLHU9ZShnLHUsYyxJLGgpLGM9ZSh1LGMscCxQLGgpLHA9ZShjLHAsZCxTLGgpLGY9ZShwLGQsZixiLGgpLE9bbF09ZixkPXAscD1jLGM9dSx1PWc7Zm9yKDthPG87KWZvcihJPXQuY2hhckNvZGVBdChzKyh1PWEpKSxmPSsrYSxsPTA7bDxtZTtsKz0yKWc9T1tsXSxPW2xdPWY9ZShnLHUsZixJLE9bbCsxXSksdT1nO3JldHVybiBmfX0oKX0pO3ZhciB1YT1EbygoKT0+e1widXNlIHN0cmljdFwifSk7dmFyIGNhPURvKCgpPT57XCJ1c2Ugc3RyaWN0XCJ9KTt2YXIgVmY9e307dHIoVmYse0RNTUY6KCk9Pmx0LERlYnVnOigpPT5OLERlY2ltYWw6KCk9PnZlLEV4dGVuc2lvbnM6KCk9PmVpLE1ldHJpY3NDbGllbnQ6KCk9PkxyLFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3I6KCk9PlQsUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3I6KCk9PnosUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3I6KCk9PmxlLFByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3I6KCk9PmosUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yOigpPT5aLFB1YmxpYzooKT0+cmksU3FsOigpPT5vZSxjcmVhdGVQYXJhbTooKT0+UmEsZGVmaW5lRG1tZlByb3BlcnR5OigpPT5EYSxkZXNlcmlhbGl6ZUpzb25SZXNwb25zZTooKT0+VHIsZGVzZXJpYWxpemVSYXdSZXN1bHQ6KCk9PlluLGRtbWZUb1J1bnRpbWVEYXRhTW9kZWw6KCk9PlpzLGVtcHR5OigpPT5MYSxnZXRQcmlzbWFDbGllbnQ6KCk9Pmd1LGdldFJ1bnRpbWU6KCk9PnFuLGpvaW46KCk9Pk5hLG1ha2VTdHJpY3RFbnVtOigpPT5odSxtYWtlVHlwZWRRdWVyeUZhY3Rvcnk6KCk9Pl9hLG9iamVjdEVudW1WYWx1ZXM6KCk9PlNuLHJhdzooKT0+ZW8sc2VyaWFsaXplSnNvblF1ZXJ5OigpPT5Ebixza2lwOigpPT5PbixzcWx0YWc6KCk9PnJvLHdhcm5FbnZDb25mbGljdHM6KCk9Pnl1LHdhcm5PbmNlOigpPT5vdH0pO21vZHVsZS5leHBvcnRzPVB1KFZmKTt2YXIgZWk9e307dHIoZWkse2RlZmluZUV4dGVuc2lvbjooKT0+Tm8sZ2V0RXh0ZW5zaW9uQ29udGV4dDooKT0+TG99KTtmdW5jdGlvbiBObyhlKXtyZXR1cm4gdHlwZW9mIGU9PVwiZnVuY3Rpb25cIj9lOnI9PnIuJGV4dGVuZHMoZSl9ZnVuY3Rpb24gTG8oZSl7cmV0dXJuIGV9dmFyIHJpPXt9O3RyKHJpLHt2YWxpZGF0b3I6KCk9PkZvfSk7ZnVuY3Rpb24gRm8oLi4uZSl7cmV0dXJuIHI9PnJ9dmFyIGp0PXt9O3RyKGp0LHskOigpPT5WbyxiZ0JsYWNrOigpPT5fdSxiZ0JsdWU6KCk9Pk11LGJnQ3lhbjooKT0+cXUsYmdHcmVlbjooKT0+THUsYmdNYWdlbnRhOigpPT4kdSxiZ1JlZDooKT0+TnUsYmdXaGl0ZTooKT0+anUsYmdZZWxsb3c6KCk9PkZ1LGJsYWNrOigpPT5JdSxibHVlOigpPT5ucixib2xkOigpPT5XLGN5YW46KCk9Pk9lLGRpbTooKT0+SWUsZ3JheTooKT0+SHIsZ3JlZW46KCk9PnFlLGdyZXk6KCk9PkR1LGhpZGRlbjooKT0+Q3UsaW52ZXJzZTooKT0+UnUsaXRhbGljOigpPT5TdSxtYWdlbnRhOigpPT5rdSxyZWQ6KCk9PmNlLHJlc2V0OigpPT5UdSxzdHJpa2V0aHJvdWdoOigpPT5BdSx1bmRlcmxpbmU6KCk9Plksd2hpdGU6KCk9Pk91LHllbGxvdzooKT0+a2V9KTt2YXIgdGksTW8sJG8scW8sam89ITA7dHlwZW9mIHByb2Nlc3M8XCJ1XCImJih7Rk9SQ0VfQ09MT1I6dGksTk9ERV9ESVNBQkxFX0NPTE9SUzpNbyxOT19DT0xPUjokbyxURVJNOnFvfT1wcm9jZXNzLmVudnx8e30sam89cHJvY2Vzcy5zdGRvdXQmJnByb2Nlc3Muc3Rkb3V0LmlzVFRZKTt2YXIgVm89e2VuYWJsZWQ6IU1vJiYkbz09bnVsbCYmcW8hPT1cImR1bWJcIiYmKHRpIT1udWxsJiZ0aSE9PVwiMFwifHxqbyl9O2Z1bmN0aW9uIEYoZSxyKXtsZXQgdD1uZXcgUmVnRXhwKGBcXFxceDFiXFxcXFske3J9bWAsXCJnXCIpLG49YFxceDFCWyR7ZX1tYCxpPWBcXHgxQlske3J9bWA7cmV0dXJuIGZ1bmN0aW9uKG8pe3JldHVybiFWby5lbmFibGVkfHxvPT1udWxsP286bisofihcIlwiK28pLmluZGV4T2YoaSk/by5yZXBsYWNlKHQsaStuKTpvKStpfX12YXIgVHU9RigwLDApLFc9RigxLDIyKSxJZT1GKDIsMjIpLFN1PUYoMywyMyksWT1GKDQsMjQpLFJ1PUYoNywyNyksQ3U9Rig4LDI4KSxBdT1GKDksMjkpLEl1PUYoMzAsMzkpLGNlPUYoMzEsMzkpLHFlPUYoMzIsMzkpLGtlPUYoMzMsMzkpLG5yPUYoMzQsMzkpLGt1PUYoMzUsMzkpLE9lPUYoMzYsMzkpLE91PUYoMzcsMzkpLEhyPUYoOTAsMzkpLER1PUYoOTAsMzkpLF91PUYoNDAsNDkpLE51PUYoNDEsNDkpLEx1PUYoNDIsNDkpLEZ1PUYoNDMsNDkpLE11PUYoNDQsNDkpLCR1PUYoNDUsNDkpLHF1PUYoNDYsNDkpLGp1PUYoNDcsNDkpO3ZhciBWdT0xMDAsQm89W1wiZ3JlZW5cIixcInllbGxvd1wiLFwiYmx1ZVwiLFwibWFnZW50YVwiLFwiY3lhblwiLFwicmVkXCJdLEtyPVtdLFVvPURhdGUubm93KCksQnU9MCxuaT10eXBlb2YgcHJvY2VzczxcInVcIj9wcm9jZXNzLmVudjp7fTtnbG9iYWxUaGlzLkRFQlVHPz89bmkuREVCVUc/P1wiXCI7Z2xvYmFsVGhpcy5ERUJVR19DT0xPUlM/Pz1uaS5ERUJVR19DT0xPUlM/bmkuREVCVUdfQ09MT1JTPT09XCJ0cnVlXCI6ITA7dmFyIFlyPXtlbmFibGUoZSl7dHlwZW9mIGU9PVwic3RyaW5nXCImJihnbG9iYWxUaGlzLkRFQlVHPWUpfSxkaXNhYmxlKCl7bGV0IGU9Z2xvYmFsVGhpcy5ERUJVRztyZXR1cm4gZ2xvYmFsVGhpcy5ERUJVRz1cIlwiLGV9LGVuYWJsZWQoZSl7bGV0IHI9Z2xvYmFsVGhpcy5ERUJVRy5zcGxpdChcIixcIikubWFwKGk9PmkucmVwbGFjZSgvWy4rP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKSksdD1yLnNvbWUoaT0+aT09PVwiXCJ8fGlbMF09PT1cIi1cIj8hMTplLm1hdGNoKFJlZ0V4cChpLnNwbGl0KFwiKlwiKS5qb2luKFwiLipcIikrXCIkXCIpKSksbj1yLnNvbWUoaT0+aT09PVwiXCJ8fGlbMF0hPT1cIi1cIj8hMTplLm1hdGNoKFJlZ0V4cChpLnNsaWNlKDEpLnNwbGl0KFwiKlwiKS5qb2luKFwiLipcIikrXCIkXCIpKSk7cmV0dXJuIHQmJiFufSxsb2c6KC4uLmUpPT57bGV0W3IsdCwuLi5uXT1lOyhjb25zb2xlLndhcm4/P2NvbnNvbGUubG9nKShgJHtyfSAke3R9YCwuLi5uKX0sZm9ybWF0dGVyczp7fX07ZnVuY3Rpb24gVXUoZSl7bGV0IHI9e2NvbG9yOkJvW0J1KyslQm8ubGVuZ3RoXSxlbmFibGVkOllyLmVuYWJsZWQoZSksbmFtZXNwYWNlOmUsbG9nOllyLmxvZyxleHRlbmQ6KCk9Pnt9fSx0PSguLi5uKT0+e2xldHtlbmFibGVkOmksbmFtZXNwYWNlOm8sY29sb3I6cyxsb2c6YX09cjtpZihuLmxlbmd0aCE9PTAmJktyLnB1c2goW28sLi4ubl0pLEtyLmxlbmd0aD5WdSYmS3Iuc2hpZnQoKSxZci5lbmFibGVkKG8pfHxpKXtsZXQgbD1uLm1hcChjPT50eXBlb2YgYz09XCJzdHJpbmdcIj9jOkd1KGMpKSx1PWArJHtEYXRlLm5vdygpLVVvfW1zYDtVbz1EYXRlLm5vdygpLGdsb2JhbFRoaXMuREVCVUdfQ09MT1JTP2EoanRbc10oVyhvKSksLi4ubCxqdFtzXSh1KSk6YShvLC4uLmwsdSl9fTtyZXR1cm4gbmV3IFByb3h5KHQse2dldDoobixpKT0+cltpXSxzZXQ6KG4saSxvKT0+cltpXT1vfSl9dmFyIE49bmV3IFByb3h5KFV1LHtnZXQ6KGUscik9PllyW3JdLHNldDooZSxyLHQpPT5ZcltyXT10fSk7ZnVuY3Rpb24gR3UoZSxyPTIpe2xldCB0PW5ldyBTZXQ7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUsKG4saSk9PntpZih0eXBlb2YgaT09XCJvYmplY3RcIiYmaSE9PW51bGwpe2lmKHQuaGFzKGkpKXJldHVyblwiW0NpcmN1bGFyICpdXCI7dC5hZGQoaSl9ZWxzZSBpZih0eXBlb2YgaT09XCJiaWdpbnRcIilyZXR1cm4gaS50b1N0cmluZygpO3JldHVybiBpfSxyKX1mdW5jdGlvbiBHbyhlPTc1MDApe2xldCByPUtyLm1hcCgoW3QsLi4ubl0pPT5gJHt0fSAke24ubWFwKGk9PnR5cGVvZiBpPT1cInN0cmluZ1wiP2k6SlNPTi5zdHJpbmdpZnkoaSkpLmpvaW4oXCIgXCIpfWApLmpvaW4oYFxuYCk7cmV0dXJuIHIubGVuZ3RoPGU/cjpyLnNsaWNlKC1lKX1mdW5jdGlvbiBRbygpe0tyLmxlbmd0aD0wfXZhciBncj1OO3ZhciBXbz1rKHJlcXVpcmUoXCJub2RlOmZzXCIpKTtmdW5jdGlvbiBpaSgpe2xldCBlPXByb2Nlc3MuZW52LlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWTtpZighKGUmJldvLmRlZmF1bHQuZXhpc3RzU3luYyhlKSkmJnByb2Nlc3MuYXJjaD09PVwiaWEzMlwiKXRocm93IG5ldyBFcnJvcignVGhlIGRlZmF1bHQgcXVlcnkgZW5naW5lIHR5cGUgKE5vZGUtQVBJLCBcImxpYnJhcnlcIikgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgZm9yIDMyYml0IE5vZGUuIFBsZWFzZSBzZXQgYGVuZ2luZVR5cGUgPSBcImJpbmFyeVwiYCBpbiB0aGUgXCJnZW5lcmF0b3JcIiBibG9jayBvZiB5b3VyIFwic2NoZW1hLnByaXNtYVwiIGZpbGUgKG9yIHVzZSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIFwiUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRT1iaW5hcnlcIiBhbmQvb3IgXCJQUklTTUFfQ0xJX1FVRVJZX0VOR0lORV9UWVBFPWJpbmFyeVwiLiknKX12YXIgb2k9W1wiZGFyd2luXCIsXCJkYXJ3aW4tYXJtNjRcIixcImRlYmlhbi1vcGVuc3NsLTEuMC54XCIsXCJkZWJpYW4tb3BlbnNzbC0xLjEueFwiLFwiZGViaWFuLW9wZW5zc2wtMy4wLnhcIixcInJoZWwtb3BlbnNzbC0xLjAueFwiLFwicmhlbC1vcGVuc3NsLTEuMS54XCIsXCJyaGVsLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMS4xLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMS4wLnhcIixcImxpbnV4LWFybTY0LW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LWFybS1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1hcm0tb3BlbnNzbC0xLjAueFwiLFwibGludXgtYXJtLW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW11c2xcIixcImxpbnV4LW11c2wtb3BlbnNzbC0zLjAueFwiLFwibGludXgtbXVzbC1hcm02NC1vcGVuc3NsLTEuMS54XCIsXCJsaW51eC1tdXNsLWFybTY0LW9wZW5zc2wtMy4wLnhcIixcImxpbnV4LW5peG9zXCIsXCJsaW51eC1zdGF0aWMteDY0XCIsXCJsaW51eC1zdGF0aWMtYXJtNjRcIixcIndpbmRvd3NcIixcImZyZWVic2QxMVwiLFwiZnJlZWJzZDEyXCIsXCJmcmVlYnNkMTNcIixcImZyZWVic2QxNFwiLFwiZnJlZWJzZDE1XCIsXCJvcGVuYnNkXCIsXCJuZXRic2RcIixcImFybVwiXTt2YXIgVnQ9XCJsaWJxdWVyeV9lbmdpbmVcIjtmdW5jdGlvbiBCdChlLHIpe2xldCB0PXI9PT1cInVybFwiO3JldHVybiBlLmluY2x1ZGVzKFwid2luZG93c1wiKT90P1wicXVlcnlfZW5naW5lLmRsbC5ub2RlXCI6YHF1ZXJ5X2VuZ2luZS0ke2V9LmRsbC5ub2RlYDplLmluY2x1ZGVzKFwiZGFyd2luXCIpP3Q/YCR7VnR9LmR5bGliLm5vZGVgOmAke1Z0fS0ke2V9LmR5bGliLm5vZGVgOnQ/YCR7VnR9LnNvLm5vZGVgOmAke1Z0fS0ke2V9LnNvLm5vZGVgfXZhciBZbz1rKHJlcXVpcmUoXCJub2RlOmNoaWxkX3Byb2Nlc3NcIikpLGNpPWsocmVxdWlyZShcIm5vZGU6ZnMvcHJvbWlzZXNcIikpLEp0PWsocmVxdWlyZShcIm5vZGU6b3NcIikpO3ZhciBEZT1TeW1ib2wuZm9yKFwiQHRzLXBhdHRlcm4vbWF0Y2hlclwiKSxRdT1TeW1ib2wuZm9yKFwiQHRzLXBhdHRlcm4vaXNWYXJpYWRpY1wiKSxHdD1cIkB0cy1wYXR0ZXJuL2Fub255bW91cy1zZWxlY3Qta2V5XCIsc2k9ZT0+ISEoZSYmdHlwZW9mIGU9PVwib2JqZWN0XCIpLFV0PWU9PmUmJiEhZVtEZV0sRWU9KGUscix0KT0+e2lmKFV0KGUpKXtsZXQgbj1lW0RlXSgpLHttYXRjaGVkOmksc2VsZWN0aW9uczpvfT1uLm1hdGNoKHIpO3JldHVybiBpJiZvJiZPYmplY3Qua2V5cyhvKS5mb3JFYWNoKHM9PnQocyxvW3NdKSksaX1pZihzaShlKSl7aWYoIXNpKHIpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKCFBcnJheS5pc0FycmF5KHIpKXJldHVybiExO2xldCBuPVtdLGk9W10sbz1bXTtmb3IobGV0IHMgb2YgZS5rZXlzKCkpe2xldCBhPWVbc107VXQoYSkmJmFbUXVdP28ucHVzaChhKTpvLmxlbmd0aD9pLnB1c2goYSk6bi5wdXNoKGEpfWlmKG8ubGVuZ3RoKXtpZihvLmxlbmd0aD4xKXRocm93IG5ldyBFcnJvcihcIlBhdHRlcm4gZXJyb3I6IFVzaW5nIGAuLi5QLmFycmF5KC4uLilgIHNldmVyYWwgdGltZXMgaW4gYSBzaW5nbGUgcGF0dGVybiBpcyBub3QgYWxsb3dlZC5cIik7aWYoci5sZW5ndGg8bi5sZW5ndGgraS5sZW5ndGgpcmV0dXJuITE7bGV0IHM9ci5zbGljZSgwLG4ubGVuZ3RoKSxhPWkubGVuZ3RoPT09MD9bXTpyLnNsaWNlKC1pLmxlbmd0aCksbD1yLnNsaWNlKG4ubGVuZ3RoLGkubGVuZ3RoPT09MD8xLzA6LWkubGVuZ3RoKTtyZXR1cm4gbi5ldmVyeSgodSxjKT0+RWUodSxzW2NdLHQpKSYmaS5ldmVyeSgodSxjKT0+RWUodSxhW2NdLHQpKSYmKG8ubGVuZ3RoPT09MHx8RWUob1swXSxsLHQpKX1yZXR1cm4gZS5sZW5ndGg9PT1yLmxlbmd0aCYmZS5ldmVyeSgocyxhKT0+RWUocyxyW2FdLHQpKX1yZXR1cm4gUmVmbGVjdC5vd25LZXlzKGUpLmV2ZXJ5KG49PntsZXQgaT1lW25dO3JldHVybihuIGluIHJ8fFV0KG89aSkmJm9bRGVdKCkubWF0Y2hlclR5cGU9PT1cIm9wdGlvbmFsXCIpJiZFZShpLHJbbl0sdCk7dmFyIG99KX1yZXR1cm4gT2JqZWN0LmlzKHIsZSl9LEdlPWU9Pnt2YXIgcix0LG47cmV0dXJuIHNpKGUpP1V0KGUpPyhyPSh0PShuPWVbRGVdKCkpLmdldFNlbGVjdGlvbktleXMpPT1udWxsP3ZvaWQgMDp0LmNhbGwobikpIT1udWxsP3I6W106QXJyYXkuaXNBcnJheShlKT96cihlLEdlKTp6cihPYmplY3QudmFsdWVzKGUpLEdlKTpbXX0senI9KGUscik9PmUucmVkdWNlKCh0LG4pPT50LmNvbmNhdChyKG4pKSxbXSk7ZnVuY3Rpb24gcGUoZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx7b3B0aW9uYWw6KCk9Pld1KGUpLGFuZDpyPT5xKGUsciksb3I6cj0+SnUoZSxyKSxzZWxlY3Q6cj0+cj09PXZvaWQgMD9KbyhlKTpKbyhyLGUpfSl9ZnVuY3Rpb24gV3UoZSl7cmV0dXJuIHBlKHtbRGVdOigpPT4oe21hdGNoOnI9PntsZXQgdD17fSxuPShpLG8pPT57dFtpXT1vfTtyZXR1cm4gcj09PXZvaWQgMD8oR2UoZSkuZm9yRWFjaChpPT5uKGksdm9pZCAwKSkse21hdGNoZWQ6ITAsc2VsZWN0aW9uczp0fSk6e21hdGNoZWQ6RWUoZSxyLG4pLHNlbGVjdGlvbnM6dH19LGdldFNlbGVjdGlvbktleXM6KCk9PkdlKGUpLG1hdGNoZXJUeXBlOlwib3B0aW9uYWxcIn0pfSl9ZnVuY3Rpb24gcSguLi5lKXtyZXR1cm4gcGUoe1tEZV06KCk9Pih7bWF0Y2g6cj0+e2xldCB0PXt9LG49KGksbyk9Pnt0W2ldPW99O3JldHVybnttYXRjaGVkOmUuZXZlcnkoaT0+RWUoaSxyLG4pKSxzZWxlY3Rpb25zOnR9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT56cihlLEdlKSxtYXRjaGVyVHlwZTpcImFuZFwifSl9KX1mdW5jdGlvbiBKdSguLi5lKXtyZXR1cm4gcGUoe1tEZV06KCk9Pih7bWF0Y2g6cj0+e2xldCB0PXt9LG49KGksbyk9Pnt0W2ldPW99O3JldHVybiB6cihlLEdlKS5mb3JFYWNoKGk9Pm4oaSx2b2lkIDApKSx7bWF0Y2hlZDplLnNvbWUoaT0+RWUoaSxyLG4pKSxzZWxlY3Rpb25zOnR9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT56cihlLEdlKSxtYXRjaGVyVHlwZTpcIm9yXCJ9KX0pfWZ1bmN0aW9uIEMoZSl7cmV0dXJue1tEZV06KCk9Pih7bWF0Y2g6cj0+KHttYXRjaGVkOiEhZShyKX0pfSl9fWZ1bmN0aW9uIEpvKC4uLmUpe2xldCByPXR5cGVvZiBlWzBdPT1cInN0cmluZ1wiP2VbMF06dm9pZCAwLHQ9ZS5sZW5ndGg9PT0yP2VbMV06dHlwZW9mIGVbMF09PVwic3RyaW5nXCI/dm9pZCAwOmVbMF07cmV0dXJuIHBlKHtbRGVdOigpPT4oe21hdGNoOm49PntsZXQgaT17W3I/P0d0XTpufTtyZXR1cm57bWF0Y2hlZDp0PT09dm9pZCAwfHxFZSh0LG4sKG8scyk9PntpW29dPXN9KSxzZWxlY3Rpb25zOml9fSxnZXRTZWxlY3Rpb25LZXlzOigpPT5bcj8/R3RdLmNvbmNhdCh0PT09dm9pZCAwP1tdOkdlKHQpKX0pfSl9ZnVuY3Rpb24geWUoZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm51bWJlclwifWZ1bmN0aW9uIGplKGUpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIn1mdW5jdGlvbiBWZShlKXtyZXR1cm4gdHlwZW9mIGU9PVwiYmlnaW50XCJ9dmFyIGVnPXBlKEMoZnVuY3Rpb24oZSl7cmV0dXJuITB9KSk7dmFyIEJlPWU9Pk9iamVjdC5hc3NpZ24ocGUoZSkse3N0YXJ0c1dpdGg6cj0+e3JldHVybiBCZShxKGUsKHQ9cixDKG49PmplKG4pJiZuLnN0YXJ0c1dpdGgodCkpKSkpO3ZhciB0fSxlbmRzV2l0aDpyPT57cmV0dXJuIEJlKHEoZSwodD1yLEMobj0+amUobikmJm4uZW5kc1dpdGgodCkpKSkpO3ZhciB0fSxtaW5MZW5ndGg6cj0+QmUocShlLCh0PT5DKG49PmplKG4pJiZuLmxlbmd0aD49dCkpKHIpKSksbGVuZ3RoOnI9PkJlKHEoZSwodD0+QyhuPT5qZShuKSYmbi5sZW5ndGg9PT10KSkocikpKSxtYXhMZW5ndGg6cj0+QmUocShlLCh0PT5DKG49PmplKG4pJiZuLmxlbmd0aDw9dCkpKHIpKSksaW5jbHVkZXM6cj0+e3JldHVybiBCZShxKGUsKHQ9cixDKG49PmplKG4pJiZuLmluY2x1ZGVzKHQpKSkpKTt2YXIgdH0scmVnZXg6cj0+e3JldHVybiBCZShxKGUsKHQ9cixDKG49PmplKG4pJiYhIW4ubWF0Y2godCkpKSkpO3ZhciB0fX0pLHJnPUJlKEMoamUpKSxiZT1lPT5PYmplY3QuYXNzaWduKHBlKGUpLHtiZXR3ZWVuOihyLHQpPT5iZShxKGUsKChuLGkpPT5DKG89PnllKG8pJiZuPD1vJiZpPj1vKSkocix0KSkpLGx0OnI9PmJlKHEoZSwodD0+QyhuPT55ZShuKSYmbjx0KSkocikpKSxndDpyPT5iZShxKGUsKHQ9PkMobj0+eWUobikmJm4+dCkpKHIpKSksbHRlOnI9PmJlKHEoZSwodD0+QyhuPT55ZShuKSYmbjw9dCkpKHIpKSksZ3RlOnI9PmJlKHEoZSwodD0+QyhuPT55ZShuKSYmbj49dCkpKHIpKSksaW50OigpPT5iZShxKGUsQyhyPT55ZShyKSYmTnVtYmVyLmlzSW50ZWdlcihyKSkpKSxmaW5pdGU6KCk9PmJlKHEoZSxDKHI9PnllKHIpJiZOdW1iZXIuaXNGaW5pdGUocikpKSkscG9zaXRpdmU6KCk9PmJlKHEoZSxDKHI9PnllKHIpJiZyPjApKSksbmVnYXRpdmU6KCk9PmJlKHEoZSxDKHI9PnllKHIpJiZyPDApKSl9KSx0Zz1iZShDKHllKSksVWU9ZT0+T2JqZWN0LmFzc2lnbihwZShlKSx7YmV0d2Vlbjoocix0KT0+VWUocShlLCgobixpKT0+QyhvPT5WZShvKSYmbjw9byYmaT49bykpKHIsdCkpKSxsdDpyPT5VZShxKGUsKHQ9PkMobj0+VmUobikmJm48dCkpKHIpKSksZ3Q6cj0+VWUocShlLCh0PT5DKG49PlZlKG4pJiZuPnQpKShyKSkpLGx0ZTpyPT5VZShxKGUsKHQ9PkMobj0+VmUobikmJm48PXQpKShyKSkpLGd0ZTpyPT5VZShxKGUsKHQ9PkMobj0+VmUobikmJm4+PXQpKShyKSkpLHBvc2l0aXZlOigpPT5VZShxKGUsQyhyPT5WZShyKSYmcj4wKSkpLG5lZ2F0aXZlOigpPT5VZShxKGUsQyhyPT5WZShyKSYmcjwwKSkpfSksbmc9VWUoQyhWZSkpLGlnPXBlKEMoZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlPT1cImJvb2xlYW5cIn0pKSxvZz1wZShDKGZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09XCJzeW1ib2xcIn0pKSxzZz1wZShDKGZ1bmN0aW9uKGUpe3JldHVybiBlPT1udWxsfSkpLGFnPXBlKEMoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPW51bGx9KSk7dmFyIGFpPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3Iocil7bGV0IHQ7dHJ5e3Q9SlNPTi5zdHJpbmdpZnkocil9Y2F0Y2h7dD1yfXN1cGVyKGBQYXR0ZXJuIG1hdGNoaW5nIGVycm9yOiBubyBwYXR0ZXJuIG1hdGNoZXMgdmFsdWUgJHt0fWApLHRoaXMuaW5wdXQ9dm9pZCAwLHRoaXMuaW5wdXQ9cn19LGxpPXttYXRjaGVkOiExLHZhbHVlOnZvaWQgMH07ZnVuY3Rpb24gaHIoZSl7cmV0dXJuIG5ldyB1aShlLGxpKX12YXIgdWk9Y2xhc3MgZXtjb25zdHJ1Y3RvcihyLHQpe3RoaXMuaW5wdXQ9dm9pZCAwLHRoaXMuc3RhdGU9dm9pZCAwLHRoaXMuaW5wdXQ9cix0aGlzLnN0YXRlPXR9d2l0aCguLi5yKXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXM7bGV0IHQ9cltyLmxlbmd0aC0xXSxuPVtyWzBdXSxpO3IubGVuZ3RoPT09MyYmdHlwZW9mIHJbMV09PVwiZnVuY3Rpb25cIj9pPXJbMV06ci5sZW5ndGg+MiYmbi5wdXNoKC4uLnIuc2xpY2UoMSxyLmxlbmd0aC0xKSk7bGV0IG89ITEscz17fSxhPSh1LGMpPT57bz0hMCxzW3VdPWN9LGw9IW4uc29tZSh1PT5FZSh1LHRoaXMuaW5wdXQsYSkpfHxpJiYhaSh0aGlzLmlucHV0KT9saTp7bWF0Y2hlZDohMCx2YWx1ZTp0KG8/R3QgaW4gcz9zW0d0XTpzOnRoaXMuaW5wdXQsdGhpcy5pbnB1dCl9O3JldHVybiBuZXcgZSh0aGlzLmlucHV0LGwpfXdoZW4ocix0KXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXM7bGV0IG49ISFyKHRoaXMuaW5wdXQpO3JldHVybiBuZXcgZSh0aGlzLmlucHV0LG4/e21hdGNoZWQ6ITAsdmFsdWU6dCh0aGlzLmlucHV0LHRoaXMuaW5wdXQpfTpsaSl9b3RoZXJ3aXNlKHIpe3JldHVybiB0aGlzLnN0YXRlLm1hdGNoZWQ/dGhpcy5zdGF0ZS52YWx1ZTpyKHRoaXMuaW5wdXQpfWV4aGF1c3RpdmUoKXtpZih0aGlzLnN0YXRlLm1hdGNoZWQpcmV0dXJuIHRoaXMuc3RhdGUudmFsdWU7dGhyb3cgbmV3IGFpKHRoaXMuaW5wdXQpfXJ1bigpe3JldHVybiB0aGlzLmV4aGF1c3RpdmUoKX1yZXR1cm5UeXBlKCl7cmV0dXJuIHRoaXN9fTt2YXIgem89cmVxdWlyZShcIm5vZGU6dXRpbFwiKTt2YXIgSHU9e3dhcm46a2UoXCJwcmlzbWE6d2FyblwiKX0sS3U9e3dhcm46KCk9PiFwcm9jZXNzLmVudi5QUklTTUFfRElTQUJMRV9XQVJOSU5HU307ZnVuY3Rpb24gUXQoZSwuLi5yKXtLdS53YXJuKCkmJmNvbnNvbGUud2FybihgJHtIdS53YXJufSAke2V9YCwuLi5yKX12YXIgWXU9KDAsem8ucHJvbWlzaWZ5KShZby5kZWZhdWx0LmV4ZWMpLGVlPWdyKFwicHJpc21hOmdldC1wbGF0Zm9ybVwiKSx6dT1bXCIxLjAueFwiLFwiMS4xLnhcIixcIjMuMC54XCJdO2FzeW5jIGZ1bmN0aW9uIFpvKCl7bGV0IGU9SnQuZGVmYXVsdC5wbGF0Zm9ybSgpLHI9cHJvY2Vzcy5hcmNoO2lmKGU9PT1cImZyZWVic2RcIil7bGV0IHM9YXdhaXQgSHQoXCJmcmVlYnNkLXZlcnNpb25cIik7aWYocyYmcy50cmltKCkubGVuZ3RoPjApe2xldCBsPS9eKFxcZCspXFwuPy8uZXhlYyhzKTtpZihsKXJldHVybntwbGF0Zm9ybTpcImZyZWVic2RcIix0YXJnZXREaXN0cm86YGZyZWVic2Qke2xbMV19YCxhcmNoOnJ9fX1pZihlIT09XCJsaW51eFwiKXJldHVybntwbGF0Zm9ybTplLGFyY2g6cn07bGV0IHQ9YXdhaXQgWHUoKSxuPWF3YWl0IGFjKCksaT1yYyh7YXJjaDpyLGFyY2hGcm9tVW5hbWU6bixmYW1pbHlEaXN0cm86dC5mYW1pbHlEaXN0cm99KSx7bGlic3NsOm99PWF3YWl0IHRjKGkpO3JldHVybntwbGF0Zm9ybTpcImxpbnV4XCIsbGlic3NsOm8sYXJjaDpyLGFyY2hGcm9tVW5hbWU6biwuLi50fX1mdW5jdGlvbiBadShlKXtsZXQgcj0vXklEPVwiPyhbXlwiXFxuXSopXCI/JC9pbSx0PS9eSURfTElLRT1cIj8oW15cIlxcbl0qKVwiPyQvaW0sbj1yLmV4ZWMoZSksaT1uJiZuWzFdJiZuWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsbz10LmV4ZWMoZSkscz1vJiZvWzFdJiZvWzFdLnRvTG93ZXJDYXNlKCl8fFwiXCIsYT1ocih7aWQ6aSxpZExpa2U6c30pLndpdGgoe2lkOlwiYWxwaW5lXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm11c2xcIixmYW1pbHlEaXN0cm86bCxvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmFzcGJpYW5cIn0sKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwiYXJtXCIsZmFtaWx5RGlzdHJvOlwiZGViaWFuXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aXRoKHtpZDpcIm5peG9zXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcIm5peG9zXCIsb3JpZ2luYWxEaXN0cm86bCxmYW1pbHlEaXN0cm86XCJuaXhvc1wifSkpLndpdGgoe2lkOlwiZGViaWFuXCJ9LHtpZDpcInVidW50dVwifSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndpdGgoe2lkOlwicmhlbFwifSx7aWQ6XCJjZW50b3NcIn0se2lkOlwiZmVkb3JhXCJ9LCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcInJoZWxcIixmYW1pbHlEaXN0cm86XCJyaGVsXCIsb3JpZ2luYWxEaXN0cm86bH0pKS53aGVuKCh7aWRMaWtlOmx9KT0+bC5pbmNsdWRlcyhcImRlYmlhblwiKXx8bC5pbmNsdWRlcyhcInVidW50dVwiKSwoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86XCJkZWJpYW5cIixmYW1pbHlEaXN0cm86XCJkZWJpYW5cIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5pPT09XCJhcmNoXCJ8fGwuaW5jbHVkZXMoXCJhcmNoXCIpLCh7aWQ6bH0pPT4oe3RhcmdldERpc3RybzpcImRlYmlhblwiLGZhbWlseURpc3RybzpcImFyY2hcIixvcmlnaW5hbERpc3RybzpsfSkpLndoZW4oKHtpZExpa2U6bH0pPT5sLmluY2x1ZGVzKFwiY2VudG9zXCIpfHxsLmluY2x1ZGVzKFwiZmVkb3JhXCIpfHxsLmluY2x1ZGVzKFwicmhlbFwiKXx8bC5pbmNsdWRlcyhcInN1c2VcIiksKHtpZDpsfSk9Pih7dGFyZ2V0RGlzdHJvOlwicmhlbFwiLGZhbWlseURpc3RybzpcInJoZWxcIixvcmlnaW5hbERpc3RybzpsfSkpLm90aGVyd2lzZSgoe2lkOmx9KT0+KHt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86bH0pKTtyZXR1cm4gZWUoYEZvdW5kIGRpc3RybyBpbmZvOlxuJHtKU09OLnN0cmluZ2lmeShhLG51bGwsMil9YCksYX1hc3luYyBmdW5jdGlvbiBYdSgpe2xldCBlPVwiL2V0Yy9vcy1yZWxlYXNlXCI7dHJ5e2xldCByPWF3YWl0IGNpLmRlZmF1bHQucmVhZEZpbGUoZSx7ZW5jb2Rpbmc6XCJ1dGYtOFwifSk7cmV0dXJuIFp1KHIpfWNhdGNoe3JldHVybnt0YXJnZXREaXN0cm86dm9pZCAwLGZhbWlseURpc3Rybzp2b2lkIDAsb3JpZ2luYWxEaXN0cm86dm9pZCAwfX19ZnVuY3Rpb24gZWMoZSl7bGV0IHI9L15PcGVuU1NMXFxzKFxcZCtcXC5cXGQrKVxcLlxcZCsvLmV4ZWMoZSk7aWYocil7bGV0IHQ9YCR7clsxXX0ueGA7cmV0dXJuIFhvKHQpfX1mdW5jdGlvbiBIbyhlKXtsZXQgcj0vbGlic3NsXFwuc29cXC4oXFxkKShcXC5cXGQpPy8uZXhlYyhlKTtpZihyKXtsZXQgdD1gJHtyWzFdfSR7clsyXT8/XCIuMFwifS54YDtyZXR1cm4gWG8odCl9fWZ1bmN0aW9uIFhvKGUpe2xldCByPSgoKT0+e2lmKHJzKGUpKXJldHVybiBlO2xldCB0PWUuc3BsaXQoXCIuXCIpO3JldHVybiB0WzFdPVwiMFwiLHQuam9pbihcIi5cIil9KSgpO2lmKHp1LmluY2x1ZGVzKHIpKXJldHVybiByfWZ1bmN0aW9uIHJjKGUpe3JldHVybiBocihlKS53aXRoKHtmYW1pbHlEaXN0cm86XCJtdXNsXCJ9LCgpPT4oZWUoJ1RyeWluZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRocyBmb3IgXCJhbHBpbmVcIicpLFtcIi9saWJcIixcIi91c3IvbGliXCJdKSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwiZGViaWFuXCJ9LCh7YXJjaEZyb21VbmFtZTpyfSk9PihlZSgnVHJ5aW5nIHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzIGZvciBcImRlYmlhblwiIChhbmQgXCJ1YnVudHVcIiknKSxbYC91c3IvbGliLyR7cn0tbGludXgtZ251YCxgL2xpYi8ke3J9LWxpbnV4LWdudWBdKSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwicmhlbFwifSwoKT0+KGVlKCdUcnlpbmcgcGxhdGZvcm0tc3BlY2lmaWMgcGF0aHMgZm9yIFwicmhlbFwiJyksW1wiL2xpYjY0XCIsXCIvdXNyL2xpYjY0XCJdKSkub3RoZXJ3aXNlKCh7ZmFtaWx5RGlzdHJvOnIsYXJjaDp0LGFyY2hGcm9tVW5hbWU6bn0pPT4oZWUoYERvbid0IGtub3cgYW55IHBsYXRmb3JtLXNwZWNpZmljIHBhdGhzIGZvciBcIiR7cn1cIiBvbiAke3R9ICgke259KWApLFtdKSl9YXN5bmMgZnVuY3Rpb24gdGMoZSl7bGV0IHI9J2dyZXAgLXYgXCJsaWJzc2wuc28uMFwiJyx0PWF3YWl0IEtvKGUpO2lmKHQpe2VlKGBGb3VuZCBsaWJzc2wuc28gZmlsZSB1c2luZyBwbGF0Zm9ybS1zcGVjaWZpYyBwYXRoczogJHt0fWApO2xldCBvPUhvKHQpO2lmKGVlKGBUaGUgcGFyc2VkIGxpYnNzbCB2ZXJzaW9uIGlzOiAke299YCksbylyZXR1cm57bGlic3NsOm8sc3RyYXRlZ3k6XCJsaWJzc2wtc3BlY2lmaWMtcGF0aFwifX1lZSgnRmFsbGluZyBiYWNrIHRvIFwibGRjb25maWdcIiBhbmQgb3RoZXIgZ2VuZXJpYyBwYXRocycpO2xldCBuPWF3YWl0IEh0KGBsZGNvbmZpZyAtcCB8IHNlZCBcInMvLio9PnMqLy9cIiB8IHNlZCBcInN8LiovfHxcIiB8IGdyZXAgbGlic3NsIHwgc29ydCB8ICR7cn1gKTtpZihufHwobj1hd2FpdCBLbyhbXCIvbGliNjRcIixcIi91c3IvbGliNjRcIixcIi9saWJcIixcIi91c3IvbGliXCJdKSksbil7ZWUoYEZvdW5kIGxpYnNzbC5zbyBmaWxlIHVzaW5nIFwibGRjb25maWdcIiBvciBvdGhlciBnZW5lcmljIHBhdGhzOiAke259YCk7bGV0IG89SG8obik7aWYoZWUoYFRoZSBwYXJzZWQgbGlic3NsIHZlcnNpb24gaXM6ICR7b31gKSxvKXJldHVybntsaWJzc2w6byxzdHJhdGVneTpcImxkY29uZmlnXCJ9fWxldCBpPWF3YWl0IEh0KFwib3BlbnNzbCB2ZXJzaW9uIC12XCIpO2lmKGkpe2VlKGBGb3VuZCBvcGVuc3NsIGJpbmFyeSB3aXRoIHZlcnNpb246ICR7aX1gKTtsZXQgbz1lYyhpKTtpZihlZShgVGhlIHBhcnNlZCBvcGVuc3NsIHZlcnNpb24gaXM6ICR7b31gKSxvKXJldHVybntsaWJzc2w6byxzdHJhdGVneTpcIm9wZW5zc2wtYmluYXJ5XCJ9fXJldHVybiBlZShcIkNvdWxkbid0IGZpbmQgYW55IHZlcnNpb24gb2YgbGlic3NsIG9yIE9wZW5TU0wgaW4gdGhlIHN5c3RlbVwiKSx7fX1hc3luYyBmdW5jdGlvbiBLbyhlKXtmb3IobGV0IHIgb2YgZSl7bGV0IHQ9YXdhaXQgbmMocik7aWYodClyZXR1cm4gdH19YXN5bmMgZnVuY3Rpb24gbmMoZSl7dHJ5e3JldHVybihhd2FpdCBjaS5kZWZhdWx0LnJlYWRkaXIoZSkpLmZpbmQodD0+dC5zdGFydHNXaXRoKFwibGlic3NsLnNvLlwiKSYmIXQuc3RhcnRzV2l0aChcImxpYnNzbC5zby4wXCIpKX1jYXRjaChyKXtpZihyLmNvZGU9PT1cIkVOT0VOVFwiKXJldHVybjt0aHJvdyByfX1hc3luYyBmdW5jdGlvbiBpcigpe2xldHtiaW5hcnlUYXJnZXQ6ZX09YXdhaXQgZXMoKTtyZXR1cm4gZX1mdW5jdGlvbiBpYyhlKXtyZXR1cm4gZS5iaW5hcnlUYXJnZXQhPT12b2lkIDB9YXN5bmMgZnVuY3Rpb24gcGkoKXtsZXR7bWVtb2l6ZWQ6ZSwuLi5yfT1hd2FpdCBlcygpO3JldHVybiByfXZhciBXdD17fTthc3luYyBmdW5jdGlvbiBlcygpe2lmKGljKFd0KSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsuLi5XdCxtZW1vaXplZDohMH0pO2xldCBlPWF3YWl0IFpvKCkscj1vYyhlKTtyZXR1cm4gV3Q9ey4uLmUsYmluYXJ5VGFyZ2V0OnJ9LHsuLi5XdCxtZW1vaXplZDohMX19ZnVuY3Rpb24gb2MoZSl7bGV0e3BsYXRmb3JtOnIsYXJjaDp0LGFyY2hGcm9tVW5hbWU6bixsaWJzc2w6aSx0YXJnZXREaXN0cm86byxmYW1pbHlEaXN0cm86cyxvcmlnaW5hbERpc3RybzphfT1lO3I9PT1cImxpbnV4XCImJiFbXCJ4NjRcIixcImFybTY0XCJdLmluY2x1ZGVzKHQpJiZRdChgUHJpc21hIG9ubHkgb2ZmaWNpYWxseSBzdXBwb3J0cyBMaW51eCBvbiBhbWQ2NCAoeDg2XzY0KSBhbmQgYXJtNjQgKGFhcmNoNjQpIHN5c3RlbSBhcmNoaXRlY3R1cmVzIChkZXRlY3RlZCBcIiR7dH1cIiBpbnN0ZWFkKS4gSWYgeW91IGFyZSB1c2luZyB5b3VyIG93biBjdXN0b20gUHJpc21hIGVuZ2luZXMsIHlvdSBjYW4gaWdub3JlIHRoaXMgd2FybmluZywgYXMgbG9uZyBhcyB5b3UndmUgY29tcGlsZWQgdGhlIGVuZ2luZXMgZm9yIHlvdXIgc3lzdGVtIGFyY2hpdGVjdHVyZSBcIiR7bn1cIi5gKTtsZXQgbD1cIjEuMS54XCI7aWYocj09PVwibGludXhcIiYmaT09PXZvaWQgMCl7bGV0IGM9aHIoe2ZhbWlseURpc3RybzpzfSkud2l0aCh7ZmFtaWx5RGlzdHJvOlwiZGViaWFuXCJ9LCgpPT5cIlBsZWFzZSBtYW51YWxseSBpbnN0YWxsIE9wZW5TU0wgdmlhIGBhcHQtZ2V0IHVwZGF0ZSAteSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgb3BlbnNzbGAgYW5kIHRyeSBpbnN0YWxsaW5nIFByaXNtYSBhZ2Fpbi4gSWYgeW91J3JlIHJ1bm5pbmcgUHJpc21hIG9uIERvY2tlciwgYWRkIHRoaXMgY29tbWFuZCB0byB5b3VyIERvY2tlcmZpbGUsIG9yIHN3aXRjaCB0byBhbiBpbWFnZSB0aGF0IGFscmVhZHkgaGFzIE9wZW5TU0wgaW5zdGFsbGVkLlwiKS5vdGhlcndpc2UoKCk9PlwiUGxlYXNlIG1hbnVhbGx5IGluc3RhbGwgT3BlblNTTCBhbmQgdHJ5IGluc3RhbGxpbmcgUHJpc21hIGFnYWluLlwiKTtRdChgUHJpc21hIGZhaWxlZCB0byBkZXRlY3QgdGhlIGxpYnNzbC9vcGVuc3NsIHZlcnNpb24gdG8gdXNlLCBhbmQgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLiBEZWZhdWx0aW5nIHRvIFwib3BlbnNzbC0ke2x9XCIuXG4ke2N9YCl9bGV0IHU9XCJkZWJpYW5cIjtpZihyPT09XCJsaW51eFwiJiZvPT09dm9pZCAwJiZlZShgRGlzdHJvIGlzIFwiJHthfVwiLiBGYWxsaW5nIGJhY2sgdG8gUHJpc21hIGVuZ2luZXMgYnVpbHQgZm9yIFwiJHt1fVwiLmApLHI9PT1cImRhcndpblwiJiZ0PT09XCJhcm02NFwiKXJldHVyblwiZGFyd2luLWFybTY0XCI7aWYocj09PVwiZGFyd2luXCIpcmV0dXJuXCJkYXJ3aW5cIjtpZihyPT09XCJ3aW4zMlwiKXJldHVyblwid2luZG93c1wiO2lmKHI9PT1cImZyZWVic2RcIilyZXR1cm4gbztpZihyPT09XCJvcGVuYnNkXCIpcmV0dXJuXCJvcGVuYnNkXCI7aWYocj09PVwibmV0YnNkXCIpcmV0dXJuXCJuZXRic2RcIjtpZihyPT09XCJsaW51eFwiJiZvPT09XCJuaXhvc1wiKXJldHVyblwibGludXgtbml4b3NcIjtpZihyPT09XCJsaW51eFwiJiZ0PT09XCJhcm02NFwiKXJldHVybmAke289PT1cIm11c2xcIj9cImxpbnV4LW11c2wtYXJtNjRcIjpcImxpbnV4LWFybTY0XCJ9LW9wZW5zc2wtJHtpfHxsfWA7aWYocj09PVwibGludXhcIiYmdD09PVwiYXJtXCIpcmV0dXJuYGxpbnV4LWFybS1vcGVuc3NsLSR7aXx8bH1gO2lmKHI9PT1cImxpbnV4XCImJm89PT1cIm11c2xcIil7bGV0IGM9XCJsaW51eC1tdXNsXCI7cmV0dXJuIWl8fHJzKGkpP2M6YCR7Y30tb3BlbnNzbC0ke2l9YH1yZXR1cm4gcj09PVwibGludXhcIiYmbyYmaT9gJHtvfS1vcGVuc3NsLSR7aX1gOihyIT09XCJsaW51eFwiJiZRdChgUHJpc21hIGRldGVjdGVkIHVua25vd24gT1MgXCIke3J9XCIgYW5kIG1heSBub3Qgd29yayBhcyBleHBlY3RlZC4gRGVmYXVsdGluZyB0byBcImxpbnV4XCIuYCksaT9gJHt1fS1vcGVuc3NsLSR7aX1gOm8/YCR7b30tb3BlbnNzbC0ke2x9YDpgJHt1fS1vcGVuc3NsLSR7bH1gKX1hc3luYyBmdW5jdGlvbiBzYyhlKXt0cnl7cmV0dXJuIGF3YWl0IGUoKX1jYXRjaHtyZXR1cm59fWZ1bmN0aW9uIEh0KGUpe3JldHVybiBzYyhhc3luYygpPT57bGV0IHI9YXdhaXQgWXUoZSk7cmV0dXJuIGVlKGBDb21tYW5kIFwiJHtlfVwiIHN1Y2Nlc3NmdWxseSByZXR1cm5lZCBcIiR7ci5zdGRvdXR9XCJgKSxyLnN0ZG91dH0pfWFzeW5jIGZ1bmN0aW9uIGFjKCl7cmV0dXJuIHR5cGVvZiBKdC5kZWZhdWx0Lm1hY2hpbmU9PVwiZnVuY3Rpb25cIj9KdC5kZWZhdWx0Lm1hY2hpbmUoKTooYXdhaXQgSHQoXCJ1bmFtZSAtbVwiKSk/LnRyaW0oKX1mdW5jdGlvbiBycyhlKXtyZXR1cm4gZS5zdGFydHNXaXRoKFwiMS5cIil9dmFyIHp0PXt9O3RyKHp0LHtiZWVwOigpPT5fYyxjbGVhclNjcmVlbjooKT0+SWMsY2xlYXJUZXJtaW5hbDooKT0+a2MsY3Vyc29yQmFja3dhcmQ6KCk9PmZjLGN1cnNvckRvd246KCk9PmRjLGN1cnNvckZvcndhcmQ6KCk9Pm1jLGN1cnNvckdldFBvc2l0aW9uOigpPT55YyxjdXJzb3JIaWRlOigpPT53YyxjdXJzb3JMZWZ0OigpPT5pcyxjdXJzb3JNb3ZlOigpPT5wYyxjdXJzb3JOZXh0TGluZTooKT0+YmMsY3Vyc29yUHJldkxpbmU6KCk9PkVjLGN1cnNvclJlc3RvcmVQb3NpdGlvbjooKT0+aGMsY3Vyc29yU2F2ZVBvc2l0aW9uOigpPT5nYyxjdXJzb3JTaG93OigpPT54YyxjdXJzb3JUbzooKT0+Y2MsY3Vyc29yVXA6KCk9Pm5zLGVudGVyQWx0ZXJuYXRpdmVTY3JlZW46KCk9Pk9jLGVyYXNlRG93bjooKT0+U2MsZXJhc2VFbmRMaW5lOigpPT5QYyxlcmFzZUxpbmU6KCk9Pm9zLGVyYXNlTGluZXM6KCk9PnZjLGVyYXNlU2NyZWVuOigpPT5kaSxlcmFzZVN0YXJ0TGluZTooKT0+VGMsZXJhc2VVcDooKT0+UmMsZXhpdEFsdGVybmF0aXZlU2NyZWVuOigpPT5EYyxpVGVybTooKT0+RmMsaW1hZ2U6KCk9PkxjLGxpbms6KCk9Pk5jLHNjcm9sbERvd246KCk9PkFjLHNjcm9sbFVwOigpPT5DY30pO3ZhciBZdD1rKHJlcXVpcmUoXCJub2RlOnByb2Nlc3NcIiksMSk7dmFyIEt0PWdsb2JhbFRoaXMud2luZG93Py5kb2N1bWVudCE9PXZvaWQgMCxnZz1nbG9iYWxUaGlzLnByb2Nlc3M/LnZlcnNpb25zPy5ub2RlIT09dm9pZCAwLGhnPWdsb2JhbFRoaXMucHJvY2Vzcz8udmVyc2lvbnM/LmJ1biE9PXZvaWQgMCx5Zz1nbG9iYWxUaGlzLkRlbm8/LnZlcnNpb24/LmRlbm8hPT12b2lkIDAsYmc9Z2xvYmFsVGhpcy5wcm9jZXNzPy52ZXJzaW9ucz8uZWxlY3Ryb24hPT12b2lkIDAsRWc9Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudD8uaW5jbHVkZXMoXCJqc2RvbVwiKT09PSEwLHdnPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlLHhnPXR5cGVvZiBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlLHZnPXR5cGVvZiBTaGFyZWRXb3JrZXJHbG9iYWxTY29wZTxcInVcIiYmZ2xvYmFsVGhpcyBpbnN0YW5jZW9mIFNoYXJlZFdvcmtlckdsb2JhbFNjb3BlLFBnPXR5cGVvZiBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGU8XCJ1XCImJmdsb2JhbFRoaXMgaW5zdGFuY2VvZiBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUsWnI9Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnVzZXJBZ2VudERhdGE/LnBsYXRmb3JtLFRnPVpyPT09XCJtYWNPU1wifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm09PT1cIk1hY0ludGVsXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ/LmluY2x1ZGVzKFwiIE1hYyBcIik9PT0hMHx8Z2xvYmFsVGhpcy5wcm9jZXNzPy5wbGF0Zm9ybT09PVwiZGFyd2luXCIsU2c9WnI9PT1cIldpbmRvd3NcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPT09XCJXaW4zMlwifHxnbG9iYWxUaGlzLnByb2Nlc3M/LnBsYXRmb3JtPT09XCJ3aW4zMlwiLFJnPVpyPT09XCJMaW51eFwifHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8ucGxhdGZvcm0/LnN0YXJ0c1dpdGgoXCJMaW51eFwiKT09PSEwfHxnbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50Py5pbmNsdWRlcyhcIiBMaW51eCBcIik9PT0hMHx8Z2xvYmFsVGhpcy5wcm9jZXNzPy5wbGF0Zm9ybT09PVwibGludXhcIixDZz1acj09PVwiaU9TXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybT09PVwiTWFjSW50ZWxcIiYmZ2xvYmFsVGhpcy5uYXZpZ2F0b3I/Lm1heFRvdWNoUG9pbnRzPjF8fC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KGdsb2JhbFRoaXMubmF2aWdhdG9yPy5wbGF0Zm9ybSksQWc9WnI9PT1cIkFuZHJvaWRcInx8Z2xvYmFsVGhpcy5uYXZpZ2F0b3I/LnBsYXRmb3JtPT09XCJBbmRyb2lkXCJ8fGdsb2JhbFRoaXMubmF2aWdhdG9yPy51c2VyQWdlbnQ/LmluY2x1ZGVzKFwiIEFuZHJvaWQgXCIpPT09ITB8fGdsb2JhbFRoaXMucHJvY2Vzcz8ucGxhdGZvcm09PT1cImFuZHJvaWRcIjt2YXIgQT1cIlxceDFCW1wiLGV0PVwiXFx4MUJdXCIseXI9XCJcXHgwN1wiLFhyPVwiO1wiLHRzPSFLdCYmWXQuZGVmYXVsdC5lbnYuVEVSTV9QUk9HUkFNPT09XCJBcHBsZV9UZXJtaW5hbFwiLGxjPSFLdCYmWXQuZGVmYXVsdC5wbGF0Zm9ybT09PVwid2luMzJcIix1Yz1LdD8oKT0+e3Rocm93IG5ldyBFcnJvcihcImBwcm9jZXNzLmN3ZCgpYCBvbmx5IHdvcmtzIGluIE5vZGUuanMsIG5vdCB0aGUgYnJvd3Nlci5cIil9Oll0LmRlZmF1bHQuY3dkLGNjPShlLHIpPT57aWYodHlwZW9mIGUhPVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBgeGAgYXJndW1lbnQgaXMgcmVxdWlyZWRcIik7cmV0dXJuIHR5cGVvZiByIT1cIm51bWJlclwiP0ErKGUrMSkrXCJHXCI6QSsocisxKStYcisoZSsxKStcIkhcIn0scGM9KGUscik9PntpZih0eXBlb2YgZSE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGB4YCBhcmd1bWVudCBpcyByZXF1aXJlZFwiKTtsZXQgdD1cIlwiO3JldHVybiBlPDA/dCs9QSstZStcIkRcIjplPjAmJih0Kz1BK2UrXCJDXCIpLHI8MD90Kz1BKy1yK1wiQVwiOnI+MCYmKHQrPUErcitcIkJcIiksdH0sbnM9KGU9MSk9PkErZStcIkFcIixkYz0oZT0xKT0+QStlK1wiQlwiLG1jPShlPTEpPT5BK2UrXCJDXCIsZmM9KGU9MSk9PkErZStcIkRcIixpcz1BK1wiR1wiLGdjPXRzP1wiXFx4MUI3XCI6QStcInNcIixoYz10cz9cIlxceDFCOFwiOkErXCJ1XCIseWM9QStcIjZuXCIsYmM9QStcIkVcIixFYz1BK1wiRlwiLHdjPUErXCI/MjVsXCIseGM9QStcIj8yNWhcIix2Yz1lPT57bGV0IHI9XCJcIjtmb3IobGV0IHQ9MDt0PGU7dCsrKXIrPW9zKyh0PGUtMT9ucygpOlwiXCIpO3JldHVybiBlJiYocis9aXMpLHJ9LFBjPUErXCJLXCIsVGM9QStcIjFLXCIsb3M9QStcIjJLXCIsU2M9QStcIkpcIixSYz1BK1wiMUpcIixkaT1BK1wiMkpcIixDYz1BK1wiU1wiLEFjPUErXCJUXCIsSWM9XCJcXHgxQmNcIixrYz1sYz9gJHtkaX0ke0F9MGZgOmAke2RpfSR7QX0zSiR7QX1IYCxPYz1BK1wiPzEwNDloXCIsRGM9QStcIj8xMDQ5bFwiLF9jPXlyLE5jPShlLHIpPT5bZXQsXCI4XCIsWHIsWHIscix5cixlLGV0LFwiOFwiLFhyLFhyLHlyXS5qb2luKFwiXCIpLExjPShlLHI9e30pPT57bGV0IHQ9YCR7ZXR9MTMzNztGaWxlPWlubGluZT0xYDtyZXR1cm4gci53aWR0aCYmKHQrPWA7d2lkdGg9JHtyLndpZHRofWApLHIuaGVpZ2h0JiYodCs9YDtoZWlnaHQ9JHtyLmhlaWdodH1gKSxyLnByZXNlcnZlQXNwZWN0UmF0aW89PT0hMSYmKHQrPVwiO3ByZXNlcnZlQXNwZWN0UmF0aW89MFwiKSx0K1wiOlwiK0J1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpK3lyfSxGYz17c2V0Q3dkOihlPXVjKCkpPT5gJHtldH01MDtDdXJyZW50RGlyPSR7ZX0ke3lyfWAsYW5ub3RhdGlvbihlLHI9e30pe2xldCB0PWAke2V0fTEzMzc7YCxuPXIueCE9PXZvaWQgMCxpPXIueSE9PXZvaWQgMDtpZigobnx8aSkmJiEobiYmaSYmci5sZW5ndGghPT12b2lkIDApKXRocm93IG5ldyBFcnJvcihcImB4YCwgYHlgIGFuZCBgbGVuZ3RoYCBtdXN0IGJlIGRlZmluZWQgd2hlbiBgeGAgb3IgYHlgIGlzIGRlZmluZWRcIik7cmV0dXJuIGU9ZS5yZXBsYWNlQWxsKFwifFwiLFwiXCIpLHQrPXIuaXNIaWRkZW4/XCJBZGRIaWRkZW5Bbm5vdGF0aW9uPVwiOlwiQWRkQW5ub3RhdGlvbj1cIixyLmxlbmd0aD4wP3QrPShuP1tlLHIubGVuZ3RoLHIueCxyLnldOltyLmxlbmd0aCxlXSkuam9pbihcInxcIik6dCs9ZSx0K3lyfX07dmFyIFp0PWsoZHMoKSwxKTtmdW5jdGlvbiBvcihlLHIse3RhcmdldDp0PVwic3Rkb3V0XCIsLi4ubn09e30pe3JldHVybiBadC5kZWZhdWx0W3RdP3p0LmxpbmsoZSxyKTpuLmZhbGxiYWNrPT09ITE/ZTp0eXBlb2Ygbi5mYWxsYmFjaz09XCJmdW5jdGlvblwiP24uZmFsbGJhY2soZSxyKTpgJHtlfSAoXFx1MjAwQiR7cn1cXHUyMDBCKWB9b3IuaXNTdXBwb3J0ZWQ9WnQuZGVmYXVsdC5zdGRvdXQ7b3Iuc3RkZXJyPShlLHIsdD17fSk9Pm9yKGUscix7dGFyZ2V0Olwic3RkZXJyXCIsLi4udH0pO29yLnN0ZGVyci5pc1N1cHBvcnRlZD1adC5kZWZhdWx0LnN0ZGVycjtmdW5jdGlvbiB5aShlKXtyZXR1cm4gb3IoZSxlLHtmYWxsYmFjazpZfSl9dmFyIFZjPW1zKCksYmk9VmMudmVyc2lvbjt2YXIgZnM9XCJsaWJyYXJ5XCI7ZnVuY3Rpb24gRXIoZSl7bGV0IHI9QmMoKTtyZXR1cm4gcnx8KGU/LmNvbmZpZy5lbmdpbmVUeXBlPT09XCJsaWJyYXJ5XCI/XCJsaWJyYXJ5XCI6ZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImJpbmFyeVwiP1wiYmluYXJ5XCI6ZT8uY29uZmlnLmVuZ2luZVR5cGU9PT1cImNsaWVudFwiP1wiY2xpZW50XCI6ZnMpfWZ1bmN0aW9uIEJjKCl7bGV0IGU9cHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRTtyZXR1cm4gZT09PVwibGlicmFyeVwiP1wibGlicmFyeVwiOmU9PT1cImJpbmFyeVwiP1wiYmluYXJ5XCI6ZT09PVwiY2xpZW50XCI/XCJjbGllbnRcIjp2b2lkIDB9dmFyIEdjPWsod2koKSk7dmFyIE09ayhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKSxRYz1rKHdpKCkpLGFoPU4oXCJwcmlzbWE6ZW5naW5lc1wiKTtmdW5jdGlvbiBncygpe3JldHVybiBNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9cIil9dmFyIGxoPVwibGlicXVlcnktZW5naW5lXCI7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRhcndpblwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGFyd2luLWFybTY0XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1kZWJpYW4tb3BlbnNzbC0xLjAueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtZGViaWFuLW9wZW5zc2wtMS4xLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLWRlYmlhbi1vcGVuc3NsLTMuMC54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1saW51eC1zdGF0aWMteDY0XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1saW51eC1zdGF0aWMtYXJtNjRcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vcXVlcnktZW5naW5lLXJoZWwtb3BlbnNzbC0xLjAueFwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeS1lbmdpbmUtcmhlbC1vcGVuc3NsLTEuMS54XCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL3F1ZXJ5LWVuZ2luZS1yaGVsLW9wZW5zc2wtMy4wLnhcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWRhcndpbi5keWxpYi5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1kYXJ3aW4tYXJtNjQuZHlsaWIubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGViaWFuLW9wZW5zc2wtMS4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGViaWFuLW9wZW5zc2wtMS4xLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtZGViaWFuLW9wZW5zc2wtMy4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtYXJtNjQtb3BlbnNzbC0xLjAueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1hcm02NC1vcGVuc3NsLTEuMS54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLWxpbnV4LWFybTY0LW9wZW5zc2wtMy4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtbGludXgtbXVzbC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1saW51eC1tdXNsLW9wZW5zc2wtMy4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9saWJxdWVyeV9lbmdpbmUtcmhlbC1vcGVuc3NsLTEuMC54LnNvLm5vZGVcIik7TS5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLFwiLi4vbGlicXVlcnlfZW5naW5lLXJoZWwtb3BlbnNzbC0xLjEueC5zby5ub2RlXCIpO00uZGVmYXVsdC5qb2luKF9fZGlybmFtZSxcIi4uL2xpYnF1ZXJ5X2VuZ2luZS1yaGVsLW9wZW5zc2wtMy4wLnguc28ubm9kZVwiKTtNLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsXCIuLi9xdWVyeV9lbmdpbmUtd2luZG93cy5kbGwubm9kZVwiKTt2YXIgeGk9ayhyZXF1aXJlKFwibm9kZTpmc1wiKSksaHM9Z3IoXCJjaG1vZFBsdXNYXCIpO2Z1bmN0aW9uIHZpKGUpe2lmKHByb2Nlc3MucGxhdGZvcm09PT1cIndpbjMyXCIpcmV0dXJuO2xldCByPXhpLmRlZmF1bHQuc3RhdFN5bmMoZSksdD1yLm1vZGV8NjR8OHwxO2lmKHIubW9kZT09PXQpe2hzKGBFeGVjdXRpb24gcGVybWlzc2lvbnMgb2YgJHtlfSBhcmUgZmluZWApO3JldHVybn1sZXQgbj10LnRvU3RyaW5nKDgpLnNsaWNlKC0zKTtocyhgSGF2ZSB0byBjYWxsIGNobW9kUGx1c1ggb24gJHtlfWApLHhpLmRlZmF1bHQuY2htb2RTeW5jKGUsbil9ZnVuY3Rpb24gUGkoZSl7bGV0IHI9ZS5lLHQ9YT0+YFByaXNtYSBjYW5ub3QgZmluZCB0aGUgcmVxdWlyZWQgXFxgJHthfVxcYCBzeXN0ZW0gbGlicmFyeSBpbiB5b3VyIHN5c3RlbWAsbj1yLm1lc3NhZ2UuaW5jbHVkZXMoXCJjYW5ub3Qgb3BlbiBzaGFyZWQgb2JqZWN0IGZpbGVcIiksaT1gUGxlYXNlIHJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIGFib3V0IFByaXNtYSdzIHN5c3RlbSByZXF1aXJlbWVudHM6ICR7eWkoXCJodHRwczovL3ByaXMubHkvZC9zeXN0ZW0tcmVxdWlyZW1lbnRzXCIpfWAsbz1gVW5hYmxlIHRvIHJlcXVpcmUoXFxgJHtJZShlLmlkKX1cXGApLmAscz1ocih7bWVzc2FnZTpyLm1lc3NhZ2UsY29kZTpyLmNvZGV9KS53aXRoKHtjb2RlOlwiRU5PRU5UXCJ9LCgpPT5cIkZpbGUgZG9lcyBub3QgZXhpc3QuXCIpLndoZW4oKHttZXNzYWdlOmF9KT0+biYmYS5pbmNsdWRlcyhcImxpYnpcIiksKCk9PmAke3QoXCJsaWJ6XCIpfS4gUGxlYXNlIGluc3RhbGwgaXQgYW5kIHRyeSBhZ2Fpbi5gKS53aGVuKCh7bWVzc2FnZTphfSk9Pm4mJmEuaW5jbHVkZXMoXCJsaWJnY2Nfc1wiKSwoKT0+YCR7dChcImxpYmdjY19zXCIpfS4gUGxlYXNlIGluc3RhbGwgaXQgYW5kIHRyeSBhZ2Fpbi5gKS53aGVuKCh7bWVzc2FnZTphfSk9Pm4mJmEuaW5jbHVkZXMoXCJsaWJzc2xcIiksKCk9PntsZXQgYT1lLnBsYXRmb3JtSW5mby5saWJzc2w/YG9wZW5zc2wtJHtlLnBsYXRmb3JtSW5mby5saWJzc2x9YDpcIm9wZW5zc2xcIjtyZXR1cm5gJHt0KFwibGlic3NsXCIpfS4gUGxlYXNlIGluc3RhbGwgJHthfSBhbmQgdHJ5IGFnYWluLmB9KS53aGVuKCh7bWVzc2FnZTphfSk9PmEuaW5jbHVkZXMoXCJHTElCQ1wiKSwoKT0+YFByaXNtYSBoYXMgZGV0ZWN0ZWQgYW4gaW5jb21wYXRpYmxlIHZlcnNpb24gb2YgdGhlIFxcYGdsaWJjXFxgIEMgc3RhbmRhcmQgbGlicmFyeSBpbnN0YWxsZWQgaW4geW91ciBzeXN0ZW0uIFRoaXMgcHJvYmFibHkgbWVhbnMgeW91ciBzeXN0ZW0gbWF5IGJlIHRvbyBvbGQgdG8gcnVuIFByaXNtYS4gJHtpfWApLndoZW4oKHttZXNzYWdlOmF9KT0+ZS5wbGF0Zm9ybUluZm8ucGxhdGZvcm09PT1cImxpbnV4XCImJmEuaW5jbHVkZXMoXCJzeW1ib2wgbm90IGZvdW5kXCIpLCgpPT5gVGhlIFByaXNtYSBlbmdpbmVzIGFyZSBub3QgY29tcGF0aWJsZSB3aXRoIHlvdXIgc3lzdGVtICR7ZS5wbGF0Zm9ybUluZm8ub3JpZ2luYWxEaXN0cm99IG9uICgke2UucGxhdGZvcm1JbmZvLmFyY2hGcm9tVW5hbWV9KSB3aGljaCB1c2VzIHRoZSBcXGAke2UucGxhdGZvcm1JbmZvLmJpbmFyeVRhcmdldH1cXGAgYmluYXJ5VGFyZ2V0IGJ5IGRlZmF1bHQuICR7aX1gKS5vdGhlcndpc2UoKCk9PmBUaGUgUHJpc21hIGVuZ2luZXMgZG8gbm90IHNlZW0gdG8gYmUgY29tcGF0aWJsZSB3aXRoIHlvdXIgc3lzdGVtLiAke2l9YCk7cmV0dXJuYCR7b31cbiR7c31cblxuRGV0YWlsczogJHtyLm1lc3NhZ2V9YH12YXIgRXM9ayhicygpLDEpO2Z1bmN0aW9uIFRpKGUpe2xldCByPSgwLEVzLmRlZmF1bHQpKGUpO2lmKHI9PT0wKXJldHVybiBlO2xldCB0PW5ldyBSZWdFeHAoYF5bIFxcXFx0XXske3J9fWAsXCJnbVwiKTtyZXR1cm4gZS5yZXBsYWNlKHQsXCJcIil9dmFyIHdzPVwicHJpc21hK3Bvc3RncmVzXCIsZW49YCR7d3N9OmA7ZnVuY3Rpb24gU2koZSl7cmV0dXJuIGU/LnN0YXJ0c1dpdGgoYCR7ZW59Ly9gKT8/ITF9dmFyIHZzPWsoUmkoKSk7ZnVuY3Rpb24gQWkoZSl7cmV0dXJuIFN0cmluZyhuZXcgQ2koZSkpfXZhciBDaT1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLmNvbmZpZz1yfXRvU3RyaW5nKCl7bGV0e2NvbmZpZzpyfT10aGlzLHQ9ci5wcm92aWRlci5mcm9tRW52VmFyP2BlbnYoXCIke3IucHJvdmlkZXIuZnJvbUVudlZhcn1cIilgOnIucHJvdmlkZXIudmFsdWUsbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHtwcm92aWRlcjp0LGJpbmFyeVRhcmdldHM6V2Moci5iaW5hcnlUYXJnZXRzKX0pKTtyZXR1cm5gZ2VuZXJhdG9yICR7ci5uYW1lfSB7XG4keygwLHZzLmRlZmF1bHQpKEpjKG4pLDIpfVxufWB9fTtmdW5jdGlvbiBXYyhlKXtsZXQgcjtpZihlLmxlbmd0aD4wKXtsZXQgdD1lLmZpbmQobj0+bi5mcm9tRW52VmFyIT09bnVsbCk7dD9yPWBlbnYoXCIke3QuZnJvbUVudlZhcn1cIilgOnI9ZS5tYXAobj0+bi5uYXRpdmU/XCJuYXRpdmVcIjpuLnZhbHVlKX1lbHNlIHI9dm9pZCAwO3JldHVybiByfWZ1bmN0aW9uIEpjKGUpe2xldCByPU9iamVjdC5rZXlzKGUpLnJlZHVjZSgodCxuKT0+TWF0aC5tYXgodCxuLmxlbmd0aCksMCk7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3Qsbl0pPT5gJHt0LnBhZEVuZChyKX0gPSAke0hjKG4pfWApLmpvaW4oYFxuYCl9ZnVuY3Rpb24gSGMoZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSwocix0KT0+QXJyYXkuaXNBcnJheSh0KT9gWyR7dC5tYXAobj0+SlNPTi5zdHJpbmdpZnkobikpLmpvaW4oXCIsIFwiKX1dYDpKU09OLnN0cmluZ2lmeSh0KSkpfXZhciB0dD17fTt0cih0dCx7ZXJyb3I6KCk9PnpjLGluZm86KCk9PlljLGxvZzooKT0+S2MscXVlcnk6KCk9PlpjLHNob3VsZDooKT0+UHMsdGFnczooKT0+cnQsd2FybjooKT0+SWl9KTt2YXIgcnQ9e2Vycm9yOmNlKFwicHJpc21hOmVycm9yXCIpLHdhcm46a2UoXCJwcmlzbWE6d2FyblwiKSxpbmZvOk9lKFwicHJpc21hOmluZm9cIikscXVlcnk6bnIoXCJwcmlzbWE6cXVlcnlcIil9LFBzPXt3YXJuOigpPT4hcHJvY2Vzcy5lbnYuUFJJU01BX0RJU0FCTEVfV0FSTklOR1N9O2Z1bmN0aW9uIEtjKC4uLmUpe2NvbnNvbGUubG9nKC4uLmUpfWZ1bmN0aW9uIElpKGUsLi4ucil7UHMud2FybigpJiZjb25zb2xlLndhcm4oYCR7cnQud2Fybn0gJHtlfWAsLi4ucil9ZnVuY3Rpb24gWWMoZSwuLi5yKXtjb25zb2xlLmluZm8oYCR7cnQuaW5mb30gJHtlfWAsLi4ucil9ZnVuY3Rpb24gemMoZSwuLi5yKXtjb25zb2xlLmVycm9yKGAke3J0LmVycm9yfSAke2V9YCwuLi5yKX1mdW5jdGlvbiBaYyhlLC4uLnIpe2NvbnNvbGUubG9nKGAke3J0LnF1ZXJ5fSAke2V9YCwuLi5yKX1mdW5jdGlvbiBybihlLHIpe2lmKCFlKXRocm93IG5ldyBFcnJvcihgJHtyfS4gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiBJZiB5b3Ugc2VlIHRoaXMgZXJyb3IsIHBsZWFzZSwgb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL3ByaXMubHkvcHJpc21hLXByaXNtYS1idWctcmVwb3J0YCl9ZnVuY3Rpb24gX2UoZSxyKXt0aHJvdyBuZXcgRXJyb3Iocil9dmFyIG50PWsocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7ZnVuY3Rpb24gT2koZSl7cmV0dXJuIG50LmRlZmF1bHQuc2VwPT09bnQuZGVmYXVsdC5wb3NpeC5zZXA/ZTplLnNwbGl0KG50LmRlZmF1bHQuc2VwKS5qb2luKG50LmRlZmF1bHQucG9zaXguc2VwKX12YXIgRmk9ayhPcygpKSxubj1rKHJlcXVpcmUoXCJub2RlOmZzXCIpKTt2YXIgd3I9ayhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKTtmdW5jdGlvbiBEcyhlKXtsZXQgcj1lLmlnbm9yZVByb2Nlc3NFbnY/e306cHJvY2Vzcy5lbnYsdD1uPT5uLm1hdGNoKC8oLj9cXCR7KD86W2EtekEtWjAtOV9dKyk/fSkvZyk/LnJlZHVjZShmdW5jdGlvbihvLHMpe2xldCBhPS8oLj8pXFwkeyhbYS16QS1aMC05X10rKT99L2cuZXhlYyhzKTtpZighYSlyZXR1cm4gbztsZXQgbD1hWzFdLHUsYztpZihsPT09XCJcXFxcXCIpYz1hWzBdLHU9Yy5yZXBsYWNlKFwiXFxcXCRcIixcIiRcIik7ZWxzZXtsZXQgcD1hWzJdO2M9YVswXS5zdWJzdHJpbmcobC5sZW5ndGgpLHU9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixwKT9yW3BdOmUucGFyc2VkW3BdfHxcIlwiLHU9dCh1KX1yZXR1cm4gby5yZXBsYWNlKGMsdSl9LG4pPz9uO2ZvcihsZXQgbiBpbiBlLnBhcnNlZCl7bGV0IGk9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixuKT9yW25dOmUucGFyc2VkW25dO2UucGFyc2VkW25dPXQoaSl9Zm9yKGxldCBuIGluIGUucGFyc2VkKXJbbl09ZS5wYXJzZWRbbl07cmV0dXJuIGV9dmFyIExpPWdyKFwicHJpc21hOnRyeUxvYWRFbnZcIik7ZnVuY3Rpb24gaXQoe3Jvb3RFbnZQYXRoOmUsc2NoZW1hRW52UGF0aDpyfSx0PXtjb25mbGljdENoZWNrOlwibm9uZVwifSl7bGV0IG49X3MoZSk7dC5jb25mbGljdENoZWNrIT09XCJub25lXCImJmdwKG4scix0LmNvbmZsaWN0Q2hlY2spO2xldCBpPW51bGw7cmV0dXJuIE5zKG4/LnBhdGgscil8fChpPV9zKHIpKSwhbiYmIWkmJkxpKFwiTm8gRW52aXJvbm1lbnQgdmFyaWFibGVzIGxvYWRlZFwiKSxpPy5kb3RlbnZSZXN1bHQuZXJyb3I/Y29uc29sZS5lcnJvcihjZShXKFwiU2NoZW1hIEVudiBFcnJvcjogXCIpKStpLmRvdGVudlJlc3VsdC5lcnJvcik6e21lc3NhZ2U6W24/Lm1lc3NhZ2UsaT8ubWVzc2FnZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oYFxuYCkscGFyc2VkOnsuLi5uPy5kb3RlbnZSZXN1bHQ/LnBhcnNlZCwuLi5pPy5kb3RlbnZSZXN1bHQ/LnBhcnNlZH19fWZ1bmN0aW9uIGdwKGUscix0KXtsZXQgbj1lPy5kb3RlbnZSZXN1bHQucGFyc2VkLGk9IU5zKGU/LnBhdGgscik7aWYobiYmciYmaSYmbm4uZGVmYXVsdC5leGlzdHNTeW5jKHIpKXtsZXQgbz1GaS5kZWZhdWx0LnBhcnNlKG5uLmRlZmF1bHQucmVhZEZpbGVTeW5jKHIpKSxzPVtdO2ZvcihsZXQgYSBpbiBvKW5bYV09PT1vW2FdJiZzLnB1c2goYSk7aWYocy5sZW5ndGg+MCl7bGV0IGE9d3IuZGVmYXVsdC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLGUucGF0aCksbD13ci5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCkscik7aWYodD09PVwiZXJyb3JcIil7bGV0IHU9YFRoZXJlIGlzIGEgY29uZmxpY3QgYmV0d2VlbiBlbnYgdmFyJHtzLmxlbmd0aD4xP1wic1wiOlwiXCJ9IGluICR7WShhKX0gYW5kICR7WShsKX1cbkNvbmZsaWN0aW5nIGVudiB2YXJzOlxuJHtzLm1hcChjPT5gICAke1coYyl9YCkuam9pbihgXG5gKX1cblxuV2Ugc3VnZ2VzdCB0byBtb3ZlIHRoZSBjb250ZW50cyBvZiAke1kobCl9IHRvICR7WShhKX0gdG8gY29uc29saWRhdGUgeW91ciBlbnYgdmFycy5cbmA7dGhyb3cgbmV3IEVycm9yKHUpfWVsc2UgaWYodD09PVwid2FyblwiKXtsZXQgdT1gQ29uZmxpY3QgZm9yIGVudiB2YXIke3MubGVuZ3RoPjE/XCJzXCI6XCJcIn0gJHtzLm1hcChjPT5XKGMpKS5qb2luKFwiLCBcIil9IGluICR7WShhKX0gYW5kICR7WShsKX1cbkVudiB2YXJzIGZyb20gJHtZKGwpfSBvdmVyd3JpdGUgdGhlIG9uZXMgZnJvbSAke1koYSl9XG4gICAgICBgO2NvbnNvbGUud2FybihgJHtrZShcIndhcm4ocHJpc21hKVwiKX0gJHt1fWApfX19fWZ1bmN0aW9uIF9zKGUpe2lmKGhwKGUpKXtMaShgRW52aXJvbm1lbnQgdmFyaWFibGVzIGxvYWRlZCBmcm9tICR7ZX1gKTtsZXQgcj1GaS5kZWZhdWx0LmNvbmZpZyh7cGF0aDplLGRlYnVnOnByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfREVCVUc/ITA6dm9pZCAwfSk7cmV0dXJue2RvdGVudlJlc3VsdDpEcyhyKSxtZXNzYWdlOkllKGBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbG9hZGVkIGZyb20gJHt3ci5kZWZhdWx0LnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksZSl9YCkscGF0aDplfX1lbHNlIExpKGBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbm90IGZvdW5kIGF0ICR7ZX1gKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBOcyhlLHIpe3JldHVybiBlJiZyJiZ3ci5kZWZhdWx0LnJlc29sdmUoZSk9PT13ci5kZWZhdWx0LnJlc29sdmUocil9ZnVuY3Rpb24gaHAoZSl7cmV0dXJuISEoZSYmbm4uZGVmYXVsdC5leGlzdHNTeW5jKGUpKX1mdW5jdGlvbiBNaShlLHIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKX1mdW5jdGlvbiB4cihlLHIpe2xldCB0PXt9O2ZvcihsZXQgbiBvZiBPYmplY3Qua2V5cyhlKSl0W25dPXIoZVtuXSxuKTtyZXR1cm4gdH1mdW5jdGlvbiAkaShlLHIpe2lmKGUubGVuZ3RoPT09MClyZXR1cm47bGV0IHQ9ZVswXTtmb3IobGV0IG49MTtuPGUubGVuZ3RoO24rKylyKHQsZVtuXSk8MCYmKHQ9ZVtuXSk7cmV0dXJuIHR9ZnVuY3Rpb24geChlLHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBGcz1uZXcgU2V0LG90PShlLHIsLi4udCk9PntGcy5oYXMoZSl8fChGcy5hZGQoZSksSWkociwuLi50KSl9O3ZhciBUPWNsYXNzIGUgZXh0ZW5kcyBFcnJvcntjbGllbnRWZXJzaW9uO2Vycm9yQ29kZTtyZXRyeWFibGU7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHIpLHRoaXMubmFtZT1cIlByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3JcIix0aGlzLmNsaWVudFZlcnNpb249dCx0aGlzLmVycm9yQ29kZT1uLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGUpfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCJ9fTt4KFQsXCJQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yXCIpO3ZhciB6PWNsYXNzIGV4dGVuZHMgRXJyb3J7Y29kZTttZXRhO2NsaWVudFZlcnNpb247YmF0Y2hSZXF1ZXN0SWR4O2NvbnN0cnVjdG9yKHIse2NvZGU6dCxjbGllbnRWZXJzaW9uOm4sbWV0YTppLGJhdGNoUmVxdWVzdElkeDpvfSl7c3VwZXIociksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIix0aGlzLmNvZGU9dCx0aGlzLmNsaWVudFZlcnNpb249bix0aGlzLm1ldGE9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImJhdGNoUmVxdWVzdElkeFwiLHt2YWx1ZTpvLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3JcIn19O3goeixcIlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yXCIpO3ZhciBsZT1jbGFzcyBleHRlbmRzIEVycm9ye2NsaWVudFZlcnNpb247Y29uc3RydWN0b3Iocix0KXtzdXBlcihyKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvclwiLHRoaXMuY2xpZW50VmVyc2lvbj10fWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvclwifX07eChsZSxcIlByaXNtYUNsaWVudFJ1c3RQYW5pY0Vycm9yXCIpO3ZhciBqPWNsYXNzIGV4dGVuZHMgRXJyb3J7Y2xpZW50VmVyc2lvbjtiYXRjaFJlcXVlc3RJZHg7Y29uc3RydWN0b3Iocix7Y2xpZW50VmVyc2lvbjp0LGJhdGNoUmVxdWVzdElkeDpufSl7c3VwZXIociksdGhpcy5uYW1lPVwiUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvclwiLHRoaXMuY2xpZW50VmVyc2lvbj10LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYmF0Y2hSZXF1ZXN0SWR4XCIse3ZhbHVlOm4sd3JpdGFibGU6ITAsZW51bWVyYWJsZTohMX0pfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yXCJ9fTt4KGosXCJQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yXCIpO3ZhciBaPWNsYXNzIGV4dGVuZHMgRXJyb3J7bmFtZT1cIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwiO2NsaWVudFZlcnNpb247Y29uc3RydWN0b3Iocix7Y2xpZW50VmVyc2lvbjp0fSl7c3VwZXIociksdGhpcy5jbGllbnRWZXJzaW9uPXR9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvclwifX07eChaLFwiUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yXCIpO3ZhciB2cj05ZTE1LEtlPTFlOSxxaT1cIjAxMjM0NTY3ODlhYmNkZWZcIix1bj1cIjIuMzAyNTg1MDkyOTk0MDQ1Njg0MDE3OTkxNDU0Njg0MzY0MjA3NjAxMTAxNDg4NjI4NzcyOTc2MDMzMzI3OTAwOTY3NTcyNjA5Njc3MzUyNDgwMjM1OTk3MjA1MDg5NTk4Mjk4MzQxOTY3Nzg0MDQyMjg2MjQ4NjMzNDA5NTI1NDY1MDgyODA2NzU2NjY2Mjg3MzY5MDk4NzgxNjg5NDgyOTA3MjA4MzI1NTU0NjgwODQzNzk5ODk0ODI2MjMzMTk4NTI4MzkzNTA1MzA4OTY1Mzc3NzMyNjI4ODQ2MTYzMzY2MjIyMjg3Njk4MjE5ODg2NzQ2NTQzNjY3NDc0NDA0MjQzMjc0MzY1MTU1MDQ4OTM0MzE0OTM5MzkxNDc5NjE5NDA0NDAwMjIyMTA1MTAxNzE0MTc0ODAwMzY4ODA4NDAxMjY0NzA4MDY4NTU2Nzc0MzIxNjIyODM1NTIyMDExNDgwNDY2MzcxNTY1OTEyMTM3MzQ1MDc0Nzg1Njk0NzY4MzQ2MzYxNjc5MjEwMTgwNjQ0NTA3MDY0ODAwMDI3NzUwMjY4NDkxNjc0NjU1MDU4Njg1NjkzNTY3MzQyMDY3MDU4MTEzNjQyOTIyNDU1NDQwNTc1ODkyNTcyNDIwODI0MTMxNDY5NTY4OTAxNjc1ODk0MDI1Njc3NjMxMTM1NjkxOTI5MjAzMzM3NjU4NzE0MTY2MDIzMDEwNTcwMzA4OTYzNDU3MjA3NTQ0MDM3MDg0NzQ2OTk0MDE2ODI2OTI4MjgwODQ4MTE4NDI4OTMxNDg0ODUyNDk0ODY0NDg3MTkyNzgwOTY3NjI3MTI3NTc3NTM5NzAyNzY2ODYwNTk1MjQ5NjcxNjY3NDE4MzQ4NTcwNDQyMjUwNzE5Nzk2NTAwNDcxNDk1MTA1MDQ5MjIxNDc3NjU2NzYzNjkzODY2Mjk3Njk3OTUyMjExMDcxODI2NDU0OTczNDc3MjY2MjQyNTcwOTQyOTMyMjU4Mjc5ODUwMjU4NTUwOTc4NTI2NTM4MzIwNzYwNjcyNjMxNzE2NDMwOTUwNTk5NTA4NzgwNzUyMzcxMDMzMzEwMTE5Nzg1NzU0NzMzMTU0MTQyMTgwODQyNzU0Mzg2MzU5MTc3ODExNzA1NDMwOTgyNzQ4MjM4NTA0NTY0ODAxOTA5NTYxMDI5OTI5MTgyNDMxODIzNzUyNTM1NzcwOTc1MDUzOTU2NTE4NzY5NzUxMDM3NDk3MDg4ODY5MjE4MDIwNTE4OTMzOTUwNzIzODUzOTIwNTE0NDYzNDE5NzI2NTI4NzI4Njk2NTExMDg2MjU3MTQ5MjE5ODg0OTk3ODc0ODg3Mzc3MTM0NTY4NjIwOTE2NzA1OFwiLGNuPVwiMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDI4ODQxOTcxNjkzOTkzNzUxMDU4MjA5NzQ5NDQ1OTIzMDc4MTY0MDYyODYyMDg5OTg2MjgwMzQ4MjUzNDIxMTcwNjc5ODIxNDgwODY1MTMyODIzMDY2NDcwOTM4NDQ2MDk1NTA1ODIyMzE3MjUzNTk0MDgxMjg0ODExMTc0NTAyODQxMDI3MDE5Mzg1MjExMDU1NTk2NDQ2MjI5NDg5NTQ5MzAzODE5NjQ0Mjg4MTA5NzU2NjU5MzM0NDYxMjg0NzU2NDgyMzM3ODY3ODMxNjUyNzEyMDE5MDkxNDU2NDg1NjY5MjM0NjAzNDg2MTA0NTQzMjY2NDgyMTMzOTM2MDcyNjAyNDkxNDEyNzM3MjQ1ODcwMDY2MDYzMTU1ODgxNzQ4ODE1MjA5MjA5NjI4MjkyNTQwOTE3MTUzNjQzNjc4OTI1OTAzNjAwMTEzMzA1MzA1NDg4MjA0NjY1MjEzODQxNDY5NTE5NDE1MTE2MDk0MzMwNTcyNzAzNjU3NTk1OTE5NTMwOTIxODYxMTczODE5MzI2MTE3OTMxMDUxMTg1NDgwNzQ0NjIzNzk5NjI3NDk1NjczNTE4ODU3NTI3MjQ4OTEyMjc5MzgxODMwMTE5NDkxMjk4MzM2NzMzNjI0NDA2NTY2NDMwODYwMjEzOTQ5NDYzOTUyMjQ3MzcxOTA3MDIxNzk4NjA5NDM3MDI3NzA1MzkyMTcxNzYyOTMxNzY3NTIzODQ2NzQ4MTg0Njc2Njk0MDUxMzIwMDA1NjgxMjcxNDUyNjM1NjA4Mjc3ODU3NzEzNDI3NTc3ODk2MDkxNzM2MzcxNzg3MjE0Njg0NDA5MDEyMjQ5NTM0MzAxNDY1NDk1ODUzNzEwNTA3OTIyNzk2ODkyNTg5MjM1NDIwMTk5NTYxMTIxMjkwMjE5NjA4NjQwMzQ0MTgxNTk4MTM2Mjk3NzQ3NzEzMDk5NjA1MTg3MDcyMTEzNDk5OTk5OTgzNzI5NzgwNDk5NTEwNTk3MzE3MzI4MTYwOTYzMTg1OTUwMjQ0NTk0NTUzNDY5MDgzMDI2NDI1MjIzMDgyNTMzNDQ2ODUwMzUyNjE5MzExODgxNzEwMTAwMDMxMzc4Mzg3NTI4ODY1ODc1MzMyMDgzODE0MjA2MTcxNzc2NjkxNDczMDM1OTgyNTM0OTA0Mjg3NTU0Njg3MzExNTk1NjI4NjM4ODIzNTM3ODc1OTM3NTE5NTc3ODE4NTc3ODA1MzIxNzEyMjY4MDY2MTMwMDE5Mjc4NzY2MTExOTU5MDkyMTY0MjAxOTg5MzgwOTUyNTcyMDEwNjU0ODU4NjMyNzg5XCIsamk9e3ByZWNpc2lvbjoyMCxyb3VuZGluZzo0LG1vZHVsbzoxLHRvRXhwTmVnOi03LHRvRXhwUG9zOjIxLG1pbkU6LXZyLG1heEU6dnIsY3J5cHRvOiExfSxqcyxMZSx3PSEwLGRuPVwiW0RlY2ltYWxFcnJvcl0gXCIsSGU9ZG4rXCJJbnZhbGlkIGFyZ3VtZW50OiBcIixWcz1kbitcIlByZWNpc2lvbiBsaW1pdCBleGNlZWRlZFwiLEJzPWRuK1wiY3J5cHRvIHVuYXZhaWxhYmxlXCIsVXM9XCJbb2JqZWN0IERlY2ltYWxdXCIsWD1NYXRoLmZsb29yLFU9TWF0aC5wb3cseXA9L14wYihbMDFdKyhcXC5bMDFdKik/fFxcLlswMV0rKShwWystXT9cXGQrKT8kL2ksYnA9L14weChbMC05YS1mXSsoXFwuWzAtOWEtZl0qKT98XFwuWzAtOWEtZl0rKShwWystXT9cXGQrKT8kL2ksRXA9L14wbyhbMC03XSsoXFwuWzAtN10qKT98XFwuWzAtN10rKShwWystXT9cXGQrKT8kL2ksR3M9L14oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pLGZlPTFlNyxFPTcsd3A9OTAwNzE5OTI1NDc0MDk5MSx4cD11bi5sZW5ndGgtMSxWaT1jbi5sZW5ndGgtMSxtPXt0b1N0cmluZ1RhZzpVc307bS5hYnNvbHV0ZVZhbHVlPW0uYWJzPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7cmV0dXJuIGUuczwwJiYoZS5zPTEpLHkoZSl9O20uY2VpbD1mdW5jdGlvbigpe3JldHVybiB5KG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLHRoaXMuZSsxLDIpfTttLmNsYW1wZWRUbz1tLmNsYW1wPWZ1bmN0aW9uKGUscil7dmFyIHQsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtpZihlPW5ldyBpKGUpLHI9bmV3IGkociksIWUuc3x8IXIucylyZXR1cm4gbmV3IGkoTmFOKTtpZihlLmd0KHIpKXRocm93IEVycm9yKEhlK3IpO3JldHVybiB0PW4uY21wKGUpLHQ8MD9lOm4uY21wKHIpPjA/cjpuZXcgaShuKX07bS5jb21wYXJlZFRvPW0uY21wPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG89dGhpcyxzPW8uZCxhPShlPW5ldyBvLmNvbnN0cnVjdG9yKGUpKS5kLGw9by5zLHU9ZS5zO2lmKCFzfHwhYSlyZXR1cm4hbHx8IXU/TmFOOmwhPT11P2w6cz09PWE/MDohc15sPDA/MTotMTtpZighc1swXXx8IWFbMF0pcmV0dXJuIHNbMF0/bDphWzBdPy11OjA7aWYobCE9PXUpcmV0dXJuIGw7aWYoby5lIT09ZS5lKXJldHVybiBvLmU+ZS5lXmw8MD8xOi0xO2ZvcihuPXMubGVuZ3RoLGk9YS5sZW5ndGgscj0wLHQ9bjxpP246aTtyPHQ7KytyKWlmKHNbcl0hPT1hW3JdKXJldHVybiBzW3JdPmFbcl1ebDwwPzE6LTE7cmV0dXJuIG49PT1pPzA6bj5pXmw8MD8xOi0xfTttLmNvc2luZT1tLmNvcz1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5kP3QuZFswXT8oZT1uLnByZWNpc2lvbixyPW4ucm91bmRpbmcsbi5wcmVjaXNpb249ZStNYXRoLm1heCh0LmUsdC5zZCgpKStFLG4ucm91bmRpbmc9MSx0PXZwKG4sS3Mobix0KSksbi5wcmVjaXNpb249ZSxuLnJvdW5kaW5nPXIseShMZT09Mnx8TGU9PTM/dC5uZWcoKTp0LGUsciwhMCkpOm5ldyBuKDEpOm5ldyBuKE5hTil9O20uY3ViZVJvb3Q9bS5jYnJ0PWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saSxvLHMsYSxsLHUsYz10aGlzLHA9Yy5jb25zdHJ1Y3RvcjtpZighYy5pc0Zpbml0ZSgpfHxjLmlzWmVybygpKXJldHVybiBuZXcgcChjKTtmb3Iodz0hMSxvPWMucypVKGMucypjLDEvMyksIW98fE1hdGguYWJzKG8pPT0xLzA/KHQ9SihjLmQpLGU9Yy5lLChvPShlLXQubGVuZ3RoKzEpJTMpJiYodCs9bz09MXx8bz09LTI/XCIwXCI6XCIwMFwiKSxvPVUodCwxLzMpLGU9WCgoZSsxKS8zKS0oZSUzPT0oZTwwPy0xOjIpKSxvPT0xLzA/dD1cIjVlXCIrZToodD1vLnRvRXhwb25lbnRpYWwoKSx0PXQuc2xpY2UoMCx0LmluZGV4T2YoXCJlXCIpKzEpK2UpLG49bmV3IHAodCksbi5zPWMucyk6bj1uZXcgcChvLnRvU3RyaW5nKCkpLHM9KGU9cC5wcmVjaXNpb24pKzM7OylpZihhPW4sbD1hLnRpbWVzKGEpLnRpbWVzKGEpLHU9bC5wbHVzKGMpLG49TCh1LnBsdXMoYykudGltZXMoYSksdS5wbHVzKGwpLHMrMiwxKSxKKGEuZCkuc2xpY2UoMCxzKT09PSh0PUoobi5kKSkuc2xpY2UoMCxzKSlpZih0PXQuc2xpY2Uocy0zLHMrMSksdD09XCI5OTk5XCJ8fCFpJiZ0PT1cIjQ5OTlcIil7aWYoIWkmJih5KGEsZSsxLDApLGEudGltZXMoYSkudGltZXMoYSkuZXEoYykpKXtuPWE7YnJlYWt9cys9NCxpPTF9ZWxzZXsoISt0fHwhK3Quc2xpY2UoMSkmJnQuY2hhckF0KDApPT1cIjVcIikmJih5KG4sZSsxLDEpLHI9IW4udGltZXMobikudGltZXMobikuZXEoYykpO2JyZWFrfXJldHVybiB3PSEwLHkobixlLHAucm91bmRpbmcscil9O20uZGVjaW1hbFBsYWNlcz1tLmRwPWZ1bmN0aW9uKCl7dmFyIGUscj10aGlzLmQsdD1OYU47aWYocil7aWYoZT1yLmxlbmd0aC0xLHQ9KGUtWCh0aGlzLmUvRSkpKkUsZT1yW2VdLGUpZm9yKDtlJTEwPT0wO2UvPTEwKXQtLTt0PDAmJih0PTApfXJldHVybiB0fTttLmRpdmlkZWRCeT1tLmRpdj1mdW5jdGlvbihlKXtyZXR1cm4gTCh0aGlzLG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUpKX07bS5kaXZpZGVkVG9JbnRlZ2VyQnk9bS5kaXZUb0ludD1mdW5jdGlvbihlKXt2YXIgcj10aGlzLHQ9ci5jb25zdHJ1Y3RvcjtyZXR1cm4geShMKHIsbmV3IHQoZSksMCwxLDEpLHQucHJlY2lzaW9uLHQucm91bmRpbmcpfTttLmVxdWFscz1tLmVxPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT09PTB9O20uZmxvb3I9ZnVuY3Rpb24oKXtyZXR1cm4geShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSx0aGlzLmUrMSwzKX07bS5ncmVhdGVyVGhhbj1tLmd0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNtcChlKT4wfTttLmdyZWF0ZXJUaGFuT3JFcXVhbFRvPW0uZ3RlPWZ1bmN0aW9uKGUpe3ZhciByPXRoaXMuY21wKGUpO3JldHVybiByPT0xfHxyPT09MH07bS5oeXBlcmJvbGljQ29zaW5lPW0uY29zaD1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGksbz10aGlzLHM9by5jb25zdHJ1Y3RvcixhPW5ldyBzKDEpO2lmKCFvLmlzRmluaXRlKCkpcmV0dXJuIG5ldyBzKG8ucz8xLzA6TmFOKTtpZihvLmlzWmVybygpKXJldHVybiBhO3Q9cy5wcmVjaXNpb24sbj1zLnJvdW5kaW5nLHMucHJlY2lzaW9uPXQrTWF0aC5tYXgoby5lLG8uc2QoKSkrNCxzLnJvdW5kaW5nPTEsaT1vLmQubGVuZ3RoLGk8MzI/KGU9TWF0aC5jZWlsKGkvMykscj0oMS9mbig0LGUpKS50b1N0cmluZygpKTooZT0xNixyPVwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiKSxvPVByKHMsMSxvLnRpbWVzKHIpLG5ldyBzKDEpLCEwKTtmb3IodmFyIGwsdT1lLGM9bmV3IHMoOCk7dS0tOylsPW8udGltZXMobyksbz1hLm1pbnVzKGwudGltZXMoYy5taW51cyhsLnRpbWVzKGMpKSkpO3JldHVybiB5KG8scy5wcmVjaXNpb249dCxzLnJvdW5kaW5nPW4sITApfTttLmh5cGVyYm9saWNTaW5lPW0uc2luaD1mdW5jdGlvbigpe3ZhciBlLHIsdCxuLGk9dGhpcyxvPWkuY29uc3RydWN0b3I7aWYoIWkuaXNGaW5pdGUoKXx8aS5pc1plcm8oKSlyZXR1cm4gbmV3IG8oaSk7aWYocj1vLnByZWNpc2lvbix0PW8ucm91bmRpbmcsby5wcmVjaXNpb249citNYXRoLm1heChpLmUsaS5zZCgpKSs0LG8ucm91bmRpbmc9MSxuPWkuZC5sZW5ndGgsbjwzKWk9UHIobywyLGksaSwhMCk7ZWxzZXtlPTEuNCpNYXRoLnNxcnQobiksZT1lPjE2PzE2OmV8MCxpPWkudGltZXMoMS9mbig1LGUpKSxpPVByKG8sMixpLGksITApO2Zvcih2YXIgcyxhPW5ldyBvKDUpLGw9bmV3IG8oMTYpLHU9bmV3IG8oMjApO2UtLTspcz1pLnRpbWVzKGkpLGk9aS50aW1lcyhhLnBsdXMocy50aW1lcyhsLnRpbWVzKHMpLnBsdXModSkpKSl9cmV0dXJuIG8ucHJlY2lzaW9uPXIsby5yb3VuZGluZz10LHkoaSxyLHQsITApfTttLmh5cGVyYm9saWNUYW5nZW50PW0udGFuaD1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5pc0Zpbml0ZSgpP3QuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrNyxuLnJvdW5kaW5nPTEsTCh0LnNpbmgoKSx0LmNvc2goKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cikpOm5ldyBuKHQucyl9O20uaW52ZXJzZUNvc2luZT1tLmFjb3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHI9ZS5jb25zdHJ1Y3Rvcix0PWUuYWJzKCkuY21wKDEpLG49ci5wcmVjaXNpb24saT1yLnJvdW5kaW5nO3JldHVybiB0IT09LTE/dD09PTA/ZS5pc05lZygpP3dlKHIsbixpKTpuZXcgcigwKTpuZXcgcihOYU4pOmUuaXNaZXJvKCk/d2UocixuKzQsaSkudGltZXMoLjUpOihyLnByZWNpc2lvbj1uKzYsci5yb3VuZGluZz0xLGU9bmV3IHIoMSkubWludXMoZSkuZGl2KGUucGx1cygxKSkuc3FydCgpLmF0YW4oKSxyLnByZWNpc2lvbj1uLHIucm91bmRpbmc9aSxlLnRpbWVzKDIpKX07bS5pbnZlcnNlSHlwZXJib2xpY0Nvc2luZT1tLmFjb3NoPWZ1bmN0aW9uKCl7dmFyIGUscix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiB0Lmx0ZSgxKT9uZXcgbih0LmVxKDEpPzA6TmFOKTp0LmlzRmluaXRlKCk/KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrTWF0aC5tYXgoTWF0aC5hYnModC5lKSx0LnNkKCkpKzQsbi5yb3VuZGluZz0xLHc9ITEsdD10LnRpbWVzKHQpLm1pbnVzKDEpLnNxcnQoKS5wbHVzKHQpLHc9ITAsbi5wcmVjaXNpb249ZSxuLnJvdW5kaW5nPXIsdC5sbigpKTpuZXcgbih0KX07bS5pbnZlcnNlSHlwZXJib2xpY1NpbmU9bS5hc2luaD1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4hdC5pc0Zpbml0ZSgpfHx0LmlzWmVybygpP25ldyBuKHQpOihlPW4ucHJlY2lzaW9uLHI9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lKzIqTWF0aC5tYXgoTWF0aC5hYnModC5lKSx0LnNkKCkpKzYsbi5yb3VuZGluZz0xLHc9ITEsdD10LnRpbWVzKHQpLnBsdXMoMSkuc3FydCgpLnBsdXModCksdz0hMCxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix0LmxuKCkpfTttLmludmVyc2VIeXBlcmJvbGljVGFuZ2VudD1tLmF0YW5oPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtyZXR1cm4gaS5pc0Zpbml0ZSgpP2kuZT49MD9uZXcgbyhpLmFicygpLmVxKDEpP2kucy8wOmkuaXNaZXJvKCk/aTpOYU4pOihlPW8ucHJlY2lzaW9uLHI9by5yb3VuZGluZyxuPWkuc2QoKSxNYXRoLm1heChuLGUpPDIqLWkuZS0xP3kobmV3IG8oaSksZSxyLCEwKTooby5wcmVjaXNpb249dD1uLWkuZSxpPUwoaS5wbHVzKDEpLG5ldyBvKDEpLm1pbnVzKGkpLHQrZSwxKSxvLnByZWNpc2lvbj1lKzQsby5yb3VuZGluZz0xLGk9aS5sbigpLG8ucHJlY2lzaW9uPWUsby5yb3VuZGluZz1yLGkudGltZXMoLjUpKSk6bmV3IG8oTmFOKX07bS5pbnZlcnNlU2luZT1tLmFzaW49ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpPXRoaXMsbz1pLmNvbnN0cnVjdG9yO3JldHVybiBpLmlzWmVybygpP25ldyBvKGkpOihyPWkuYWJzKCkuY21wKDEpLHQ9by5wcmVjaXNpb24sbj1vLnJvdW5kaW5nLHIhPT0tMT9yPT09MD8oZT13ZShvLHQrNCxuKS50aW1lcyguNSksZS5zPWkucyxlKTpuZXcgbyhOYU4pOihvLnByZWNpc2lvbj10KzYsby5yb3VuZGluZz0xLGk9aS5kaXYobmV3IG8oMSkubWludXMoaS50aW1lcyhpKSkuc3FydCgpLnBsdXMoMSkpLmF0YW4oKSxvLnByZWNpc2lvbj10LG8ucm91bmRpbmc9bixpLnRpbWVzKDIpKSl9O20uaW52ZXJzZVRhbmdlbnQ9bS5hdGFuPWZ1bmN0aW9uKCl7dmFyIGUscix0LG4saSxvLHMsYSxsLHU9dGhpcyxjPXUuY29uc3RydWN0b3IscD1jLnByZWNpc2lvbixkPWMucm91bmRpbmc7aWYodS5pc0Zpbml0ZSgpKXtpZih1LmlzWmVybygpKXJldHVybiBuZXcgYyh1KTtpZih1LmFicygpLmVxKDEpJiZwKzQ8PVZpKXJldHVybiBzPXdlKGMscCs0LGQpLnRpbWVzKC4yNSkscy5zPXUucyxzfWVsc2V7aWYoIXUucylyZXR1cm4gbmV3IGMoTmFOKTtpZihwKzQ8PVZpKXJldHVybiBzPXdlKGMscCs0LGQpLnRpbWVzKC41KSxzLnM9dS5zLHN9Zm9yKGMucHJlY2lzaW9uPWE9cCsxMCxjLnJvdW5kaW5nPTEsdD1NYXRoLm1pbigyOCxhL0UrMnwwKSxlPXQ7ZTstLWUpdT11LmRpdih1LnRpbWVzKHUpLnBsdXMoMSkuc3FydCgpLnBsdXMoMSkpO2Zvcih3PSExLHI9TWF0aC5jZWlsKGEvRSksbj0xLGw9dS50aW1lcyh1KSxzPW5ldyBjKHUpLGk9dTtlIT09LTE7KWlmKGk9aS50aW1lcyhsKSxvPXMubWludXMoaS5kaXYobis9MikpLGk9aS50aW1lcyhsKSxzPW8ucGx1cyhpLmRpdihuKz0yKSkscy5kW3JdIT09dm9pZCAwKWZvcihlPXI7cy5kW2VdPT09by5kW2VdJiZlLS07KTtyZXR1cm4gdCYmKHM9cy50aW1lcygyPDx0LTEpKSx3PSEwLHkocyxjLnByZWNpc2lvbj1wLGMucm91bmRpbmc9ZCwhMCl9O20uaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZH07bS5pc0ludGVnZXI9bS5pc0ludD1mdW5jdGlvbigpe3JldHVybiEhdGhpcy5kJiZYKHRoaXMuZS9FKT50aGlzLmQubGVuZ3RoLTJ9O20uaXNOYU49ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5zfTttLmlzTmVnYXRpdmU9bS5pc05lZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnM8MH07bS5pc1Bvc2l0aXZlPW0uaXNQb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zPjB9O20uaXNaZXJvPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmQmJnRoaXMuZFswXT09PTB9O20ubGVzc1RoYW49bS5sdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbXAoZSk8MH07bS5sZXNzVGhhbk9yRXF1YWxUbz1tLmx0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jbXAoZSk8MX07bS5sb2dhcml0aG09bS5sb2c9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1PXRoaXMsYz11LmNvbnN0cnVjdG9yLHA9Yy5wcmVjaXNpb24sZD1jLnJvdW5kaW5nLGY9NTtpZihlPT1udWxsKWU9bmV3IGMoMTApLHI9ITA7ZWxzZXtpZihlPW5ldyBjKGUpLHQ9ZS5kLGUuczwwfHwhdHx8IXRbMF18fGUuZXEoMSkpcmV0dXJuIG5ldyBjKE5hTik7cj1lLmVxKDEwKX1pZih0PXUuZCx1LnM8MHx8IXR8fCF0WzBdfHx1LmVxKDEpKXJldHVybiBuZXcgYyh0JiYhdFswXT8tMS8wOnUucyE9MT9OYU46dD8wOjEvMCk7aWYocilpZih0Lmxlbmd0aD4xKW89ITA7ZWxzZXtmb3IoaT10WzBdO2klMTA9PT0wOylpLz0xMDtvPWkhPT0xfWlmKHc9ITEsYT1wK2Yscz1KZSh1LGEpLG49cj9wbihjLGErMTApOkplKGUsYSksbD1MKHMsbixhLDEpLHN0KGwuZCxpPXAsZCkpZG8gaWYoYSs9MTAscz1KZSh1LGEpLG49cj9wbihjLGErMTApOkplKGUsYSksbD1MKHMsbixhLDEpLCFvKXsrSihsLmQpLnNsaWNlKGkrMSxpKzE1KSsxPT0xZTE0JiYobD15KGwscCsxLDApKTticmVha313aGlsZShzdChsLmQsaSs9MTAsZCkpO3JldHVybiB3PSEwLHkobCxwLGQpfTttLm1pbnVzPW0uc3ViPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG8scyxhLGwsdSxjLHAsZCxmPXRoaXMsZz1mLmNvbnN0cnVjdG9yO2lmKGU9bmV3IGcoZSksIWYuZHx8IWUuZClyZXR1cm4hZi5zfHwhZS5zP2U9bmV3IGcoTmFOKTpmLmQ/ZS5zPS1lLnM6ZT1uZXcgZyhlLmR8fGYucyE9PWUucz9mOk5hTiksZTtpZihmLnMhPWUucylyZXR1cm4gZS5zPS1lLnMsZi5wbHVzKGUpO2lmKHU9Zi5kLGQ9ZS5kLGE9Zy5wcmVjaXNpb24sbD1nLnJvdW5kaW5nLCF1WzBdfHwhZFswXSl7aWYoZFswXSllLnM9LWUucztlbHNlIGlmKHVbMF0pZT1uZXcgZyhmKTtlbHNlIHJldHVybiBuZXcgZyhsPT09Mz8tMDowKTtyZXR1cm4gdz95KGUsYSxsKTplfWlmKHQ9WChlLmUvRSksYz1YKGYuZS9FKSx1PXUuc2xpY2UoKSxvPWMtdCxvKXtmb3IocD1vPDAscD8ocj11LG89LW8scz1kLmxlbmd0aCk6KHI9ZCx0PWMscz11Lmxlbmd0aCksbj1NYXRoLm1heChNYXRoLmNlaWwoYS9FKSxzKSsyLG8+biYmKG89bixyLmxlbmd0aD0xKSxyLnJldmVyc2UoKSxuPW87bi0tOylyLnB1c2goMCk7ci5yZXZlcnNlKCl9ZWxzZXtmb3Iobj11Lmxlbmd0aCxzPWQubGVuZ3RoLHA9bjxzLHAmJihzPW4pLG49MDtuPHM7bisrKWlmKHVbbl0hPWRbbl0pe3A9dVtuXTxkW25dO2JyZWFrfW89MH1mb3IocCYmKHI9dSx1PWQsZD1yLGUucz0tZS5zKSxzPXUubGVuZ3RoLG49ZC5sZW5ndGgtcztuPjA7LS1uKXVbcysrXT0wO2ZvcihuPWQubGVuZ3RoO24+bzspe2lmKHVbLS1uXTxkW25dKXtmb3IoaT1uO2kmJnVbLS1pXT09PTA7KXVbaV09ZmUtMTstLXVbaV0sdVtuXSs9ZmV9dVtuXS09ZFtuXX1mb3IoO3VbLS1zXT09PTA7KXUucG9wKCk7Zm9yKDt1WzBdPT09MDt1LnNoaWZ0KCkpLS10O3JldHVybiB1WzBdPyhlLmQ9dSxlLmU9bW4odSx0KSx3P3koZSxhLGwpOmUpOm5ldyBnKGw9PT0zPy0wOjApfTttLm1vZHVsbz1tLm1vZD1mdW5jdGlvbihlKXt2YXIgcix0PXRoaXMsbj10LmNvbnN0cnVjdG9yO3JldHVybiBlPW5ldyBuKGUpLCF0LmR8fCFlLnN8fGUuZCYmIWUuZFswXT9uZXcgbihOYU4pOiFlLmR8fHQuZCYmIXQuZFswXT95KG5ldyBuKHQpLG4ucHJlY2lzaW9uLG4ucm91bmRpbmcpOih3PSExLG4ubW9kdWxvPT05PyhyPUwodCxlLmFicygpLDAsMywxKSxyLnMqPWUucyk6cj1MKHQsZSwwLG4ubW9kdWxvLDEpLHI9ci50aW1lcyhlKSx3PSEwLHQubWludXMocikpfTttLm5hdHVyYWxFeHBvbmVudGlhbD1tLmV4cD1mdW5jdGlvbigpe3JldHVybiBCaSh0aGlzKX07bS5uYXR1cmFsTG9nYXJpdGhtPW0ubG49ZnVuY3Rpb24oKXtyZXR1cm4gSmUodGhpcyl9O20ubmVnYXRlZD1tLm5lZz1mdW5jdGlvbigpe3ZhciBlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO3JldHVybiBlLnM9LWUucyx5KGUpfTttLnBsdXM9bS5hZGQ9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1LGMscD10aGlzLGQ9cC5jb25zdHJ1Y3RvcjtpZihlPW5ldyBkKGUpLCFwLmR8fCFlLmQpcmV0dXJuIXAuc3x8IWUucz9lPW5ldyBkKE5hTik6cC5kfHwoZT1uZXcgZChlLmR8fHAucz09PWUucz9wOk5hTikpLGU7aWYocC5zIT1lLnMpcmV0dXJuIGUucz0tZS5zLHAubWludXMoZSk7aWYodT1wLmQsYz1lLmQsYT1kLnByZWNpc2lvbixsPWQucm91bmRpbmcsIXVbMF18fCFjWzBdKXJldHVybiBjWzBdfHwoZT1uZXcgZChwKSksdz95KGUsYSxsKTplO2lmKG89WChwLmUvRSksbj1YKGUuZS9FKSx1PXUuc2xpY2UoKSxpPW8tbixpKXtmb3IoaTwwPyh0PXUsaT0taSxzPWMubGVuZ3RoKToodD1jLG49byxzPXUubGVuZ3RoKSxvPU1hdGguY2VpbChhL0UpLHM9bz5zP28rMTpzKzEsaT5zJiYoaT1zLHQubGVuZ3RoPTEpLHQucmV2ZXJzZSgpO2ktLTspdC5wdXNoKDApO3QucmV2ZXJzZSgpfWZvcihzPXUubGVuZ3RoLGk9Yy5sZW5ndGgscy1pPDAmJihpPXMsdD1jLGM9dSx1PXQpLHI9MDtpOylyPSh1Wy0taV09dVtpXStjW2ldK3IpL2ZlfDAsdVtpXSU9ZmU7Zm9yKHImJih1LnVuc2hpZnQociksKytuKSxzPXUubGVuZ3RoO3VbLS1zXT09MDspdS5wb3AoKTtyZXR1cm4gZS5kPXUsZS5lPW1uKHUsbiksdz95KGUsYSxsKTplfTttLnByZWNpc2lvbj1tLnNkPWZ1bmN0aW9uKGUpe3ZhciByLHQ9dGhpcztpZihlIT09dm9pZCAwJiZlIT09ISFlJiZlIT09MSYmZSE9PTApdGhyb3cgRXJyb3IoSGUrZSk7cmV0dXJuIHQuZD8ocj1Rcyh0LmQpLGUmJnQuZSsxPnImJihyPXQuZSsxKSk6cj1OYU4scn07bS5yb3VuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yO3JldHVybiB5KG5ldyByKGUpLGUuZSsxLHIucm91bmRpbmcpfTttLnNpbmU9bS5zaW49ZnVuY3Rpb24oKXt2YXIgZSxyLHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIHQuaXNGaW5pdGUoKT90LmlzWmVybygpP25ldyBuKHQpOihlPW4ucHJlY2lzaW9uLHI9bi5yb3VuZGluZyxuLnByZWNpc2lvbj1lK01hdGgubWF4KHQuZSx0LnNkKCkpK0Usbi5yb3VuZGluZz0xLHQ9VHAobixLcyhuLHQpKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix5KExlPjI/dC5uZWcoKTp0LGUsciwhMCkpOm5ldyBuKE5hTil9O20uc3F1YXJlUm9vdD1tLnNxcnQ9ZnVuY3Rpb24oKXt2YXIgZSxyLHQsbixpLG8scz10aGlzLGE9cy5kLGw9cy5lLHU9cy5zLGM9cy5jb25zdHJ1Y3RvcjtpZih1IT09MXx8IWF8fCFhWzBdKXJldHVybiBuZXcgYyghdXx8dTwwJiYoIWF8fGFbMF0pP05hTjphP3M6MS8wKTtmb3Iodz0hMSx1PU1hdGguc3FydCgrcyksdT09MHx8dT09MS8wPyhyPUooYSksKHIubGVuZ3RoK2wpJTI9PTAmJihyKz1cIjBcIiksdT1NYXRoLnNxcnQociksbD1YKChsKzEpLzIpLShsPDB8fGwlMiksdT09MS8wP3I9XCI1ZVwiK2w6KHI9dS50b0V4cG9uZW50aWFsKCkscj1yLnNsaWNlKDAsci5pbmRleE9mKFwiZVwiKSsxKStsKSxuPW5ldyBjKHIpKTpuPW5ldyBjKHUudG9TdHJpbmcoKSksdD0obD1jLnByZWNpc2lvbikrMzs7KWlmKG89bixuPW8ucGx1cyhMKHMsbyx0KzIsMSkpLnRpbWVzKC41KSxKKG8uZCkuc2xpY2UoMCx0KT09PShyPUoobi5kKSkuc2xpY2UoMCx0KSlpZihyPXIuc2xpY2UodC0zLHQrMSkscj09XCI5OTk5XCJ8fCFpJiZyPT1cIjQ5OTlcIil7aWYoIWkmJih5KG8sbCsxLDApLG8udGltZXMobykuZXEocykpKXtuPW87YnJlYWt9dCs9NCxpPTF9ZWxzZXsoIStyfHwhK3Iuc2xpY2UoMSkmJnIuY2hhckF0KDApPT1cIjVcIikmJih5KG4sbCsxLDEpLGU9IW4udGltZXMobikuZXEocykpO2JyZWFrfXJldHVybiB3PSEwLHkobixsLGMucm91bmRpbmcsZSl9O20udGFuZ2VudD1tLnRhbj1mdW5jdGlvbigpe3ZhciBlLHIsdD10aGlzLG49dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdC5pc0Zpbml0ZSgpP3QuaXNaZXJvKCk/bmV3IG4odCk6KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nLG4ucHJlY2lzaW9uPWUrMTAsbi5yb3VuZGluZz0xLHQ9dC5zaW4oKSx0LnM9MSx0PUwodCxuZXcgbigxKS5taW51cyh0LnRpbWVzKHQpKS5zcXJ0KCksZSsxMCwwKSxuLnByZWNpc2lvbj1lLG4ucm91bmRpbmc9cix5KExlPT0yfHxMZT09ND90Lm5lZygpOnQsZSxyLCEwKSk6bmV3IG4oTmFOKX07bS50aW1lcz1tLm11bD1mdW5jdGlvbihlKXt2YXIgcix0LG4saSxvLHMsYSxsLHUsYz10aGlzLHA9Yy5jb25zdHJ1Y3RvcixkPWMuZCxmPShlPW5ldyBwKGUpKS5kO2lmKGUucyo9Yy5zLCFkfHwhZFswXXx8IWZ8fCFmWzBdKXJldHVybiBuZXcgcCghZS5zfHxkJiYhZFswXSYmIWZ8fGYmJiFmWzBdJiYhZD9OYU46IWR8fCFmP2Uucy8wOmUucyowKTtmb3IodD1YKGMuZS9FKStYKGUuZS9FKSxsPWQubGVuZ3RoLHU9Zi5sZW5ndGgsbDx1JiYobz1kLGQ9ZixmPW8scz1sLGw9dSx1PXMpLG89W10scz1sK3Usbj1zO24tLTspby5wdXNoKDApO2ZvcihuPXU7LS1uPj0wOyl7Zm9yKHI9MCxpPWwrbjtpPm47KWE9b1tpXStmW25dKmRbaS1uLTFdK3Isb1tpLS1dPWElZmV8MCxyPWEvZmV8MDtvW2ldPShvW2ldK3IpJWZlfDB9Zm9yKDshb1stLXNdOylvLnBvcCgpO3JldHVybiByPysrdDpvLnNoaWZ0KCksZS5kPW8sZS5lPW1uKG8sdCksdz95KGUscC5wcmVjaXNpb24scC5yb3VuZGluZyk6ZX07bS50b0JpbmFyeT1mdW5jdGlvbihlLHIpe3JldHVybiBVaSh0aGlzLDIsZSxyKX07bS50b0RlY2ltYWxQbGFjZXM9bS50b0RQPWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIHQ9bmV3IG4odCksZT09PXZvaWQgMD90OihpZShlLDAsS2UpLHI9PT12b2lkIDA/cj1uLnJvdW5kaW5nOmllKHIsMCw4KSx5KHQsZSt0LmUrMSxyKSl9O20udG9FeHBvbmVudGlhbD1mdW5jdGlvbihlLHIpe3ZhciB0LG49dGhpcyxpPW4uY29uc3RydWN0b3I7cmV0dXJuIGU9PT12b2lkIDA/dD14ZShuLCEwKTooaWUoZSwwLEtlKSxyPT09dm9pZCAwP3I9aS5yb3VuZGluZzppZShyLDAsOCksbj15KG5ldyBpKG4pLGUrMSxyKSx0PXhlKG4sITAsZSsxKSksbi5pc05lZygpJiYhbi5pc1plcm8oKT9cIi1cIit0OnR9O20udG9GaXhlZD1mdW5jdGlvbihlLHIpe3ZhciB0LG4saT10aGlzLG89aS5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD90PXhlKGkpOihpZShlLDAsS2UpLHI9PT12b2lkIDA/cj1vLnJvdW5kaW5nOmllKHIsMCw4KSxuPXkobmV3IG8oaSksZStpLmUrMSxyKSx0PXhlKG4sITEsZStuLmUrMSkpLGkuaXNOZWcoKSYmIWkuaXNaZXJvKCk/XCItXCIrdDp0fTttLnRvRnJhY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHIsdCxuLGksbyxzLGEsbCx1LGMscCxkLGY9dGhpcyxnPWYuZCxoPWYuY29uc3RydWN0b3I7aWYoIWcpcmV0dXJuIG5ldyBoKGYpO2lmKHU9dD1uZXcgaCgxKSxuPWw9bmV3IGgoMCkscj1uZXcgaChuKSxvPXIuZT1RcyhnKS1mLmUtMSxzPW8lRSxyLmRbMF09VSgxMCxzPDA/RStzOnMpLGU9PW51bGwpZT1vPjA/cjp1O2Vsc2V7aWYoYT1uZXcgaChlKSwhYS5pc0ludCgpfHxhLmx0KHUpKXRocm93IEVycm9yKEhlK2EpO2U9YS5ndChyKT9vPjA/cjp1OmF9Zm9yKHc9ITEsYT1uZXcgaChKKGcpKSxjPWgucHJlY2lzaW9uLGgucHJlY2lzaW9uPW89Zy5sZW5ndGgqRSoyO3A9TChhLHIsMCwxLDEpLGk9dC5wbHVzKHAudGltZXMobikpLGkuY21wKGUpIT0xOyl0PW4sbj1pLGk9dSx1PWwucGx1cyhwLnRpbWVzKGkpKSxsPWksaT1yLHI9YS5taW51cyhwLnRpbWVzKGkpKSxhPWk7cmV0dXJuIGk9TChlLm1pbnVzKHQpLG4sMCwxLDEpLGw9bC5wbHVzKGkudGltZXModSkpLHQ9dC5wbHVzKGkudGltZXMobikpLGwucz11LnM9Zi5zLGQ9TCh1LG4sbywxKS5taW51cyhmKS5hYnMoKS5jbXAoTChsLHQsbywxKS5taW51cyhmKS5hYnMoKSk8MT9bdSxuXTpbbCx0XSxoLnByZWNpc2lvbj1jLHc9ITAsZH07bS50b0hleGFkZWNpbWFsPW0udG9IZXg9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gVWkodGhpcywxNixlLHIpfTttLnRvTmVhcmVzdD1mdW5jdGlvbihlLHIpe3ZhciB0PXRoaXMsbj10LmNvbnN0cnVjdG9yO2lmKHQ9bmV3IG4odCksZT09bnVsbCl7aWYoIXQuZClyZXR1cm4gdDtlPW5ldyBuKDEpLHI9bi5yb3VuZGluZ31lbHNle2lmKGU9bmV3IG4oZSkscj09PXZvaWQgMD9yPW4ucm91bmRpbmc6aWUociwwLDgpLCF0LmQpcmV0dXJuIGUucz90OmU7aWYoIWUuZClyZXR1cm4gZS5zJiYoZS5zPXQucyksZX1yZXR1cm4gZS5kWzBdPyh3PSExLHQ9TCh0LGUsMCxyLDEpLnRpbWVzKGUpLHc9ITAseSh0KSk6KGUucz10LnMsdD1lKSx0fTttLnRvTnVtYmVyPWZ1bmN0aW9uKCl7cmV0dXJuK3RoaXN9O20udG9PY3RhbD1mdW5jdGlvbihlLHIpe3JldHVybiBVaSh0aGlzLDgsZSxyKX07bS50b1Bvd2VyPW0ucG93PWZ1bmN0aW9uKGUpe3ZhciByLHQsbixpLG8scyxhPXRoaXMsbD1hLmNvbnN0cnVjdG9yLHU9KyhlPW5ldyBsKGUpKTtpZighYS5kfHwhZS5kfHwhYS5kWzBdfHwhZS5kWzBdKXJldHVybiBuZXcgbChVKCthLHUpKTtpZihhPW5ldyBsKGEpLGEuZXEoMSkpcmV0dXJuIGE7aWYobj1sLnByZWNpc2lvbixvPWwucm91bmRpbmcsZS5lcSgxKSlyZXR1cm4geShhLG4sbyk7aWYocj1YKGUuZS9FKSxyPj1lLmQubGVuZ3RoLTEmJih0PXU8MD8tdTp1KTw9d3ApcmV0dXJuIGk9V3MobCxhLHQsbiksZS5zPDA/bmV3IGwoMSkuZGl2KGkpOnkoaSxuLG8pO2lmKHM9YS5zLHM8MCl7aWYocjxlLmQubGVuZ3RoLTEpcmV0dXJuIG5ldyBsKE5hTik7aWYoKGUuZFtyXSYxKT09MCYmKHM9MSksYS5lPT0wJiZhLmRbMF09PTEmJmEuZC5sZW5ndGg9PTEpcmV0dXJuIGEucz1zLGF9cmV0dXJuIHQ9VSgrYSx1KSxyPXQ9PTB8fCFpc0Zpbml0ZSh0KT9YKHUqKE1hdGgubG9nKFwiMC5cIitKKGEuZCkpL01hdGguTE4xMCthLmUrMSkpOm5ldyBsKHQrXCJcIikuZSxyPmwubWF4RSsxfHxyPGwubWluRS0xP25ldyBsKHI+MD9zLzA6MCk6KHc9ITEsbC5yb3VuZGluZz1hLnM9MSx0PU1hdGgubWluKDEyLChyK1wiXCIpLmxlbmd0aCksaT1CaShlLnRpbWVzKEplKGEsbit0KSksbiksaS5kJiYoaT15KGksbis1LDEpLHN0KGkuZCxuLG8pJiYocj1uKzEwLGk9eShCaShlLnRpbWVzKEplKGEscit0KSkscikscis1LDEpLCtKKGkuZCkuc2xpY2UobisxLG4rMTUpKzE9PTFlMTQmJihpPXkoaSxuKzEsMCkpKSksaS5zPXMsdz0hMCxsLnJvdW5kaW5nPW8seShpLG4sbykpfTttLnRvUHJlY2lzaW9uPWZ1bmN0aW9uKGUscil7dmFyIHQsbj10aGlzLGk9bi5jb25zdHJ1Y3RvcjtyZXR1cm4gZT09PXZvaWQgMD90PXhlKG4sbi5lPD1pLnRvRXhwTmVnfHxuLmU+PWkudG9FeHBQb3MpOihpZShlLDEsS2UpLHI9PT12b2lkIDA/cj1pLnJvdW5kaW5nOmllKHIsMCw4KSxuPXkobmV3IGkobiksZSxyKSx0PXhlKG4sZTw9bi5lfHxuLmU8PWkudG9FeHBOZWcsZSkpLG4uaXNOZWcoKSYmIW4uaXNaZXJvKCk/XCItXCIrdDp0fTttLnRvU2lnbmlmaWNhbnREaWdpdHM9bS50b1NEPWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcyxuPXQuY29uc3RydWN0b3I7cmV0dXJuIGU9PT12b2lkIDA/KGU9bi5wcmVjaXNpb24scj1uLnJvdW5kaW5nKTooaWUoZSwxLEtlKSxyPT09dm9pZCAwP3I9bi5yb3VuZGluZzppZShyLDAsOCkpLHkobmV3IG4odCksZSxyKX07bS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yLHQ9eGUoZSxlLmU8PXIudG9FeHBOZWd8fGUuZT49ci50b0V4cFBvcyk7cmV0dXJuIGUuaXNOZWcoKSYmIWUuaXNaZXJvKCk/XCItXCIrdDp0fTttLnRydW5jYXRlZD1tLnRydW5jPWZ1bmN0aW9uKCl7cmV0dXJuIHkobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksdGhpcy5lKzEsMSl9O20udmFsdWVPZj1tLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1lLmNvbnN0cnVjdG9yLHQ9eGUoZSxlLmU8PXIudG9FeHBOZWd8fGUuZT49ci50b0V4cFBvcyk7cmV0dXJuIGUuaXNOZWcoKT9cIi1cIit0OnR9O2Z1bmN0aW9uIEooZSl7dmFyIHIsdCxuLGk9ZS5sZW5ndGgtMSxvPVwiXCIscz1lWzBdO2lmKGk+MCl7Zm9yKG8rPXMscj0xO3I8aTtyKyspbj1lW3JdK1wiXCIsdD1FLW4ubGVuZ3RoLHQmJihvKz1XZSh0KSksbys9bjtzPWVbcl0sbj1zK1wiXCIsdD1FLW4ubGVuZ3RoLHQmJihvKz1XZSh0KSl9ZWxzZSBpZihzPT09MClyZXR1cm5cIjBcIjtmb3IoO3MlMTA9PT0wOylzLz0xMDtyZXR1cm4gbytzfWZ1bmN0aW9uIGllKGUscix0KXtpZihlIT09fn5lfHxlPHJ8fGU+dCl0aHJvdyBFcnJvcihIZStlKX1mdW5jdGlvbiBzdChlLHIsdCxuKXt2YXIgaSxvLHMsYTtmb3Iobz1lWzBdO28+PTEwO28vPTEwKS0tcjtyZXR1cm4tLXI8MD8ocis9RSxpPTApOihpPU1hdGguY2VpbCgocisxKS9FKSxyJT1FKSxvPVUoMTAsRS1yKSxhPWVbaV0lb3wwLG49PW51bGw/cjwzPyhyPT0wP2E9YS8xMDB8MDpyPT0xJiYoYT1hLzEwfDApLHM9dDw0JiZhPT05OTk5OXx8dD4zJiZhPT00OTk5OXx8YT09NWU0fHxhPT0wKTpzPSh0PDQmJmErMT09b3x8dD4zJiZhKzE9PW8vMikmJihlW2krMV0vby8xMDB8MCk9PVUoMTAsci0yKS0xfHwoYT09by8yfHxhPT0wKSYmKGVbaSsxXS9vLzEwMHwwKT09MDpyPDQ/KHI9PTA/YT1hLzFlM3wwOnI9PTE/YT1hLzEwMHwwOnI9PTImJihhPWEvMTB8MCkscz0obnx8dDw0KSYmYT09OTk5OXx8IW4mJnQ+MyYmYT09NDk5OSk6cz0oKG58fHQ8NCkmJmErMT09b3x8IW4mJnQ+MyYmYSsxPT1vLzIpJiYoZVtpKzFdL28vMWUzfDApPT1VKDEwLHItMyktMSxzfWZ1bmN0aW9uIGFuKGUscix0KXtmb3IodmFyIG4saT1bMF0sbyxzPTAsYT1lLmxlbmd0aDtzPGE7KXtmb3Iobz1pLmxlbmd0aDtvLS07KWlbb10qPXI7Zm9yKGlbMF0rPXFpLmluZGV4T2YoZS5jaGFyQXQocysrKSksbj0wO248aS5sZW5ndGg7bisrKWlbbl0+dC0xJiYoaVtuKzFdPT09dm9pZCAwJiYoaVtuKzFdPTApLGlbbisxXSs9aVtuXS90fDAsaVtuXSU9dCl9cmV0dXJuIGkucmV2ZXJzZSgpfWZ1bmN0aW9uIHZwKGUscil7dmFyIHQsbixpO2lmKHIuaXNaZXJvKCkpcmV0dXJuIHI7bj1yLmQubGVuZ3RoLG48MzI/KHQ9TWF0aC5jZWlsKG4vMyksaT0oMS9mbig0LHQpKS50b1N0cmluZygpKToodD0xNixpPVwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiKSxlLnByZWNpc2lvbis9dCxyPVByKGUsMSxyLnRpbWVzKGkpLG5ldyBlKDEpKTtmb3IodmFyIG89dDtvLS07KXt2YXIgcz1yLnRpbWVzKHIpO3I9cy50aW1lcyhzKS5taW51cyhzKS50aW1lcyg4KS5wbHVzKDEpfXJldHVybiBlLnByZWNpc2lvbi09dCxyfXZhciBMPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShuLGksbyl7dmFyIHMsYT0wLGw9bi5sZW5ndGg7Zm9yKG49bi5zbGljZSgpO2wtLTspcz1uW2xdKmkrYSxuW2xdPXMlb3wwLGE9cy9vfDA7cmV0dXJuIGEmJm4udW5zaGlmdChhKSxufWZ1bmN0aW9uIHIobixpLG8scyl7dmFyIGEsbDtpZihvIT1zKWw9bz5zPzE6LTE7ZWxzZSBmb3IoYT1sPTA7YTxvO2ErKylpZihuW2FdIT1pW2FdKXtsPW5bYV0+aVthXT8xOi0xO2JyZWFrfXJldHVybiBsfWZ1bmN0aW9uIHQobixpLG8scyl7Zm9yKHZhciBhPTA7by0tOyluW29dLT1hLGE9bltvXTxpW29dPzE6MCxuW29dPWEqcytuW29dLWlbb107Zm9yKDshblswXSYmbi5sZW5ndGg+MTspbi5zaGlmdCgpfXJldHVybiBmdW5jdGlvbihuLGksbyxzLGEsbCl7dmFyIHUsYyxwLGQsZixnLGgsSSxQLFMsYixPLG1lLGFlLEpyLFYsdGUsQWUsSCxmciwkdD1uLmNvbnN0cnVjdG9yLFhuPW4ucz09aS5zPzE6LTEsSz1uLmQsXz1pLmQ7aWYoIUt8fCFLWzBdfHwhX3x8IV9bMF0pcmV0dXJuIG5ldyAkdCghbi5zfHwhaS5zfHwoSz9fJiZLWzBdPT1fWzBdOiFfKT9OYU46SyYmS1swXT09MHx8IV8/WG4qMDpYbi8wKTtmb3IobD8oZj0xLGM9bi5lLWkuZSk6KGw9ZmUsZj1FLGM9WChuLmUvZiktWChpLmUvZikpLEg9Xy5sZW5ndGgsdGU9Sy5sZW5ndGgsUD1uZXcgJHQoWG4pLFM9UC5kPVtdLHA9MDtfW3BdPT0oS1twXXx8MCk7cCsrKTtpZihfW3BdPihLW3BdfHwwKSYmYy0tLG89PW51bGw/KGFlPW89JHQucHJlY2lzaW9uLHM9JHQucm91bmRpbmcpOmE/YWU9bysobi5lLWkuZSkrMTphZT1vLGFlPDApUy5wdXNoKDEpLGc9ITA7ZWxzZXtpZihhZT1hZS9mKzJ8MCxwPTAsSD09MSl7Zm9yKGQ9MCxfPV9bMF0sYWUrKzsocDx0ZXx8ZCkmJmFlLS07cCsrKUpyPWQqbCsoS1twXXx8MCksU1twXT1Kci9ffDAsZD1KciVffDA7Zz1kfHxwPHRlfWVsc2V7Zm9yKGQ9bC8oX1swXSsxKXwwLGQ+MSYmKF89ZShfLGQsbCksSz1lKEssZCxsKSxIPV8ubGVuZ3RoLHRlPUsubGVuZ3RoKSxWPUgsYj1LLnNsaWNlKDAsSCksTz1iLmxlbmd0aDtPPEg7KWJbTysrXT0wO2ZyPV8uc2xpY2UoKSxmci51bnNoaWZ0KDApLEFlPV9bMF0sX1sxXT49bC8yJiYrK0FlO2RvIGQ9MCx1PXIoXyxiLEgsTyksdTwwPyhtZT1iWzBdLEghPU8mJihtZT1tZSpsKyhiWzFdfHwwKSksZD1tZS9BZXwwLGQ+MT8oZD49bCYmKGQ9bC0xKSxoPWUoXyxkLGwpLEk9aC5sZW5ndGgsTz1iLmxlbmd0aCx1PXIoaCxiLEksTyksdT09MSYmKGQtLSx0KGgsSDxJP2ZyOl8sSSxsKSkpOihkPT0wJiYodT1kPTEpLGg9Xy5zbGljZSgpKSxJPWgubGVuZ3RoLEk8TyYmaC51bnNoaWZ0KDApLHQoYixoLE8sbCksdT09LTEmJihPPWIubGVuZ3RoLHU9cihfLGIsSCxPKSx1PDEmJihkKyssdChiLEg8Tz9mcjpfLE8sbCkpKSxPPWIubGVuZ3RoKTp1PT09MCYmKGQrKyxiPVswXSksU1twKytdPWQsdSYmYlswXT9iW08rK109S1tWXXx8MDooYj1bS1tWXV0sTz0xKTt3aGlsZSgoVisrPHRlfHxiWzBdIT09dm9pZCAwKSYmYWUtLSk7Zz1iWzBdIT09dm9pZCAwfVNbMF18fFMuc2hpZnQoKX1pZihmPT0xKVAuZT1jLGpzPWc7ZWxzZXtmb3IocD0xLGQ9U1swXTtkPj0xMDtkLz0xMClwKys7UC5lPXArYypmLTEseShQLGE/bytQLmUrMTpvLHMsZyl9cmV0dXJuIFB9fSgpO2Z1bmN0aW9uIHkoZSxyLHQsbil7dmFyIGksbyxzLGEsbCx1LGMscCxkLGY9ZS5jb25zdHJ1Y3RvcjtlOmlmKHIhPW51bGwpe2lmKHA9ZS5kLCFwKXJldHVybiBlO2ZvcihpPTEsYT1wWzBdO2E+PTEwO2EvPTEwKWkrKztpZihvPXItaSxvPDApbys9RSxzPXIsYz1wW2Q9MF0sbD1jL1UoMTAsaS1zLTEpJTEwfDA7ZWxzZSBpZihkPU1hdGguY2VpbCgobysxKS9FKSxhPXAubGVuZ3RoLGQ+PWEpaWYobil7Zm9yKDthKys8PWQ7KXAucHVzaCgwKTtjPWw9MCxpPTEsbyU9RSxzPW8tRSsxfWVsc2UgYnJlYWsgZTtlbHNle2ZvcihjPWE9cFtkXSxpPTE7YT49MTA7YS89MTApaSsrO28lPUUscz1vLUUraSxsPXM8MD8wOmMvVSgxMCxpLXMtMSklMTB8MH1pZihuPW58fHI8MHx8cFtkKzFdIT09dm9pZCAwfHwoczwwP2M6YyVVKDEwLGktcy0xKSksdT10PDQ/KGx8fG4pJiYodD09MHx8dD09KGUuczwwPzM6MikpOmw+NXx8bD09NSYmKHQ9PTR8fG58fHQ9PTYmJihvPjA/cz4wP2MvVSgxMCxpLXMpOjA6cFtkLTFdKSUxMCYxfHx0PT0oZS5zPDA/ODo3KSkscjwxfHwhcFswXSlyZXR1cm4gcC5sZW5ndGg9MCx1PyhyLT1lLmUrMSxwWzBdPVUoMTAsKEUtciVFKSVFKSxlLmU9LXJ8fDApOnBbMF09ZS5lPTAsZTtpZihvPT0wPyhwLmxlbmd0aD1kLGE9MSxkLS0pOihwLmxlbmd0aD1kKzEsYT1VKDEwLEUtbykscFtkXT1zPjA/KGMvVSgxMCxpLXMpJVUoMTAscyl8MCkqYTowKSx1KWZvcig7OylpZihkPT0wKXtmb3Iobz0xLHM9cFswXTtzPj0xMDtzLz0xMClvKys7Zm9yKHM9cFswXSs9YSxhPTE7cz49MTA7cy89MTApYSsrO28hPWEmJihlLmUrKyxwWzBdPT1mZSYmKHBbMF09MSkpO2JyZWFrfWVsc2V7aWYocFtkXSs9YSxwW2RdIT1mZSlicmVhaztwW2QtLV09MCxhPTF9Zm9yKG89cC5sZW5ndGg7cFstLW9dPT09MDspcC5wb3AoKX1yZXR1cm4gdyYmKGUuZT5mLm1heEU/KGUuZD1udWxsLGUuZT1OYU4pOmUuZTxmLm1pbkUmJihlLmU9MCxlLmQ9WzBdKSksZX1mdW5jdGlvbiB4ZShlLHIsdCl7aWYoIWUuaXNGaW5pdGUoKSlyZXR1cm4gSHMoZSk7dmFyIG4saT1lLmUsbz1KKGUuZCkscz1vLmxlbmd0aDtyZXR1cm4gcj8odCYmKG49dC1zKT4wP289by5jaGFyQXQoMCkrXCIuXCIrby5zbGljZSgxKStXZShuKTpzPjEmJihvPW8uY2hhckF0KDApK1wiLlwiK28uc2xpY2UoMSkpLG89bysoZS5lPDA/XCJlXCI6XCJlK1wiKStlLmUpOmk8MD8obz1cIjAuXCIrV2UoLWktMSkrbyx0JiYobj10LXMpPjAmJihvKz1XZShuKSkpOmk+PXM/KG8rPVdlKGkrMS1zKSx0JiYobj10LWktMSk+MCYmKG89bytcIi5cIitXZShuKSkpOigobj1pKzEpPHMmJihvPW8uc2xpY2UoMCxuKStcIi5cIitvLnNsaWNlKG4pKSx0JiYobj10LXMpPjAmJihpKzE9PT1zJiYobys9XCIuXCIpLG8rPVdlKG4pKSksb31mdW5jdGlvbiBtbihlLHIpe3ZhciB0PWVbMF07Zm9yKHIqPUU7dD49MTA7dC89MTApcisrO3JldHVybiByfWZ1bmN0aW9uIHBuKGUscix0KXtpZihyPnhwKXRocm93IHc9ITAsdCYmKGUucHJlY2lzaW9uPXQpLEVycm9yKFZzKTtyZXR1cm4geShuZXcgZSh1biksciwxLCEwKX1mdW5jdGlvbiB3ZShlLHIsdCl7aWYocj5WaSl0aHJvdyBFcnJvcihWcyk7cmV0dXJuIHkobmV3IGUoY24pLHIsdCwhMCl9ZnVuY3Rpb24gUXMoZSl7dmFyIHI9ZS5sZW5ndGgtMSx0PXIqRSsxO2lmKHI9ZVtyXSxyKXtmb3IoO3IlMTA9PTA7ci89MTApdC0tO2ZvcihyPWVbMF07cj49MTA7ci89MTApdCsrfXJldHVybiB0fWZ1bmN0aW9uIFdlKGUpe2Zvcih2YXIgcj1cIlwiO2UtLTspcis9XCIwXCI7cmV0dXJuIHJ9ZnVuY3Rpb24gV3MoZSxyLHQsbil7dmFyIGksbz1uZXcgZSgxKSxzPU1hdGguY2VpbChuL0UrNCk7Zm9yKHc9ITE7Oyl7aWYodCUyJiYobz1vLnRpbWVzKHIpLCRzKG8uZCxzKSYmKGk9ITApKSx0PVgodC8yKSx0PT09MCl7dD1vLmQubGVuZ3RoLTEsaSYmby5kW3RdPT09MCYmKytvLmRbdF07YnJlYWt9cj1yLnRpbWVzKHIpLCRzKHIuZCxzKX1yZXR1cm4gdz0hMCxvfWZ1bmN0aW9uIE1zKGUpe3JldHVybiBlLmRbZS5kLmxlbmd0aC0xXSYxfWZ1bmN0aW9uIEpzKGUscix0KXtmb3IodmFyIG4saSxvPW5ldyBlKHJbMF0pLHM9MDsrK3M8ci5sZW5ndGg7KXtpZihpPW5ldyBlKHJbc10pLCFpLnMpe289aTticmVha31uPW8uY21wKGkpLChuPT09dHx8bj09PTAmJm8ucz09PXQpJiYobz1pKX1yZXR1cm4gb31mdW5jdGlvbiBCaShlLHIpe3ZhciB0LG4saSxvLHMsYSxsLHU9MCxjPTAscD0wLGQ9ZS5jb25zdHJ1Y3RvcixmPWQucm91bmRpbmcsZz1kLnByZWNpc2lvbjtpZighZS5kfHwhZS5kWzBdfHxlLmU+MTcpcmV0dXJuIG5ldyBkKGUuZD9lLmRbMF0/ZS5zPDA/MDoxLzA6MTplLnM/ZS5zPDA/MDplOk5hTik7Zm9yKHI9PW51bGw/KHc9ITEsbD1nKTpsPXIsYT1uZXcgZCguMDMxMjUpO2UuZT4tMjspZT1lLnRpbWVzKGEpLHArPTU7Zm9yKG49TWF0aC5sb2coVSgyLHApKS9NYXRoLkxOMTAqMis1fDAsbCs9bix0PW89cz1uZXcgZCgxKSxkLnByZWNpc2lvbj1sOzspe2lmKG89eShvLnRpbWVzKGUpLGwsMSksdD10LnRpbWVzKCsrYyksYT1zLnBsdXMoTChvLHQsbCwxKSksSihhLmQpLnNsaWNlKDAsbCk9PT1KKHMuZCkuc2xpY2UoMCxsKSl7Zm9yKGk9cDtpLS07KXM9eShzLnRpbWVzKHMpLGwsMSk7aWYocj09bnVsbClpZih1PDMmJnN0KHMuZCxsLW4sZix1KSlkLnByZWNpc2lvbj1sKz0xMCx0PW89YT1uZXcgZCgxKSxjPTAsdSsrO2Vsc2UgcmV0dXJuIHkocyxkLnByZWNpc2lvbj1nLGYsdz0hMCk7ZWxzZSByZXR1cm4gZC5wcmVjaXNpb249ZyxzfXM9YX19ZnVuY3Rpb24gSmUoZSxyKXt2YXIgdCxuLGksbyxzLGEsbCx1LGMscCxkLGY9MSxnPTEwLGg9ZSxJPWguZCxQPWguY29uc3RydWN0b3IsUz1QLnJvdW5kaW5nLGI9UC5wcmVjaXNpb247aWYoaC5zPDB8fCFJfHwhSVswXXx8IWguZSYmSVswXT09MSYmSS5sZW5ndGg9PTEpcmV0dXJuIG5ldyBQKEkmJiFJWzBdPy0xLzA6aC5zIT0xP05hTjpJPzA6aCk7aWYocj09bnVsbD8odz0hMSxjPWIpOmM9cixQLnByZWNpc2lvbj1jKz1nLHQ9SihJKSxuPXQuY2hhckF0KDApLE1hdGguYWJzKG89aC5lKTwxNWUxNCl7Zm9yKDtuPDcmJm4hPTF8fG49PTEmJnQuY2hhckF0KDEpPjM7KWg9aC50aW1lcyhlKSx0PUooaC5kKSxuPXQuY2hhckF0KDApLGYrKztvPWguZSxuPjE/KGg9bmV3IFAoXCIwLlwiK3QpLG8rKyk6aD1uZXcgUChuK1wiLlwiK3Quc2xpY2UoMSkpfWVsc2UgcmV0dXJuIHU9cG4oUCxjKzIsYikudGltZXMobytcIlwiKSxoPUplKG5ldyBQKG4rXCIuXCIrdC5zbGljZSgxKSksYy1nKS5wbHVzKHUpLFAucHJlY2lzaW9uPWIscj09bnVsbD95KGgsYixTLHc9ITApOmg7Zm9yKHA9aCxsPXM9aD1MKGgubWludXMoMSksaC5wbHVzKDEpLGMsMSksZD15KGgudGltZXMoaCksYywxKSxpPTM7Oyl7aWYocz15KHMudGltZXMoZCksYywxKSx1PWwucGx1cyhMKHMsbmV3IFAoaSksYywxKSksSih1LmQpLnNsaWNlKDAsYyk9PT1KKGwuZCkuc2xpY2UoMCxjKSlpZihsPWwudGltZXMoMiksbyE9PTAmJihsPWwucGx1cyhwbihQLGMrMixiKS50aW1lcyhvK1wiXCIpKSksbD1MKGwsbmV3IFAoZiksYywxKSxyPT1udWxsKWlmKHN0KGwuZCxjLWcsUyxhKSlQLnByZWNpc2lvbj1jKz1nLHU9cz1oPUwocC5taW51cygxKSxwLnBsdXMoMSksYywxKSxkPXkoaC50aW1lcyhoKSxjLDEpLGk9YT0xO2Vsc2UgcmV0dXJuIHkobCxQLnByZWNpc2lvbj1iLFMsdz0hMCk7ZWxzZSByZXR1cm4gUC5wcmVjaXNpb249YixsO2w9dSxpKz0yfX1mdW5jdGlvbiBIcyhlKXtyZXR1cm4gU3RyaW5nKGUucyplLnMvMCl9ZnVuY3Rpb24gbG4oZSxyKXt2YXIgdCxuLGk7Zm9yKCh0PXIuaW5kZXhPZihcIi5cIikpPi0xJiYocj1yLnJlcGxhY2UoXCIuXCIsXCJcIikpLChuPXIuc2VhcmNoKC9lL2kpKT4wPyh0PDAmJih0PW4pLHQrPStyLnNsaWNlKG4rMSkscj1yLnN1YnN0cmluZygwLG4pKTp0PDAmJih0PXIubGVuZ3RoKSxuPTA7ci5jaGFyQ29kZUF0KG4pPT09NDg7bisrKTtmb3IoaT1yLmxlbmd0aDtyLmNoYXJDb2RlQXQoaS0xKT09PTQ4Oy0taSk7aWYocj1yLnNsaWNlKG4saSkscil7aWYoaS09bixlLmU9dD10LW4tMSxlLmQ9W10sbj0odCsxKSVFLHQ8MCYmKG4rPUUpLG48aSl7Zm9yKG4mJmUuZC5wdXNoKCtyLnNsaWNlKDAsbikpLGktPUU7bjxpOyllLmQucHVzaCgrci5zbGljZShuLG4rPUUpKTtyPXIuc2xpY2Uobiksbj1FLXIubGVuZ3RofWVsc2Ugbi09aTtmb3IoO24tLTspcis9XCIwXCI7ZS5kLnB1c2goK3IpLHcmJihlLmU+ZS5jb25zdHJ1Y3Rvci5tYXhFPyhlLmQ9bnVsbCxlLmU9TmFOKTplLmU8ZS5jb25zdHJ1Y3Rvci5taW5FJiYoZS5lPTAsZS5kPVswXSkpfWVsc2UgZS5lPTAsZS5kPVswXTtyZXR1cm4gZX1mdW5jdGlvbiBQcChlLHIpe3ZhciB0LG4saSxvLHMsYSxsLHUsYztpZihyLmluZGV4T2YoXCJfXCIpPi0xKXtpZihyPXIucmVwbGFjZSgvKFxcZClfKD89XFxkKS9nLFwiJDFcIiksR3MudGVzdChyKSlyZXR1cm4gbG4oZSxyKX1lbHNlIGlmKHI9PT1cIkluZmluaXR5XCJ8fHI9PT1cIk5hTlwiKXJldHVybityfHwoZS5zPU5hTiksZS5lPU5hTixlLmQ9bnVsbCxlO2lmKGJwLnRlc3QocikpdD0xNixyPXIudG9Mb3dlckNhc2UoKTtlbHNlIGlmKHlwLnRlc3QocikpdD0yO2Vsc2UgaWYoRXAudGVzdChyKSl0PTg7ZWxzZSB0aHJvdyBFcnJvcihIZStyKTtmb3Iobz1yLnNlYXJjaCgvcC9pKSxvPjA/KGw9K3Iuc2xpY2UobysxKSxyPXIuc3Vic3RyaW5nKDIsbykpOnI9ci5zbGljZSgyKSxvPXIuaW5kZXhPZihcIi5cIikscz1vPj0wLG49ZS5jb25zdHJ1Y3RvcixzJiYocj1yLnJlcGxhY2UoXCIuXCIsXCJcIiksYT1yLmxlbmd0aCxvPWEtbyxpPVdzKG4sbmV3IG4odCksbyxvKjIpKSx1PWFuKHIsdCxmZSksYz11Lmxlbmd0aC0xLG89Yzt1W29dPT09MDstLW8pdS5wb3AoKTtyZXR1cm4gbzwwP25ldyBuKGUucyowKTooZS5lPW1uKHUsYyksZS5kPXUsdz0hMSxzJiYoZT1MKGUsaSxhKjQpKSxsJiYoZT1lLnRpbWVzKE1hdGguYWJzKGwpPDU0P1UoMixsKTpzci5wb3coMixsKSkpLHc9ITAsZSl9ZnVuY3Rpb24gVHAoZSxyKXt2YXIgdCxuPXIuZC5sZW5ndGg7aWYobjwzKXJldHVybiByLmlzWmVybygpP3I6UHIoZSwyLHIscik7dD0xLjQqTWF0aC5zcXJ0KG4pLHQ9dD4xNj8xNjp0fDAscj1yLnRpbWVzKDEvZm4oNSx0KSkscj1QcihlLDIscixyKTtmb3IodmFyIGksbz1uZXcgZSg1KSxzPW5ldyBlKDE2KSxhPW5ldyBlKDIwKTt0LS07KWk9ci50aW1lcyhyKSxyPXIudGltZXMoby5wbHVzKGkudGltZXMocy50aW1lcyhpKS5taW51cyhhKSkpKTtyZXR1cm4gcn1mdW5jdGlvbiBQcihlLHIsdCxuLGkpe3ZhciBvLHMsYSxsLHU9MSxjPWUucHJlY2lzaW9uLHA9TWF0aC5jZWlsKGMvRSk7Zm9yKHc9ITEsbD10LnRpbWVzKHQpLGE9bmV3IGUobik7Oyl7aWYocz1MKGEudGltZXMobCksbmV3IGUocisrKnIrKyksYywxKSxhPWk/bi5wbHVzKHMpOm4ubWludXMocyksbj1MKHMudGltZXMobCksbmV3IGUocisrKnIrKyksYywxKSxzPWEucGx1cyhuKSxzLmRbcF0hPT12b2lkIDApe2ZvcihvPXA7cy5kW29dPT09YS5kW29dJiZvLS07KTtpZihvPT0tMSlicmVha31vPWEsYT1uLG49cyxzPW8sdSsrfXJldHVybiB3PSEwLHMuZC5sZW5ndGg9cCsxLHN9ZnVuY3Rpb24gZm4oZSxyKXtmb3IodmFyIHQ9ZTstLXI7KXQqPWU7cmV0dXJuIHR9ZnVuY3Rpb24gS3MoZSxyKXt2YXIgdCxuPXIuczwwLGk9d2UoZSxlLnByZWNpc2lvbiwxKSxvPWkudGltZXMoLjUpO2lmKHI9ci5hYnMoKSxyLmx0ZShvKSlyZXR1cm4gTGU9bj80OjEscjtpZih0PXIuZGl2VG9JbnQoaSksdC5pc1plcm8oKSlMZT1uPzM6MjtlbHNle2lmKHI9ci5taW51cyh0LnRpbWVzKGkpKSxyLmx0ZShvKSlyZXR1cm4gTGU9TXModCk/bj8yOjM6bj80OjEscjtMZT1Ncyh0KT9uPzE6NDpuPzM6Mn1yZXR1cm4gci5taW51cyhpKS5hYnMoKX1mdW5jdGlvbiBVaShlLHIsdCxuKXt2YXIgaSxvLHMsYSxsLHUsYyxwLGQsZj1lLmNvbnN0cnVjdG9yLGc9dCE9PXZvaWQgMDtpZihnPyhpZSh0LDEsS2UpLG49PT12b2lkIDA/bj1mLnJvdW5kaW5nOmllKG4sMCw4KSk6KHQ9Zi5wcmVjaXNpb24sbj1mLnJvdW5kaW5nKSwhZS5pc0Zpbml0ZSgpKWM9SHMoZSk7ZWxzZXtmb3IoYz14ZShlKSxzPWMuaW5kZXhPZihcIi5cIiksZz8oaT0yLHI9PTE2P3Q9dCo0LTM6cj09OCYmKHQ9dCozLTIpKTppPXIscz49MCYmKGM9Yy5yZXBsYWNlKFwiLlwiLFwiXCIpLGQ9bmV3IGYoMSksZC5lPWMubGVuZ3RoLXMsZC5kPWFuKHhlKGQpLDEwLGkpLGQuZT1kLmQubGVuZ3RoKSxwPWFuKGMsMTAsaSksbz1sPXAubGVuZ3RoO3BbLS1sXT09MDspcC5wb3AoKTtpZighcFswXSljPWc/XCIwcCswXCI6XCIwXCI7ZWxzZXtpZihzPDA/by0tOihlPW5ldyBmKGUpLGUuZD1wLGUuZT1vLGU9TChlLGQsdCxuLDAsaSkscD1lLmQsbz1lLmUsdT1qcykscz1wW3RdLGE9aS8yLHU9dXx8cFt0KzFdIT09dm9pZCAwLHU9bjw0PyhzIT09dm9pZCAwfHx1KSYmKG49PT0wfHxuPT09KGUuczwwPzM6MikpOnM+YXx8cz09PWEmJihuPT09NHx8dXx8bj09PTYmJnBbdC0xXSYxfHxuPT09KGUuczwwPzg6NykpLHAubGVuZ3RoPXQsdSlmb3IoOysrcFstLXRdPmktMTspcFt0XT0wLHR8fCgrK28scC51bnNoaWZ0KDEpKTtmb3IobD1wLmxlbmd0aDshcFtsLTFdOy0tbCk7Zm9yKHM9MCxjPVwiXCI7czxsO3MrKyljKz1xaS5jaGFyQXQocFtzXSk7aWYoZyl7aWYobD4xKWlmKHI9PTE2fHxyPT04KXtmb3Iocz1yPT0xNj80OjMsLS1sO2wlcztsKyspYys9XCIwXCI7Zm9yKHA9YW4oYyxpLHIpLGw9cC5sZW5ndGg7IXBbbC0xXTstLWwpO2ZvcihzPTEsYz1cIjEuXCI7czxsO3MrKyljKz1xaS5jaGFyQXQocFtzXSl9ZWxzZSBjPWMuY2hhckF0KDApK1wiLlwiK2Muc2xpY2UoMSk7Yz1jKyhvPDA/XCJwXCI6XCJwK1wiKStvfWVsc2UgaWYobzwwKXtmb3IoOysrbzspYz1cIjBcIitjO2M9XCIwLlwiK2N9ZWxzZSBpZigrK28+bClmb3Ioby09bDtvLS07KWMrPVwiMFwiO2Vsc2UgbzxsJiYoYz1jLnNsaWNlKDAsbykrXCIuXCIrYy5zbGljZShvKSl9Yz0ocj09MTY/XCIweFwiOnI9PTI/XCIwYlwiOnI9PTg/XCIwb1wiOlwiXCIpK2N9cmV0dXJuIGUuczwwP1wiLVwiK2M6Y31mdW5jdGlvbiAkcyhlLHIpe2lmKGUubGVuZ3RoPnIpcmV0dXJuIGUubGVuZ3RoPXIsITB9ZnVuY3Rpb24gU3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFicygpfWZ1bmN0aW9uIFJwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hY29zKCl9ZnVuY3Rpb24gQ3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmFjb3NoKCl9ZnVuY3Rpb24gQXAoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkucGx1cyhyKX1mdW5jdGlvbiBJcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuYXNpbigpfWZ1bmN0aW9uIGtwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hc2luaCgpfWZ1bmN0aW9uIE9wKGUpe3JldHVybiBuZXcgdGhpcyhlKS5hdGFuKCl9ZnVuY3Rpb24gRHAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmF0YW5oKCl9ZnVuY3Rpb24gX3AoZSxyKXtlPW5ldyB0aGlzKGUpLHI9bmV3IHRoaXMocik7dmFyIHQsbj10aGlzLnByZWNpc2lvbixpPXRoaXMucm91bmRpbmcsbz1uKzQ7cmV0dXJuIWUuc3x8IXIucz90PW5ldyB0aGlzKE5hTik6IWUuZCYmIXIuZD8odD13ZSh0aGlzLG8sMSkudGltZXMoci5zPjA/LjI1Oi43NSksdC5zPWUucyk6IXIuZHx8ZS5pc1plcm8oKT8odD1yLnM8MD93ZSh0aGlzLG4saSk6bmV3IHRoaXMoMCksdC5zPWUucyk6IWUuZHx8ci5pc1plcm8oKT8odD13ZSh0aGlzLG8sMSkudGltZXMoLjUpLHQucz1lLnMpOnIuczwwPyh0aGlzLnByZWNpc2lvbj1vLHRoaXMucm91bmRpbmc9MSx0PXRoaXMuYXRhbihMKGUscixvLDEpKSxyPXdlKHRoaXMsbywxKSx0aGlzLnByZWNpc2lvbj1uLHRoaXMucm91bmRpbmc9aSx0PWUuczwwP3QubWludXMocik6dC5wbHVzKHIpKTp0PXRoaXMuYXRhbihMKGUscixvLDEpKSx0fWZ1bmN0aW9uIE5wKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jYnJ0KCl9ZnVuY3Rpb24gTHAoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSwyKX1mdW5jdGlvbiBGcChlLHIsdCl7cmV0dXJuIG5ldyB0aGlzKGUpLmNsYW1wKHIsdCl9ZnVuY3Rpb24gTXAoZSl7aWYoIWV8fHR5cGVvZiBlIT1cIm9iamVjdFwiKXRocm93IEVycm9yKGRuK1wiT2JqZWN0IGV4cGVjdGVkXCIpO3ZhciByLHQsbixpPWUuZGVmYXVsdHM9PT0hMCxvPVtcInByZWNpc2lvblwiLDEsS2UsXCJyb3VuZGluZ1wiLDAsOCxcInRvRXhwTmVnXCIsLXZyLDAsXCJ0b0V4cFBvc1wiLDAsdnIsXCJtYXhFXCIsMCx2cixcIm1pbkVcIiwtdnIsMCxcIm1vZHVsb1wiLDAsOV07Zm9yKHI9MDtyPG8ubGVuZ3RoO3IrPTMpaWYodD1vW3JdLGkmJih0aGlzW3RdPWppW3RdKSwobj1lW3RdKSE9PXZvaWQgMClpZihYKG4pPT09biYmbj49b1tyKzFdJiZuPD1vW3IrMl0pdGhpc1t0XT1uO2Vsc2UgdGhyb3cgRXJyb3IoSGUrdCtcIjogXCIrbik7aWYodD1cImNyeXB0b1wiLGkmJih0aGlzW3RdPWppW3RdKSwobj1lW3RdKSE9PXZvaWQgMClpZihuPT09ITB8fG49PT0hMXx8bj09PTB8fG49PT0xKWlmKG4paWYodHlwZW9mIGNyeXB0bzxcInVcIiYmY3J5cHRvJiYoY3J5cHRvLmdldFJhbmRvbVZhbHVlc3x8Y3J5cHRvLnJhbmRvbUJ5dGVzKSl0aGlzW3RdPSEwO2Vsc2UgdGhyb3cgRXJyb3IoQnMpO2Vsc2UgdGhpc1t0XT0hMTtlbHNlIHRocm93IEVycm9yKEhlK3QrXCI6IFwiK24pO3JldHVybiB0aGlzfWZ1bmN0aW9uICRwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5jb3MoKX1mdW5jdGlvbiBxcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuY29zaCgpfWZ1bmN0aW9uIFlzKGUpe3ZhciByLHQsbjtmdW5jdGlvbiBpKG8pe3ZhciBzLGEsbCx1PXRoaXM7aWYoISh1IGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpKG8pO2lmKHUuY29uc3RydWN0b3I9aSxxcyhvKSl7dS5zPW8ucyx3PyFvLmR8fG8uZT5pLm1heEU/KHUuZT1OYU4sdS5kPW51bGwpOm8uZTxpLm1pbkU/KHUuZT0wLHUuZD1bMF0pOih1LmU9by5lLHUuZD1vLmQuc2xpY2UoKSk6KHUuZT1vLmUsdS5kPW8uZD9vLmQuc2xpY2UoKTpvLmQpO3JldHVybn1pZihsPXR5cGVvZiBvLGw9PT1cIm51bWJlclwiKXtpZihvPT09MCl7dS5zPTEvbzwwPy0xOjEsdS5lPTAsdS5kPVswXTtyZXR1cm59aWYobzwwPyhvPS1vLHUucz0tMSk6dS5zPTEsbz09PX5+byYmbzwxZTcpe2ZvcihzPTAsYT1vO2E+PTEwO2EvPTEwKXMrKzt3P3M+aS5tYXhFPyh1LmU9TmFOLHUuZD1udWxsKTpzPGkubWluRT8odS5lPTAsdS5kPVswXSk6KHUuZT1zLHUuZD1bb10pOih1LmU9cyx1LmQ9W29dKTtyZXR1cm59aWYobyowIT09MCl7b3x8KHUucz1OYU4pLHUuZT1OYU4sdS5kPW51bGw7cmV0dXJufXJldHVybiBsbih1LG8udG9TdHJpbmcoKSl9aWYobD09PVwic3RyaW5nXCIpcmV0dXJuKGE9by5jaGFyQ29kZUF0KDApKT09PTQ1PyhvPW8uc2xpY2UoMSksdS5zPS0xKTooYT09PTQzJiYobz1vLnNsaWNlKDEpKSx1LnM9MSksR3MudGVzdChvKT9sbih1LG8pOlBwKHUsbyk7aWYobD09PVwiYmlnaW50XCIpcmV0dXJuIG88MD8obz0tbyx1LnM9LTEpOnUucz0xLGxuKHUsby50b1N0cmluZygpKTt0aHJvdyBFcnJvcihIZStvKX1pZihpLnByb3RvdHlwZT1tLGkuUk9VTkRfVVA9MCxpLlJPVU5EX0RPV049MSxpLlJPVU5EX0NFSUw9MixpLlJPVU5EX0ZMT09SPTMsaS5ST1VORF9IQUxGX1VQPTQsaS5ST1VORF9IQUxGX0RPV049NSxpLlJPVU5EX0hBTEZfRVZFTj02LGkuUk9VTkRfSEFMRl9DRUlMPTcsaS5ST1VORF9IQUxGX0ZMT09SPTgsaS5FVUNMSUQ9OSxpLmNvbmZpZz1pLnNldD1NcCxpLmNsb25lPVlzLGkuaXNEZWNpbWFsPXFzLGkuYWJzPVNwLGkuYWNvcz1ScCxpLmFjb3NoPUNwLGkuYWRkPUFwLGkuYXNpbj1JcCxpLmFzaW5oPWtwLGkuYXRhbj1PcCxpLmF0YW5oPURwLGkuYXRhbjI9X3AsaS5jYnJ0PU5wLGkuY2VpbD1McCxpLmNsYW1wPUZwLGkuY29zPSRwLGkuY29zaD1xcCxpLmRpdj1qcCxpLmV4cD1WcCxpLmZsb29yPUJwLGkuaHlwb3Q9VXAsaS5sbj1HcCxpLmxvZz1RcCxpLmxvZzEwPUpwLGkubG9nMj1XcCxpLm1heD1IcCxpLm1pbj1LcCxpLm1vZD1ZcCxpLm11bD16cCxpLnBvdz1acCxpLnJhbmRvbT1YcCxpLnJvdW5kPWVkLGkuc2lnbj1yZCxpLnNpbj10ZCxpLnNpbmg9bmQsaS5zcXJ0PWlkLGkuc3ViPW9kLGkuc3VtPXNkLGkudGFuPWFkLGkudGFuaD1sZCxpLnRydW5jPXVkLGU9PT12b2lkIDAmJihlPXt9KSxlJiZlLmRlZmF1bHRzIT09ITApZm9yKG49W1wicHJlY2lzaW9uXCIsXCJyb3VuZGluZ1wiLFwidG9FeHBOZWdcIixcInRvRXhwUG9zXCIsXCJtYXhFXCIsXCJtaW5FXCIsXCJtb2R1bG9cIixcImNyeXB0b1wiXSxyPTA7cjxuLmxlbmd0aDspZS5oYXNPd25Qcm9wZXJ0eSh0PW5bcisrXSl8fChlW3RdPXRoaXNbdF0pO3JldHVybiBpLmNvbmZpZyhlKSxpfWZ1bmN0aW9uIGpwKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLmRpdihyKX1mdW5jdGlvbiBWcChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuZXhwKCl9ZnVuY3Rpb24gQnAoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSwzKX1mdW5jdGlvbiBVcCgpe3ZhciBlLHIsdD1uZXcgdGhpcygwKTtmb3Iodz0hMSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoOylpZihyPW5ldyB0aGlzKGFyZ3VtZW50c1tlKytdKSxyLmQpdC5kJiYodD10LnBsdXMoci50aW1lcyhyKSkpO2Vsc2V7aWYoci5zKXJldHVybiB3PSEwLG5ldyB0aGlzKDEvMCk7dD1yfXJldHVybiB3PSEwLHQuc3FydCgpfWZ1bmN0aW9uIHFzKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3J8fGUmJmUudG9TdHJpbmdUYWc9PT1Vc3x8ITF9ZnVuY3Rpb24gR3AoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmxuKCl9ZnVuY3Rpb24gUXAoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkubG9nKHIpfWZ1bmN0aW9uIFdwKGUpe3JldHVybiBuZXcgdGhpcyhlKS5sb2coMil9ZnVuY3Rpb24gSnAoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLmxvZygxMCl9ZnVuY3Rpb24gSHAoKXtyZXR1cm4gSnModGhpcyxhcmd1bWVudHMsLTEpfWZ1bmN0aW9uIEtwKCl7cmV0dXJuIEpzKHRoaXMsYXJndW1lbnRzLDEpfWZ1bmN0aW9uIFlwKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLm1vZChyKX1mdW5jdGlvbiB6cChlLHIpe3JldHVybiBuZXcgdGhpcyhlKS5tdWwocil9ZnVuY3Rpb24gWnAoZSxyKXtyZXR1cm4gbmV3IHRoaXMoZSkucG93KHIpfWZ1bmN0aW9uIFhwKGUpe3ZhciByLHQsbixpLG89MCxzPW5ldyB0aGlzKDEpLGE9W107aWYoZT09PXZvaWQgMD9lPXRoaXMucHJlY2lzaW9uOmllKGUsMSxLZSksbj1NYXRoLmNlaWwoZS9FKSx0aGlzLmNyeXB0bylpZihjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKWZvcihyPWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KG4pKTtvPG47KWk9cltvXSxpPj00MjllNz9yW29dPWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTphW28rK109aSUxZTc7ZWxzZSBpZihjcnlwdG8ucmFuZG9tQnl0ZXMpe2ZvcihyPWNyeXB0by5yYW5kb21CeXRlcyhuKj00KTtvPG47KWk9cltvXSsocltvKzFdPDw4KSsocltvKzJdPDwxNikrKChyW28rM10mMTI3KTw8MjQpLGk+PTIxNGU3P2NyeXB0by5yYW5kb21CeXRlcyg0KS5jb3B5KHIsbyk6KGEucHVzaChpJTFlNyksbys9NCk7bz1uLzR9ZWxzZSB0aHJvdyBFcnJvcihCcyk7ZWxzZSBmb3IoO288bjspYVtvKytdPU1hdGgucmFuZG9tKCkqMWU3fDA7Zm9yKG49YVstLW9dLGUlPUUsbiYmZSYmKGk9VSgxMCxFLWUpLGFbb109KG4vaXwwKSppKTthW29dPT09MDtvLS0pYS5wb3AoKTtpZihvPDApdD0wLGE9WzBdO2Vsc2V7Zm9yKHQ9LTE7YVswXT09PTA7dC09RSlhLnNoaWZ0KCk7Zm9yKG49MSxpPWFbMF07aT49MTA7aS89MTApbisrO248RSYmKHQtPUUtbil9cmV0dXJuIHMuZT10LHMuZD1hLHN9ZnVuY3Rpb24gZWQoZSl7cmV0dXJuIHkoZT1uZXcgdGhpcyhlKSxlLmUrMSx0aGlzLnJvdW5kaW5nKX1mdW5jdGlvbiByZChlKXtyZXR1cm4gZT1uZXcgdGhpcyhlKSxlLmQ/ZS5kWzBdP2UuczowKmUuczplLnN8fE5hTn1mdW5jdGlvbiB0ZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuc2luKCl9ZnVuY3Rpb24gbmQoZSl7cmV0dXJuIG5ldyB0aGlzKGUpLnNpbmgoKX1mdW5jdGlvbiBpZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkuc3FydCgpfWZ1bmN0aW9uIG9kKGUscil7cmV0dXJuIG5ldyB0aGlzKGUpLnN1YihyKX1mdW5jdGlvbiBzZCgpe3ZhciBlPTAscj1hcmd1bWVudHMsdD1uZXcgdGhpcyhyW2VdKTtmb3Iodz0hMTt0LnMmJisrZTxyLmxlbmd0aDspdD10LnBsdXMocltlXSk7cmV0dXJuIHc9ITAseSh0LHRoaXMucHJlY2lzaW9uLHRoaXMucm91bmRpbmcpfWZ1bmN0aW9uIGFkKGUpe3JldHVybiBuZXcgdGhpcyhlKS50YW4oKX1mdW5jdGlvbiBsZChlKXtyZXR1cm4gbmV3IHRoaXMoZSkudGFuaCgpfWZ1bmN0aW9uIHVkKGUpe3JldHVybiB5KGU9bmV3IHRoaXMoZSksZS5lKzEsMSl9bVtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildPW0udG9TdHJpbmc7bVtTeW1ib2wudG9TdHJpbmdUYWddPVwiRGVjaW1hbFwiO3ZhciBzcj1tLmNvbnN0cnVjdG9yPVlzKGppKTt1bj1uZXcgc3IodW4pO2NuPW5ldyBzcihjbik7dmFyIHZlPXNyO2Z1bmN0aW9uIFRyKGUpe3JldHVybiBlPT09bnVsbD9lOkFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoVHIpOnR5cGVvZiBlPT1cIm9iamVjdFwiP2NkKGUpP3BkKGUpOnhyKGUsVHIpOmV9ZnVuY3Rpb24gY2QoZSl7cmV0dXJuIGUhPT1udWxsJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmdHlwZW9mIGUuJHR5cGU9PVwic3RyaW5nXCJ9ZnVuY3Rpb24gcGQoeyR0eXBlOmUsdmFsdWU6cn0pe3N3aXRjaChlKXtjYXNlXCJCaWdJbnRcIjpyZXR1cm4gQmlnSW50KHIpO2Nhc2VcIkJ5dGVzXCI6e2xldHtidWZmZXI6dCxieXRlT2Zmc2V0Om4sYnl0ZUxlbmd0aDppfT1CdWZmZXIuZnJvbShyLFwiYmFzZTY0XCIpO3JldHVybiBuZXcgVWludDhBcnJheSh0LG4saSl9Y2FzZVwiRGF0ZVRpbWVcIjpyZXR1cm4gbmV3IERhdGUocik7Y2FzZVwiRGVjaW1hbFwiOnJldHVybiBuZXcgdmUocik7Y2FzZVwiSnNvblwiOnJldHVybiBKU09OLnBhcnNlKHIpO2RlZmF1bHQ6X2UocixcIlVua25vd24gdGFnZ2VkIHZhbHVlXCIpfX12YXIgUGU9Y2xhc3N7X21hcD1uZXcgTWFwO2dldChyKXtyZXR1cm4gdGhpcy5fbWFwLmdldChyKT8udmFsdWV9c2V0KHIsdCl7dGhpcy5fbWFwLnNldChyLHt2YWx1ZTp0fSl9Z2V0T3JDcmVhdGUocix0KXtsZXQgbj10aGlzLl9tYXAuZ2V0KHIpO2lmKG4pcmV0dXJuIG4udmFsdWU7bGV0IGk9dCgpO3JldHVybiB0aGlzLnNldChyLGkpLGl9fTtmdW5jdGlvbiBZZShlKXtyZXR1cm4gZS5zdWJzdHJpbmcoMCwxKS50b0xvd2VyQ2FzZSgpK2Uuc3Vic3RyaW5nKDEpfWZ1bmN0aW9uIHpzKGUscil7bGV0IHQ9e307Zm9yKGxldCBuIG9mIGUpe2xldCBpPW5bcl07dFtpXT1ufXJldHVybiB0fWZ1bmN0aW9uIGF0KGUpe2xldCByO3JldHVybntnZXQoKXtyZXR1cm4gcnx8KHI9e3ZhbHVlOmUoKX0pLHIudmFsdWV9fX1mdW5jdGlvbiBacyhlKXtyZXR1cm57bW9kZWxzOkdpKGUubW9kZWxzKSxlbnVtczpHaShlLmVudW1zKSx0eXBlczpHaShlLnR5cGVzKX19ZnVuY3Rpb24gR2koZSl7bGV0IHI9e307Zm9yKGxldHtuYW1lOnQsLi4ubn1vZiBlKXJbdF09bjtyZXR1cm4gcn1mdW5jdGlvbiBTcihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIERhdGV8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT09PVwiW29iamVjdCBEYXRlXVwifWZ1bmN0aW9uIGduKGUpe3JldHVybiBlLnRvU3RyaW5nKCkhPT1cIkludmFsaWQgRGF0ZVwifWZ1bmN0aW9uIFJyKGUpe3JldHVybiBzci5pc0RlY2ltYWwoZSk/ITA6ZSE9PW51bGwmJnR5cGVvZiBlPT1cIm9iamVjdFwiJiZ0eXBlb2YgZS5zPT1cIm51bWJlclwiJiZ0eXBlb2YgZS5lPT1cIm51bWJlclwiJiZ0eXBlb2YgZS50b0ZpeGVkPT1cImZ1bmN0aW9uXCImJkFycmF5LmlzQXJyYXkoZS5kKX12YXIgbHQ9e307dHIobHQse01vZGVsQWN0aW9uOigpPT5DcixkYXRhbW9kZWxFbnVtVG9TY2hlbWFFbnVtOigpPT5kZH0pO2Z1bmN0aW9uIGRkKGUpe3JldHVybntuYW1lOmUubmFtZSx2YWx1ZXM6ZS52YWx1ZXMubWFwKHI9PnIubmFtZSl9fXZhciBDcj0oYj0+KGIuZmluZFVuaXF1ZT1cImZpbmRVbmlxdWVcIixiLmZpbmRVbmlxdWVPclRocm93PVwiZmluZFVuaXF1ZU9yVGhyb3dcIixiLmZpbmRGaXJzdD1cImZpbmRGaXJzdFwiLGIuZmluZEZpcnN0T3JUaHJvdz1cImZpbmRGaXJzdE9yVGhyb3dcIixiLmZpbmRNYW55PVwiZmluZE1hbnlcIixiLmNyZWF0ZT1cImNyZWF0ZVwiLGIuY3JlYXRlTWFueT1cImNyZWF0ZU1hbnlcIixiLmNyZWF0ZU1hbnlBbmRSZXR1cm49XCJjcmVhdGVNYW55QW5kUmV0dXJuXCIsYi51cGRhdGU9XCJ1cGRhdGVcIixiLnVwZGF0ZU1hbnk9XCJ1cGRhdGVNYW55XCIsYi51cGRhdGVNYW55QW5kUmV0dXJuPVwidXBkYXRlTWFueUFuZFJldHVyblwiLGIudXBzZXJ0PVwidXBzZXJ0XCIsYi5kZWxldGU9XCJkZWxldGVcIixiLmRlbGV0ZU1hbnk9XCJkZWxldGVNYW55XCIsYi5ncm91cEJ5PVwiZ3JvdXBCeVwiLGIuY291bnQ9XCJjb3VudFwiLGIuYWdncmVnYXRlPVwiYWdncmVnYXRlXCIsYi5maW5kUmF3PVwiZmluZFJhd1wiLGIuYWdncmVnYXRlUmF3PVwiYWdncmVnYXRlUmF3XCIsYikpKENyfHx7fSk7dmFyIG5hPWsoUmkoKSk7dmFyIHRhPWsocmVxdWlyZShcIm5vZGU6ZnNcIikpO3ZhciBYcz17a2V5d29yZDpPZSxlbnRpdHk6T2UsdmFsdWU6ZT0+VyhucihlKSkscHVuY3R1YXRpb246bnIsZGlyZWN0aXZlOk9lLGZ1bmN0aW9uOk9lLHZhcmlhYmxlOmU9PlcobnIoZSkpLHN0cmluZzplPT5XKHFlKGUpKSxib29sZWFuOmtlLG51bWJlcjpPZSxjb21tZW50OkhyfTt2YXIgbWQ9ZT0+ZSxobj17fSxmZD0wLHY9e21hbnVhbDpobi5QcmlzbSYmaG4uUHJpc20ubWFudWFsLGRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcjpobi5QcmlzbSYmaG4uUHJpc20uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyLHV0aWw6e2VuY29kZTpmdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgZ2Upe2xldCByPWU7cmV0dXJuIG5ldyBnZShyLnR5cGUsdi51dGlsLmVuY29kZShyLmNvbnRlbnQpLHIuYWxpYXMpfWVsc2UgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5tYXAodi51dGlsLmVuY29kZSk6ZS5yZXBsYWNlKC8mL2csXCImYW1wO1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoL1xcdTAwYTAvZyxcIiBcIil9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sb2JqSWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19pZHx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2lkXCIse3ZhbHVlOisrZmR9KSxlLl9faWR9LGNsb25lOmZ1bmN0aW9uIGUocix0KXtsZXQgbixpLG89di51dGlsLnR5cGUocik7c3dpdGNoKHQ9dHx8e30sbyl7Y2FzZVwiT2JqZWN0XCI6aWYoaT12LnV0aWwub2JqSWQociksdFtpXSlyZXR1cm4gdFtpXTtuPXt9LHRbaV09bjtmb3IobGV0IHMgaW4gcilyLmhhc093blByb3BlcnR5KHMpJiYobltzXT1lKHJbc10sdCkpO3JldHVybiBuO2Nhc2VcIkFycmF5XCI6cmV0dXJuIGk9di51dGlsLm9iaklkKHIpLHRbaV0/dFtpXToobj1bXSx0W2ldPW4sci5mb3JFYWNoKGZ1bmN0aW9uKHMsYSl7blthXT1lKHMsdCl9KSxuKTtkZWZhdWx0OnJldHVybiByfX19LGxhbmd1YWdlczp7ZXh0ZW5kOmZ1bmN0aW9uKGUscil7bGV0IHQ9di51dGlsLmNsb25lKHYubGFuZ3VhZ2VzW2VdKTtmb3IobGV0IG4gaW4gcil0W25dPXJbbl07cmV0dXJuIHR9LGluc2VydEJlZm9yZTpmdW5jdGlvbihlLHIsdCxuKXtuPW58fHYubGFuZ3VhZ2VzO2xldCBpPW5bZV0sbz17fTtmb3IobGV0IGEgaW4gaSlpZihpLmhhc093blByb3BlcnR5KGEpKXtpZihhPT1yKWZvcihsZXQgbCBpbiB0KXQuaGFzT3duUHJvcGVydHkobCkmJihvW2xdPXRbbF0pO3QuaGFzT3duUHJvcGVydHkoYSl8fChvW2FdPWlbYV0pfWxldCBzPW5bZV07cmV0dXJuIG5bZV09byx2Lmxhbmd1YWdlcy5ERlModi5sYW5ndWFnZXMsZnVuY3Rpb24oYSxsKXtsPT09cyYmYSE9ZSYmKHRoaXNbYV09byl9KSxvfSxERlM6ZnVuY3Rpb24gZShyLHQsbixpKXtpPWl8fHt9O2xldCBvPXYudXRpbC5vYmpJZDtmb3IobGV0IHMgaW4gcilpZihyLmhhc093blByb3BlcnR5KHMpKXt0LmNhbGwocixzLHJbc10sbnx8cyk7bGV0IGE9cltzXSxsPXYudXRpbC50eXBlKGEpO2w9PT1cIk9iamVjdFwiJiYhaVtvKGEpXT8oaVtvKGEpXT0hMCxlKGEsdCxudWxsLGkpKTpsPT09XCJBcnJheVwiJiYhaVtvKGEpXSYmKGlbbyhhKV09ITAsZShhLHQscyxpKSl9fX0scGx1Z2luczp7fSxoaWdobGlnaHQ6ZnVuY3Rpb24oZSxyLHQpe2xldCBuPXtjb2RlOmUsZ3JhbW1hcjpyLGxhbmd1YWdlOnR9O3JldHVybiB2Lmhvb2tzLnJ1bihcImJlZm9yZS10b2tlbml6ZVwiLG4pLG4udG9rZW5zPXYudG9rZW5pemUobi5jb2RlLG4uZ3JhbW1hciksdi5ob29rcy5ydW4oXCJhZnRlci10b2tlbml6ZVwiLG4pLGdlLnN0cmluZ2lmeSh2LnV0aWwuZW5jb2RlKG4udG9rZW5zKSxuLmxhbmd1YWdlKX0sbWF0Y2hHcmFtbWFyOmZ1bmN0aW9uKGUscix0LG4saSxvLHMpe2ZvcihsZXQgaCBpbiB0KXtpZighdC5oYXNPd25Qcm9wZXJ0eShoKXx8IXRbaF0pY29udGludWU7aWYoaD09cylyZXR1cm47bGV0IEk9dFtoXTtJPXYudXRpbC50eXBlKEkpPT09XCJBcnJheVwiP0k6W0ldO2ZvcihsZXQgUD0wO1A8SS5sZW5ndGg7KytQKXtsZXQgUz1JW1BdLGI9Uy5pbnNpZGUsTz0hIVMubG9va2JlaGluZCxtZT0hIVMuZ3JlZWR5LGFlPTAsSnI9Uy5hbGlhcztpZihtZSYmIVMucGF0dGVybi5nbG9iYWwpe2xldCBWPVMucGF0dGVybi50b1N0cmluZygpLm1hdGNoKC9baW11eV0qJC8pWzBdO1MucGF0dGVybj1SZWdFeHAoUy5wYXR0ZXJuLnNvdXJjZSxWK1wiZ1wiKX1TPVMucGF0dGVybnx8Uztmb3IobGV0IFY9bix0ZT1pO1Y8ci5sZW5ndGg7dGUrPXJbVl0ubGVuZ3RoLCsrVil7bGV0IEFlPXJbVl07aWYoci5sZW5ndGg+ZS5sZW5ndGgpcmV0dXJuO2lmKEFlIGluc3RhbmNlb2YgZ2UpY29udGludWU7aWYobWUmJlYhPXIubGVuZ3RoLTEpe1MubGFzdEluZGV4PXRlO3ZhciBwPVMuZXhlYyhlKTtpZighcClicmVhazt2YXIgYz1wLmluZGV4KyhPP3BbMV0ubGVuZ3RoOjApLGQ9cC5pbmRleCtwWzBdLmxlbmd0aCxhPVYsbD10ZTtmb3IobGV0IF89ci5sZW5ndGg7YTxfJiYobDxkfHwhclthXS50eXBlJiYhclthLTFdLmdyZWVkeSk7KythKWwrPXJbYV0ubGVuZ3RoLGM+PWwmJigrK1YsdGU9bCk7aWYocltWXWluc3RhbmNlb2YgZ2UpY29udGludWU7dT1hLVYsQWU9ZS5zbGljZSh0ZSxsKSxwLmluZGV4LT10ZX1lbHNle1MubGFzdEluZGV4PTA7dmFyIHA9Uy5leGVjKEFlKSx1PTF9aWYoIXApe2lmKG8pYnJlYWs7Y29udGludWV9TyYmKGFlPXBbMV0/cFsxXS5sZW5ndGg6MCk7dmFyIGM9cC5pbmRleCthZSxwPXBbMF0uc2xpY2UoYWUpLGQ9YytwLmxlbmd0aCxmPUFlLnNsaWNlKDAsYyksZz1BZS5zbGljZShkKTtsZXQgSD1bVix1XTtmJiYoKytWLHRlKz1mLmxlbmd0aCxILnB1c2goZikpO2xldCBmcj1uZXcgZ2UoaCxiP3YudG9rZW5pemUocCxiKTpwLEpyLHAsbWUpO2lmKEgucHVzaChmciksZyYmSC5wdXNoKGcpLEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkocixIKSx1IT0xJiZ2Lm1hdGNoR3JhbW1hcihlLHIsdCxWLHRlLCEwLGgpLG8pYnJlYWt9fX19LHRva2VuaXplOmZ1bmN0aW9uKGUscil7bGV0IHQ9W2VdLG49ci5yZXN0O2lmKG4pe2ZvcihsZXQgaSBpbiBuKXJbaV09bltpXTtkZWxldGUgci5yZXN0fXJldHVybiB2Lm1hdGNoR3JhbW1hcihlLHQsciwwLDAsITEpLHR9LGhvb2tzOnthbGw6e30sYWRkOmZ1bmN0aW9uKGUscil7bGV0IHQ9di5ob29rcy5hbGw7dFtlXT10W2VdfHxbXSx0W2VdLnB1c2gocil9LHJ1bjpmdW5jdGlvbihlLHIpe2xldCB0PXYuaG9va3MuYWxsW2VdO2lmKCEoIXR8fCF0Lmxlbmd0aCkpZm9yKHZhciBuPTAsaTtpPXRbbisrXTspaShyKX19LFRva2VuOmdlfTt2Lmxhbmd1YWdlcy5jbGlrZT17Y29tbWVudDpbe3BhdHRlcm46LyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteXFxcXDpdKVxcL1xcLy4qLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH1dLHN0cmluZzp7cGF0dGVybjovKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLGdyZWVkeTohMH0sXCJjbGFzcy1uYW1lXCI6e3BhdHRlcm46LygoPzpcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfHRyYWl0fGluc3RhbmNlb2Z8bmV3KVxccyspfCg/OmNhdGNoXFxzK1xcKCkpW1xcdy5cXFxcXSsvaSxsb29rYmVoaW5kOiEwLGluc2lkZTp7cHVuY3R1YXRpb246L1suXFxcXF0vfX0sa2V5d29yZDovXFxiKD86aWZ8ZWxzZXx3aGlsZXxkb3xmb3J8cmV0dXJufGlufGluc3RhbmNlb2Z8ZnVuY3Rpb258bmV3fHRyeXx0aHJvd3xjYXRjaHxmaW5hbGx5fG51bGx8YnJlYWt8Y29udGludWUpXFxiLyxib29sZWFuOi9cXGIoPzp0cnVlfGZhbHNlKVxcYi8sZnVuY3Rpb246L1xcdysoPz1cXCgpLyxudW1iZXI6L1xcYjB4W1xcZGEtZl0rXFxifCg/OlxcYlxcZCtcXC4/XFxkKnxcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspPy9pLG9wZXJhdG9yOi8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLHB1bmN0dWF0aW9uOi9be31bXFxdOygpLC46XS99O3YubGFuZ3VhZ2VzLmphdmFzY3JpcHQ9di5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7XCJjbGFzcy1uYW1lXCI6W3YubGFuZ3VhZ2VzLmNsaWtlW1wiY2xhc3MtbmFtZVwiXSx7cGF0dGVybjovKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pW18kQS1aXFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxcLig/OnByb3RvdHlwZXxjb25zdHJ1Y3RvcikpLyxsb29rYmVoaW5kOiEwfV0sa2V5d29yZDpbe3BhdHRlcm46LygoPzpefH0pXFxzKikoPzpjYXRjaHxmaW5hbGx5KVxcYi8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteLl0pXFxiKD86YXN8YXN5bmMoPz1cXHMqKD86ZnVuY3Rpb25cXGJ8XFwofFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLGxvb2tiZWhpbmQ6ITB9XSxudW1iZXI6L1xcYig/Oig/OjBbeFhdKD86W1xcZEEtRmEtZl0oPzpfW1xcZEEtRmEtZl0pPykrfDBbYkJdKD86WzAxXSg/Ol9bMDFdKT8pK3wwW29PXSg/OlswLTddKD86X1swLTddKT8pKyluP3woPzpcXGQoPzpfXFxkKT8pK258TmFOfEluZmluaXR5KVxcYnwoPzpcXGIoPzpcXGQoPzpfXFxkKT8pK1xcLj8oPzpcXGQoPzpfXFxkKT8pKnxcXEJcXC4oPzpcXGQoPzpfXFxkKT8pKykoPzpbRWVdWystXT8oPzpcXGQoPzpfXFxkKT8pKyk/LyxmdW5jdGlvbjovW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccyooPzpcXC5cXHMqKD86YXBwbHl8YmluZHxjYWxsKVxccyopP1xcKCkvLG9wZXJhdG9yOi8tWy09XT98XFwrWys9XT98IT0/PT98PDw/PT98Pj4/Pj89P3w9KD86PT0/fD4pP3wmWyY9XT98XFx8W3w9XT98XFwqXFwqPz0/fFxcLz0/fH58XFxePT98JT0/fFxcP3xcXC57M30vfSk7di5sYW5ndWFnZXMuamF2YXNjcmlwdFtcImNsYXNzLW5hbWVcIl1bMF0ucGF0dGVybj0vKFxcYig/OmNsYXNzfGludGVyZmFjZXxleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxuZXcpXFxzKylbXFx3LlxcXFxdKy87di5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwia2V5d29yZFwiLHtyZWdleDp7cGF0dGVybjovKCg/Ol58W14kXFx3XFx4QTAtXFx1RkZGRi5cIidcXF0pXFxzXSlcXHMqKVxcLyhcXFsoPzpbXlxcXVxcXFxcXHJcXG5dfFxcXFwuKSpdfFxcXFwufFteL1xcXFxcXFtcXHJcXG5dKStcXC9bZ2lteXVzXXswLDZ9KD89XFxzKigkfFtcXHJcXG4sLjt9KVxcXV0pKS8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9LFwiZnVuY3Rpb24tdmFyaWFibGVcIjp7cGF0dGVybjovW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccypbPTpdXFxzKig/OmFzeW5jXFxzKik/KD86XFxiZnVuY3Rpb25cXGJ8KD86XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCl8W18kYS16QS1aXFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKilcXHMqPT4pKS8sYWxpYXM6XCJmdW5jdGlvblwifSxwYXJhbWV0ZXI6W3twYXR0ZXJuOi8oZnVuY3Rpb24oPzpcXHMrW18kQS1aYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKik/XFxzKlxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXCkpLyxsb29rYmVoaW5kOiEwLGluc2lkZTp2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo9PikvaSxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH0se3BhdHRlcm46LyhcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpXFxzKj0+KS8sbG9va2JlaGluZDohMCxpbnNpZGU6di5sYW5ndWFnZXMuamF2YXNjcmlwdH0se3BhdHRlcm46LygoPzpcXGJ8XFxzfF4pKD8hKD86YXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpKD8hWyRcXHdcXHhBMC1cXHVGRkZGXSkpKD86W18kQS1aYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKlxccyopXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKVxccypcXHspLyxsb29rYmVoaW5kOiEwLGluc2lkZTp2Lmxhbmd1YWdlcy5qYXZhc2NyaXB0fV0sY29uc3RhbnQ6L1xcYltBLVpdKD86W0EtWl9dfFxcZHg/KSpcXGIvfSk7di5sYW5ndWFnZXMubWFya3VwJiZ2Lmxhbmd1YWdlcy5tYXJrdXAudGFnLmFkZElubGluZWQoXCJzY3JpcHRcIixcImphdmFzY3JpcHRcIik7di5sYW5ndWFnZXMuanM9di5sYW5ndWFnZXMuamF2YXNjcmlwdDt2Lmxhbmd1YWdlcy50eXBlc2NyaXB0PXYubGFuZ3VhZ2VzLmV4dGVuZChcImphdmFzY3JpcHRcIix7a2V5d29yZDovXFxiKD86YWJzdHJhY3R8YXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb25zdHJ1Y3Rvcnxjb250aW51ZXxkZWJ1Z2dlcnxkZWNsYXJlfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxpc3xrZXlvZnxsZXR8bW9kdWxlfG5hbWVzcGFjZXxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZWFkb25seXxyZXR1cm58cmVxdWlyZXxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlfHR5cGVvZnx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sYnVpbHRpbjovXFxiKD86c3RyaW5nfEZ1bmN0aW9ufGFueXxudW1iZXJ8Ym9vbGVhbnxBcnJheXxzeW1ib2x8Y29uc29sZXxQcm9taXNlfHVua25vd258bmV2ZXIpXFxiL30pO3YubGFuZ3VhZ2VzLnRzPXYubGFuZ3VhZ2VzLnR5cGVzY3JpcHQ7ZnVuY3Rpb24gZ2UoZSxyLHQsbixpKXt0aGlzLnR5cGU9ZSx0aGlzLmNvbnRlbnQ9cix0aGlzLmFsaWFzPXQsdGhpcy5sZW5ndGg9KG58fFwiXCIpLmxlbmd0aHwwLHRoaXMuZ3JlZWR5PSEhaX1nZS5zdHJpbmdpZnk9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/ZTpBcnJheS5pc0FycmF5KGUpP2UubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBnZS5zdHJpbmdpZnkodCxyKX0pLmpvaW4oXCJcIik6Z2QoZS50eXBlKShlLmNvbnRlbnQpfTtmdW5jdGlvbiBnZChlKXtyZXR1cm4gWHNbZV18fG1kfWZ1bmN0aW9uIGVhKGUpe3JldHVybiBoZChlLHYubGFuZ3VhZ2VzLmphdmFzY3JpcHQpfWZ1bmN0aW9uIGhkKGUscil7cmV0dXJuIHYudG9rZW5pemUoZSxyKS5tYXAobj0+Z2Uuc3RyaW5naWZ5KG4pKS5qb2luKFwiXCIpfWZ1bmN0aW9uIHJhKGUpe3JldHVybiBUaShlKX12YXIgeW49Y2xhc3MgZXtmaXJzdExpbmVOdW1iZXI7bGluZXM7c3RhdGljIHJlYWQocil7bGV0IHQ7dHJ5e3Q9dGEuZGVmYXVsdC5yZWFkRmlsZVN5bmMocixcInV0Zi04XCIpfWNhdGNoe3JldHVybiBudWxsfXJldHVybiBlLmZyb21Db250ZW50KHQpfXN0YXRpYyBmcm9tQ29udGVudChyKXtsZXQgdD1yLnNwbGl0KC9cXHI/XFxuLyk7cmV0dXJuIG5ldyBlKDEsdCl9Y29uc3RydWN0b3Iocix0KXt0aGlzLmZpcnN0TGluZU51bWJlcj1yLHRoaXMubGluZXM9dH1nZXQgbGFzdExpbmVOdW1iZXIoKXtyZXR1cm4gdGhpcy5maXJzdExpbmVOdW1iZXIrdGhpcy5saW5lcy5sZW5ndGgtMX1tYXBMaW5lQXQocix0KXtpZihyPHRoaXMuZmlyc3RMaW5lTnVtYmVyfHxyPnRoaXMubGluZXMubGVuZ3RoK3RoaXMuZmlyc3RMaW5lTnVtYmVyKXJldHVybiB0aGlzO2xldCBuPXItdGhpcy5maXJzdExpbmVOdW1iZXIsaT1bLi4udGhpcy5saW5lc107cmV0dXJuIGlbbl09dChpW25dKSxuZXcgZSh0aGlzLmZpcnN0TGluZU51bWJlcixpKX1tYXBMaW5lcyhyKXtyZXR1cm4gbmV3IGUodGhpcy5maXJzdExpbmVOdW1iZXIsdGhpcy5saW5lcy5tYXAoKHQsbik9PnIodCx0aGlzLmZpcnN0TGluZU51bWJlcituKSkpfWxpbmVBdChyKXtyZXR1cm4gdGhpcy5saW5lc1tyLXRoaXMuZmlyc3RMaW5lTnVtYmVyXX1wcmVwZW5kU3ltYm9sQXQocix0KXtyZXR1cm4gdGhpcy5tYXBMaW5lcygobixpKT0+aT09PXI/YCR7dH0gJHtufWA6YCAgJHtufWApfXNsaWNlKHIsdCl7bGV0IG49dGhpcy5saW5lcy5zbGljZShyLTEsdCkuam9pbihgXG5gKTtyZXR1cm4gbmV3IGUocixyYShuKS5zcGxpdChgXG5gKSl9aGlnaGxpZ2h0KCl7bGV0IHI9ZWEodGhpcy50b1N0cmluZygpKTtyZXR1cm4gbmV3IGUodGhpcy5maXJzdExpbmVOdW1iZXIsci5zcGxpdChgXG5gKSl9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5saW5lcy5qb2luKGBcbmApfX07dmFyIHlkPXtyZWQ6Y2UsZ3JheTpIcixkaW06SWUsYm9sZDpXLHVuZGVybGluZTpZLGhpZ2hsaWdodFNvdXJjZTplPT5lLmhpZ2hsaWdodCgpfSxiZD17cmVkOmU9PmUsZ3JheTplPT5lLGRpbTplPT5lLGJvbGQ6ZT0+ZSx1bmRlcmxpbmU6ZT0+ZSxoaWdobGlnaHRTb3VyY2U6ZT0+ZX07ZnVuY3Rpb24gRWQoe21lc3NhZ2U6ZSxvcmlnaW5hbE1ldGhvZDpyLGlzUGFuaWM6dCxjYWxsQXJndW1lbnRzOm59KXtyZXR1cm57ZnVuY3Rpb25OYW1lOmBwcmlzbWEuJHtyfSgpYCxtZXNzYWdlOmUsaXNQYW5pYzp0Pz8hMSxjYWxsQXJndW1lbnRzOm59fWZ1bmN0aW9uIHdkKHtjYWxsc2l0ZTplLG1lc3NhZ2U6cixvcmlnaW5hbE1ldGhvZDp0LGlzUGFuaWM6bixjYWxsQXJndW1lbnRzOml9LG8pe2xldCBzPUVkKHttZXNzYWdlOnIsb3JpZ2luYWxNZXRob2Q6dCxpc1BhbmljOm4sY2FsbEFyZ3VtZW50czppfSk7aWYoIWV8fHR5cGVvZiB3aW5kb3c8XCJ1XCJ8fHByb2Nlc3MuZW52Lk5PREVfRU5WPT09XCJwcm9kdWN0aW9uXCIpcmV0dXJuIHM7bGV0IGE9ZS5nZXRMb2NhdGlvbigpO2lmKCFhfHwhYS5saW5lTnVtYmVyfHwhYS5jb2x1bW5OdW1iZXIpcmV0dXJuIHM7bGV0IGw9TWF0aC5tYXgoMSxhLmxpbmVOdW1iZXItMyksdT15bi5yZWFkKGEuZmlsZU5hbWUpPy5zbGljZShsLGEubGluZU51bWJlciksYz11Py5saW5lQXQoYS5saW5lTnVtYmVyKTtpZih1JiZjKXtsZXQgcD12ZChjKSxkPXhkKGMpO2lmKCFkKXJldHVybiBzO3MuZnVuY3Rpb25OYW1lPWAke2QuY29kZX0pYCxzLmxvY2F0aW9uPWEsbnx8KHU9dS5tYXBMaW5lQXQoYS5saW5lTnVtYmVyLGc9Pmcuc2xpY2UoMCxkLm9wZW5pbmdCcmFjZUluZGV4KSkpLHU9by5oaWdobGlnaHRTb3VyY2UodSk7bGV0IGY9U3RyaW5nKHUubGFzdExpbmVOdW1iZXIpLmxlbmd0aDtpZihzLmNvbnRleHRMaW5lcz11Lm1hcExpbmVzKChnLGgpPT5vLmdyYXkoU3RyaW5nKGgpLnBhZFN0YXJ0KGYpKStcIiBcIitnKS5tYXBMaW5lcyhnPT5vLmRpbShnKSkucHJlcGVuZFN5bWJvbEF0KGEubGluZU51bWJlcixvLmJvbGQoby5yZWQoXCJcXHUyMTkyXCIpKSksaSl7bGV0IGc9cCtmKzE7Zys9MixzLmNhbGxBcmd1bWVudHM9KDAsbmEuZGVmYXVsdCkoaSxnKS5zbGljZShnKX19cmV0dXJuIHN9ZnVuY3Rpb24geGQoZSl7bGV0IHI9T2JqZWN0LmtleXMoQ3IpLmpvaW4oXCJ8XCIpLG49bmV3IFJlZ0V4cChTdHJpbmcucmF3YFxcLigke3J9KVxcKGApLmV4ZWMoZSk7aWYobil7bGV0IGk9bi5pbmRleCtuWzBdLmxlbmd0aCxvPWUubGFzdEluZGV4T2YoXCIgXCIsbi5pbmRleCkrMTtyZXR1cm57Y29kZTplLnNsaWNlKG8saSksb3BlbmluZ0JyYWNlSW5kZXg6aX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gdmQoZSl7bGV0IHI9MDtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7aWYoZS5jaGFyQXQodCkhPT1cIiBcIilyZXR1cm4gcjtyKyt9cmV0dXJuIHJ9ZnVuY3Rpb24gUGQoe2Z1bmN0aW9uTmFtZTplLGxvY2F0aW9uOnIsbWVzc2FnZTp0LGlzUGFuaWM6bixjb250ZXh0TGluZXM6aSxjYWxsQXJndW1lbnRzOm99LHMpe2xldCBhPVtcIlwiXSxsPXI/XCIgaW5cIjpcIjpcIjtpZihuPyhhLnB1c2gocy5yZWQoYE9vcHMsIGFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQhIFRoaXMgaXMgJHtzLmJvbGQoXCJvbiB1c1wiKX0sIHlvdSBkaWQgbm90aGluZyB3cm9uZy5gKSksYS5wdXNoKHMucmVkKGBJdCBvY2N1cnJlZCBpbiB0aGUgJHtzLmJvbGQoYFxcYCR7ZX1cXGBgKX0gaW52b2NhdGlvbiR7bH1gKSkpOmEucHVzaChzLnJlZChgSW52YWxpZCAke3MuYm9sZChgXFxgJHtlfVxcYGApfSBpbnZvY2F0aW9uJHtsfWApKSxyJiZhLnB1c2gocy51bmRlcmxpbmUoVGQocikpKSxpKXthLnB1c2goXCJcIik7bGV0IHU9W2kudG9TdHJpbmcoKV07byYmKHUucHVzaChvKSx1LnB1c2gocy5kaW0oXCIpXCIpKSksYS5wdXNoKHUuam9pbihcIlwiKSksbyYmYS5wdXNoKFwiXCIpfWVsc2UgYS5wdXNoKFwiXCIpLG8mJmEucHVzaChvKSxhLnB1c2goXCJcIik7cmV0dXJuIGEucHVzaCh0KSxhLmpvaW4oYFxuYCl9ZnVuY3Rpb24gVGQoZSl7bGV0IHI9W2UuZmlsZU5hbWVdO3JldHVybiBlLmxpbmVOdW1iZXImJnIucHVzaChTdHJpbmcoZS5saW5lTnVtYmVyKSksZS5jb2x1bW5OdW1iZXImJnIucHVzaChTdHJpbmcoZS5jb2x1bW5OdW1iZXIpKSxyLmpvaW4oXCI6XCIpfWZ1bmN0aW9uIGJuKGUpe2xldCByPWUuc2hvd0NvbG9ycz95ZDpiZCx0O3JldHVybiB0PXdkKGUsciksUGQodCxyKX12YXIgZGE9ayhRaSgpKTtmdW5jdGlvbiBhYShlLHIsdCl7bGV0IG49bGEoZSksaT1TZChuKSxvPUNkKGkpO28/RW4obyxyLHQpOnIuYWRkRXJyb3JNZXNzYWdlKCgpPT5cIlVua25vd24gZXJyb3JcIil9ZnVuY3Rpb24gbGEoZSl7cmV0dXJuIGUuZXJyb3JzLmZsYXRNYXAocj0+ci5raW5kPT09XCJVbmlvblwiP2xhKHIpOltyXSl9ZnVuY3Rpb24gU2QoZSl7bGV0IHI9bmV3IE1hcCx0PVtdO2ZvcihsZXQgbiBvZiBlKXtpZihuLmtpbmQhPT1cIkludmFsaWRBcmd1bWVudFR5cGVcIil7dC5wdXNoKG4pO2NvbnRpbnVlfWxldCBpPWAke24uc2VsZWN0aW9uUGF0aC5qb2luKFwiLlwiKX06JHtuLmFyZ3VtZW50UGF0aC5qb2luKFwiLlwiKX1gLG89ci5nZXQoaSk7bz9yLnNldChpLHsuLi5uLGFyZ3VtZW50OnsuLi5uLmFyZ3VtZW50LHR5cGVOYW1lczpSZChvLmFyZ3VtZW50LnR5cGVOYW1lcyxuLmFyZ3VtZW50LnR5cGVOYW1lcyl9fSk6ci5zZXQoaSxuKX1yZXR1cm4gdC5wdXNoKC4uLnIudmFsdWVzKCkpLHR9ZnVuY3Rpb24gUmQoZSxyKXtyZXR1cm5bLi4ubmV3IFNldChlLmNvbmNhdChyKSldfWZ1bmN0aW9uIENkKGUpe3JldHVybiAkaShlLChyLHQpPT57bGV0IG49b2EociksaT1vYSh0KTtyZXR1cm4gbiE9PWk/bi1pOnNhKHIpLXNhKHQpfSl9ZnVuY3Rpb24gb2EoZSl7bGV0IHI9MDtyZXR1cm4gQXJyYXkuaXNBcnJheShlLnNlbGVjdGlvblBhdGgpJiYocis9ZS5zZWxlY3Rpb25QYXRoLmxlbmd0aCksQXJyYXkuaXNBcnJheShlLmFyZ3VtZW50UGF0aCkmJihyKz1lLmFyZ3VtZW50UGF0aC5sZW5ndGgpLHJ9ZnVuY3Rpb24gc2EoZSl7c3dpdGNoKGUua2luZCl7Y2FzZVwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIjpjYXNlXCJWYWx1ZVRvb0xhcmdlXCI6cmV0dXJuIDIwO2Nhc2VcIkludmFsaWRBcmd1bWVudFR5cGVcIjpyZXR1cm4gMTA7Y2FzZVwiUmVxdWlyZWRBcmd1bWVudE1pc3NpbmdcIjpyZXR1cm4tMTA7ZGVmYXVsdDpyZXR1cm4gMH19dmFyIHVlPWNsYXNze2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5uYW1lPXI7dGhpcy52YWx1ZT10fWlzUmVxdWlyZWQ9ITE7bWFrZVJlcXVpcmVkKCl7cmV0dXJuIHRoaXMuaXNSZXF1aXJlZD0hMCx0aGlzfXdyaXRlKHIpe2xldHtjb2xvcnM6e2dyZWVuOnR9fT1yLmNvbnRleHQ7ci5hZGRNYXJnaW5TeW1ib2wodCh0aGlzLmlzUmVxdWlyZWQ/XCIrXCI6XCI/XCIpKSxyLndyaXRlKHQodGhpcy5uYW1lKSksdGhpcy5pc1JlcXVpcmVkfHxyLndyaXRlKHQoXCI/XCIpKSxyLndyaXRlKHQoXCI6IFwiKSksdHlwZW9mIHRoaXMudmFsdWU9PVwic3RyaW5nXCI/ci53cml0ZSh0KHRoaXMudmFsdWUpKTpyLndyaXRlKHRoaXMudmFsdWUpfX07Y2EoKTt2YXIgQXI9Y2xhc3N7Y29uc3RydWN0b3Iocj0wLHQpe3RoaXMuY29udGV4dD10O3RoaXMuY3VycmVudEluZGVudD1yfWxpbmVzPVtdO2N1cnJlbnRMaW5lPVwiXCI7Y3VycmVudEluZGVudD0wO21hcmdpblN5bWJvbDthZnRlck5leHROZXdMaW5lQ2FsbGJhY2s7d3JpdGUocil7cmV0dXJuIHR5cGVvZiByPT1cInN0cmluZ1wiP3RoaXMuY3VycmVudExpbmUrPXI6ci53cml0ZSh0aGlzKSx0aGlzfXdyaXRlSm9pbmVkKHIsdCxuPShpLG8pPT5vLndyaXRlKGkpKXtsZXQgaT10Lmxlbmd0aC0xO2ZvcihsZXQgbz0wO288dC5sZW5ndGg7bysrKW4odFtvXSx0aGlzKSxvIT09aSYmdGhpcy53cml0ZShyKTtyZXR1cm4gdGhpc313cml0ZUxpbmUocil7cmV0dXJuIHRoaXMud3JpdGUocikubmV3TGluZSgpfW5ld0xpbmUoKXt0aGlzLmxpbmVzLnB1c2godGhpcy5pbmRlbnRlZEN1cnJlbnRMaW5lKCkpLHRoaXMuY3VycmVudExpbmU9XCJcIix0aGlzLm1hcmdpblN5bWJvbD12b2lkIDA7bGV0IHI9dGhpcy5hZnRlck5leHROZXdMaW5lQ2FsbGJhY2s7cmV0dXJuIHRoaXMuYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrPXZvaWQgMCxyPy4oKSx0aGlzfXdpdGhJbmRlbnQocil7cmV0dXJuIHRoaXMuaW5kZW50KCkscih0aGlzKSx0aGlzLnVuaW5kZW50KCksdGhpc31hZnRlck5leHROZXdsaW5lKHIpe3JldHVybiB0aGlzLmFmdGVyTmV4dE5ld0xpbmVDYWxsYmFjaz1yLHRoaXN9aW5kZW50KCl7cmV0dXJuIHRoaXMuY3VycmVudEluZGVudCsrLHRoaXN9dW5pbmRlbnQoKXtyZXR1cm4gdGhpcy5jdXJyZW50SW5kZW50PjAmJnRoaXMuY3VycmVudEluZGVudC0tLHRoaXN9YWRkTWFyZ2luU3ltYm9sKHIpe3JldHVybiB0aGlzLm1hcmdpblN5bWJvbD1yLHRoaXN9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5saW5lcy5jb25jYXQodGhpcy5pbmRlbnRlZEN1cnJlbnRMaW5lKCkpLmpvaW4oYFxuYCl9Z2V0Q3VycmVudExpbmVMZW5ndGgoKXtyZXR1cm4gdGhpcy5jdXJyZW50TGluZS5sZW5ndGh9aW5kZW50ZWRDdXJyZW50TGluZSgpe2xldCByPXRoaXMuY3VycmVudExpbmUucGFkU3RhcnQodGhpcy5jdXJyZW50TGluZS5sZW5ndGgrMip0aGlzLmN1cnJlbnRJbmRlbnQpO3JldHVybiB0aGlzLm1hcmdpblN5bWJvbD90aGlzLm1hcmdpblN5bWJvbCtyLnNsaWNlKDEpOnJ9fTt1YSgpO3ZhciB3bj1jbGFzc3tjb25zdHJ1Y3RvcihyKXt0aGlzLnZhbHVlPXJ9d3JpdGUocil7ci53cml0ZSh0aGlzLnZhbHVlKX1tYXJrQXNFcnJvcigpe3RoaXMudmFsdWUubWFya0FzRXJyb3IoKX19O3ZhciB4bj1lPT5lLHZuPXtib2xkOnhuLHJlZDp4bixncmVlbjp4bixkaW06eG4sZW5hYmxlZDohMX0scGE9e2JvbGQ6VyxyZWQ6Y2UsZ3JlZW46cWUsZGltOkllLGVuYWJsZWQ6ITB9LElyPXt3cml0ZShlKXtlLndyaXRlTGluZShcIixcIil9fTt2YXIgVGU9Y2xhc3N7Y29uc3RydWN0b3Iocil7dGhpcy5jb250ZW50cz1yfWlzVW5kZXJsaW5lZD0hMTtjb2xvcj1yPT5yO3VuZGVybGluZSgpe3JldHVybiB0aGlzLmlzVW5kZXJsaW5lZD0hMCx0aGlzfXNldENvbG9yKHIpe3JldHVybiB0aGlzLmNvbG9yPXIsdGhpc313cml0ZShyKXtsZXQgdD1yLmdldEN1cnJlbnRMaW5lTGVuZ3RoKCk7ci53cml0ZSh0aGlzLmNvbG9yKHRoaXMuY29udGVudHMpKSx0aGlzLmlzVW5kZXJsaW5lZCYmci5hZnRlck5leHROZXdsaW5lKCgpPT57ci53cml0ZShcIiBcIi5yZXBlYXQodCkpLndyaXRlTGluZSh0aGlzLmNvbG9yKFwiflwiLnJlcGVhdCh0aGlzLmNvbnRlbnRzLmxlbmd0aCkpKX0pfX07dmFyIHplPWNsYXNze2hhc0Vycm9yPSExO21hcmtBc0Vycm9yKCl7cmV0dXJuIHRoaXMuaGFzRXJyb3I9ITAsdGhpc319O3ZhciBrcj1jbGFzcyBleHRlbmRzIHple2l0ZW1zPVtdO2FkZEl0ZW0ocil7cmV0dXJuIHRoaXMuaXRlbXMucHVzaChuZXcgd24ocikpLHRoaXN9Z2V0RmllbGQocil7cmV0dXJuIHRoaXMuaXRlbXNbcl19Z2V0UHJpbnRXaWR0aCgpe3JldHVybiB0aGlzLml0ZW1zLmxlbmd0aD09PTA/MjpNYXRoLm1heCguLi50aGlzLml0ZW1zLm1hcCh0PT50LnZhbHVlLmdldFByaW50V2lkdGgoKSkpKzJ9d3JpdGUocil7aWYodGhpcy5pdGVtcy5sZW5ndGg9PT0wKXt0aGlzLndyaXRlRW1wdHkocik7cmV0dXJufXRoaXMud3JpdGVXaXRoSXRlbXMocil9d3JpdGVFbXB0eShyKXtsZXQgdD1uZXcgVGUoXCJbXVwiKTt0aGlzLmhhc0Vycm9yJiZ0LnNldENvbG9yKHIuY29udGV4dC5jb2xvcnMucmVkKS51bmRlcmxpbmUoKSxyLndyaXRlKHQpfXdyaXRlV2l0aEl0ZW1zKHIpe2xldHtjb2xvcnM6dH09ci5jb250ZXh0O3Iud3JpdGVMaW5lKFwiW1wiKS53aXRoSW5kZW50KCgpPT5yLndyaXRlSm9pbmVkKElyLHRoaXMuaXRlbXMpLm5ld0xpbmUoKSkud3JpdGUoXCJdXCIpLHRoaXMuaGFzRXJyb3ImJnIuYWZ0ZXJOZXh0TmV3bGluZSgoKT0+e3Iud3JpdGVMaW5lKHQucmVkKFwiflwiLnJlcGVhdCh0aGlzLmdldFByaW50V2lkdGgoKSkpKX0pfWFzT2JqZWN0KCl7fX07dmFyIE9yPWNsYXNzIGUgZXh0ZW5kcyB6ZXtmaWVsZHM9e307c3VnZ2VzdGlvbnM9W107YWRkRmllbGQocil7dGhpcy5maWVsZHNbci5uYW1lXT1yfWFkZFN1Z2dlc3Rpb24ocil7dGhpcy5zdWdnZXN0aW9ucy5wdXNoKHIpfWdldEZpZWxkKHIpe3JldHVybiB0aGlzLmZpZWxkc1tyXX1nZXREZWVwRmllbGQocil7bGV0W3QsLi4ubl09cixpPXRoaXMuZ2V0RmllbGQodCk7aWYoIWkpcmV0dXJuO2xldCBvPWk7Zm9yKGxldCBzIG9mIG4pe2xldCBhO2lmKG8udmFsdWUgaW5zdGFuY2VvZiBlP2E9by52YWx1ZS5nZXRGaWVsZChzKTpvLnZhbHVlIGluc3RhbmNlb2Yga3ImJihhPW8udmFsdWUuZ2V0RmllbGQoTnVtYmVyKHMpKSksIWEpcmV0dXJuO289YX1yZXR1cm4gb31nZXREZWVwRmllbGRWYWx1ZShyKXtyZXR1cm4gci5sZW5ndGg9PT0wP3RoaXM6dGhpcy5nZXREZWVwRmllbGQocik/LnZhbHVlfWhhc0ZpZWxkKHIpe3JldHVybiEhdGhpcy5nZXRGaWVsZChyKX1yZW1vdmVBbGxGaWVsZHMoKXt0aGlzLmZpZWxkcz17fX1yZW1vdmVGaWVsZChyKXtkZWxldGUgdGhpcy5maWVsZHNbcl19Z2V0RmllbGRzKCl7cmV0dXJuIHRoaXMuZmllbGRzfWlzRW1wdHkoKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5maWVsZHMpLmxlbmd0aD09PTB9Z2V0RmllbGRWYWx1ZShyKXtyZXR1cm4gdGhpcy5nZXRGaWVsZChyKT8udmFsdWV9Z2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKHIpe2xldCB0PXRoaXM7Zm9yKGxldCBuIG9mIHIpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXJldHVybjtsZXQgaT10LmdldFN1YlNlbGVjdGlvblZhbHVlKG4pO2lmKCFpKXJldHVybjt0PWl9cmV0dXJuIHR9Z2V0RGVlcFNlbGVjdGlvblBhcmVudChyKXtsZXQgdD10aGlzLmdldFNlbGVjdGlvblBhcmVudCgpO2lmKCF0KXJldHVybjtsZXQgbj10O2ZvcihsZXQgaSBvZiByKXtsZXQgbz1uLnZhbHVlLmdldEZpZWxkVmFsdWUoaSk7aWYoIW98fCEobyBpbnN0YW5jZW9mIGUpKXJldHVybjtsZXQgcz1vLmdldFNlbGVjdGlvblBhcmVudCgpO2lmKCFzKXJldHVybjtuPXN9cmV0dXJuIG59Z2V0U2VsZWN0aW9uUGFyZW50KCl7bGV0IHI9dGhpcy5nZXRGaWVsZChcInNlbGVjdFwiKT8udmFsdWUuYXNPYmplY3QoKTtpZihyKXJldHVybntraW5kOlwic2VsZWN0XCIsdmFsdWU6cn07bGV0IHQ9dGhpcy5nZXRGaWVsZChcImluY2x1ZGVcIik/LnZhbHVlLmFzT2JqZWN0KCk7aWYodClyZXR1cm57a2luZDpcImluY2x1ZGVcIix2YWx1ZTp0fX1nZXRTdWJTZWxlY3Rpb25WYWx1ZShyKXtyZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25QYXJlbnQoKT8udmFsdWUuZmllbGRzW3JdLnZhbHVlfWdldFByaW50V2lkdGgoKXtsZXQgcj1PYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKTtyZXR1cm4gci5sZW5ndGg9PTA/MjpNYXRoLm1heCguLi5yLm1hcChuPT5uLmdldFByaW50V2lkdGgoKSkpKzJ9d3JpdGUocil7bGV0IHQ9T2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkcyk7aWYodC5sZW5ndGg9PT0wJiZ0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aD09PTApe3RoaXMud3JpdGVFbXB0eShyKTtyZXR1cm59dGhpcy53cml0ZVdpdGhDb250ZW50cyhyLHQpfWFzT2JqZWN0KCl7cmV0dXJuIHRoaXN9d3JpdGVFbXB0eShyKXtsZXQgdD1uZXcgVGUoXCJ7fVwiKTt0aGlzLmhhc0Vycm9yJiZ0LnNldENvbG9yKHIuY29udGV4dC5jb2xvcnMucmVkKS51bmRlcmxpbmUoKSxyLndyaXRlKHQpfXdyaXRlV2l0aENvbnRlbnRzKHIsdCl7ci53cml0ZUxpbmUoXCJ7XCIpLndpdGhJbmRlbnQoKCk9PntyLndyaXRlSm9pbmVkKElyLFsuLi50LC4uLnRoaXMuc3VnZ2VzdGlvbnNdKS5uZXdMaW5lKCl9KSxyLndyaXRlKFwifVwiKSx0aGlzLmhhc0Vycm9yJiZyLmFmdGVyTmV4dE5ld2xpbmUoKCk9PntyLndyaXRlTGluZShyLmNvbnRleHQuY29sb3JzLnJlZChcIn5cIi5yZXBlYXQodGhpcy5nZXRQcmludFdpZHRoKCkpKSl9KX19O3ZhciBRPWNsYXNzIGV4dGVuZHMgemV7Y29uc3RydWN0b3IodCl7c3VwZXIoKTt0aGlzLnRleHQ9dH1nZXRQcmludFdpZHRoKCl7cmV0dXJuIHRoaXMudGV4dC5sZW5ndGh9d3JpdGUodCl7bGV0IG49bmV3IFRlKHRoaXMudGV4dCk7dGhpcy5oYXNFcnJvciYmbi51bmRlcmxpbmUoKS5zZXRDb2xvcih0LmNvbnRleHQuY29sb3JzLnJlZCksdC53cml0ZShuKX1hc09iamVjdCgpe319O3ZhciB1dD1jbGFzc3tmaWVsZHM9W107YWRkRmllbGQocix0KXtyZXR1cm4gdGhpcy5maWVsZHMucHVzaCh7d3JpdGUobil7bGV0e2dyZWVuOmksZGltOm99PW4uY29udGV4dC5jb2xvcnM7bi53cml0ZShpKG8oYCR7cn06ICR7dH1gKSkpLmFkZE1hcmdpblN5bWJvbChpKG8oXCIrXCIpKSl9fSksdGhpc313cml0ZShyKXtsZXR7Y29sb3JzOntncmVlbjp0fX09ci5jb250ZXh0O3Iud3JpdGVMaW5lKHQoXCJ7XCIpKS53aXRoSW5kZW50KCgpPT57ci53cml0ZUpvaW5lZChJcix0aGlzLmZpZWxkcykubmV3TGluZSgpfSkud3JpdGUodChcIn1cIikpLmFkZE1hcmdpblN5bWJvbCh0KFwiK1wiKSl9fTtmdW5jdGlvbiBFbihlLHIsdCl7c3dpdGNoKGUua2luZCl7Y2FzZVwiTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNcIjpBZChlLHIpO2JyZWFrO2Nhc2VcIkluY2x1ZGVPblNjYWxhclwiOklkKGUscik7YnJlYWs7Y2FzZVwiRW1wdHlTZWxlY3Rpb25cIjprZChlLHIsdCk7YnJlYWs7Y2FzZVwiVW5rbm93blNlbGVjdGlvbkZpZWxkXCI6TmQoZSxyKTticmVhaztjYXNlXCJJbnZhbGlkU2VsZWN0aW9uVmFsdWVcIjpMZChlLHIpO2JyZWFrO2Nhc2VcIlVua25vd25Bcmd1bWVudFwiOkZkKGUscik7YnJlYWs7Y2FzZVwiVW5rbm93bklucHV0RmllbGRcIjpNZChlLHIpO2JyZWFrO2Nhc2VcIlJlcXVpcmVkQXJndW1lbnRNaXNzaW5nXCI6JGQoZSxyKTticmVhaztjYXNlXCJJbnZhbGlkQXJndW1lbnRUeXBlXCI6cWQoZSxyKTticmVhaztjYXNlXCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiOmpkKGUscik7YnJlYWs7Y2FzZVwiVmFsdWVUb29MYXJnZVwiOlZkKGUscik7YnJlYWs7Y2FzZVwiU29tZUZpZWxkc01pc3NpbmdcIjpCZChlLHIpO2JyZWFrO2Nhc2VcIlRvb01hbnlGaWVsZHNHaXZlblwiOlVkKGUscik7YnJlYWs7Y2FzZVwiVW5pb25cIjphYShlLHIsdCk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWQ6IFwiK2Uua2luZCl9fWZ1bmN0aW9uIEFkKGUscil7bGV0IHQ9ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7dCYmKHQuZ2V0RmllbGQoZS5maXJzdEZpZWxkKT8ubWFya0FzRXJyb3IoKSx0LmdldEZpZWxkKGUuc2Vjb25kRmllbGQpPy5tYXJrQXNFcnJvcigpKSxyLmFkZEVycm9yTWVzc2FnZShuPT5gUGxlYXNlICR7bi5ib2xkKFwiZWl0aGVyXCIpfSB1c2UgJHtuLmdyZWVuKGBcXGAke2UuZmlyc3RGaWVsZH1cXGBgKX0gb3IgJHtuLmdyZWVuKGBcXGAke2Uuc2Vjb25kRmllbGR9XFxgYCl9LCBidXQgJHtuLnJlZChcIm5vdCBib3RoXCIpfSBhdCB0aGUgc2FtZSB0aW1lLmApfWZ1bmN0aW9uIElkKGUscil7bGV0W3Qsbl09Y3QoZS5zZWxlY3Rpb25QYXRoKSxpPWUub3V0cHV0VHlwZSxvPXIuYXJndW1lbnRzLmdldERlZXBTZWxlY3Rpb25QYXJlbnQodCk/LnZhbHVlO2lmKG8mJihvLmdldEZpZWxkKG4pPy5tYXJrQXNFcnJvcigpLGkpKWZvcihsZXQgcyBvZiBpLmZpZWxkcylzLmlzUmVsYXRpb24mJm8uYWRkU3VnZ2VzdGlvbihuZXcgdWUocy5uYW1lLFwidHJ1ZVwiKSk7ci5hZGRFcnJvck1lc3NhZ2Uocz0+e2xldCBhPWBJbnZhbGlkIHNjYWxhciBmaWVsZCAke3MucmVkKGBcXGAke259XFxgYCl9IGZvciAke3MuYm9sZChcImluY2x1ZGVcIil9IHN0YXRlbWVudGA7cmV0dXJuIGk/YSs9YCBvbiBtb2RlbCAke3MuYm9sZChpLm5hbWUpfS4gJHtwdChzKX1gOmErPVwiLlwiLGErPWBcbk5vdGUgdGhhdCAke3MuYm9sZChcImluY2x1ZGVcIil9IHN0YXRlbWVudHMgb25seSBhY2NlcHQgcmVsYXRpb24gZmllbGRzLmAsYX0pfWZ1bmN0aW9uIGtkKGUscix0KXtsZXQgbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtpZihuKXtsZXQgaT1uLmdldEZpZWxkKFwib21pdFwiKT8udmFsdWUuYXNPYmplY3QoKTtpZihpKXtPZChlLHIsaSk7cmV0dXJufWlmKG4uaGFzRmllbGQoXCJzZWxlY3RcIikpe0RkKGUscik7cmV0dXJufX1pZih0Py5bWWUoZS5vdXRwdXRUeXBlLm5hbWUpXSl7X2QoZSxyKTtyZXR1cm59ci5hZGRFcnJvck1lc3NhZ2UoKCk9PmBVbmtub3duIGZpZWxkIGF0IFwiJHtlLnNlbGVjdGlvblBhdGguam9pbihcIi5cIil9IHNlbGVjdGlvblwiYCl9ZnVuY3Rpb24gT2QoZSxyLHQpe3QucmVtb3ZlQWxsRmllbGRzKCk7Zm9yKGxldCBuIG9mIGUub3V0cHV0VHlwZS5maWVsZHMpdC5hZGRTdWdnZXN0aW9uKG5ldyB1ZShuLm5hbWUsXCJmYWxzZVwiKSk7ci5hZGRFcnJvck1lc3NhZ2Uobj0+YFRoZSAke24ucmVkKFwib21pdFwiKX0gc3RhdGVtZW50IGluY2x1ZGVzIGV2ZXJ5IGZpZWxkIG9mIHRoZSBtb2RlbCAke24uYm9sZChlLm91dHB1dFR5cGUubmFtZSl9LiBBdCBsZWFzdCBvbmUgZmllbGQgbXVzdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0YCl9ZnVuY3Rpb24gRGQoZSxyKXtsZXQgdD1lLm91dHB1dFR5cGUsbj1yLmFyZ3VtZW50cy5nZXREZWVwU2VsZWN0aW9uUGFyZW50KGUuc2VsZWN0aW9uUGF0aCk/LnZhbHVlLGk9bj8uaXNFbXB0eSgpPz8hMTtuJiYobi5yZW1vdmVBbGxGaWVsZHMoKSxnYShuLHQpKSxyLmFkZEVycm9yTWVzc2FnZShvPT5pP2BUaGUgJHtvLnJlZChcImBzZWxlY3RgXCIpfSBzdGF0ZW1lbnQgZm9yIHR5cGUgJHtvLmJvbGQodC5uYW1lKX0gbXVzdCBub3QgYmUgZW1wdHkuICR7cHQobyl9YDpgVGhlICR7by5yZWQoXCJgc2VsZWN0YFwiKX0gc3RhdGVtZW50IGZvciB0eXBlICR7by5ib2xkKHQubmFtZSl9IG5lZWRzICR7by5ib2xkKFwiYXQgbGVhc3Qgb25lIHRydXRoeSB2YWx1ZVwiKX0uYCl9ZnVuY3Rpb24gX2QoZSxyKXtsZXQgdD1uZXcgdXQ7Zm9yKGxldCBpIG9mIGUub3V0cHV0VHlwZS5maWVsZHMpaS5pc1JlbGF0aW9ufHx0LmFkZEZpZWxkKGkubmFtZSxcImZhbHNlXCIpO2xldCBuPW5ldyB1ZShcIm9taXRcIix0KS5tYWtlUmVxdWlyZWQoKTtpZihlLnNlbGVjdGlvblBhdGgubGVuZ3RoPT09MClyLmFyZ3VtZW50cy5hZGRTdWdnZXN0aW9uKG4pO2Vsc2V7bGV0W2ksb109Y3QoZS5zZWxlY3Rpb25QYXRoKSxhPXIuYXJndW1lbnRzLmdldERlZXBTZWxlY3Rpb25QYXJlbnQoaSk/LnZhbHVlLmFzT2JqZWN0KCk/LmdldEZpZWxkKG8pO2lmKGEpe2xldCBsPWE/LnZhbHVlLmFzT2JqZWN0KCk/P25ldyBPcjtsLmFkZFN1Z2dlc3Rpb24obiksYS52YWx1ZT1sfX1yLmFkZEVycm9yTWVzc2FnZShpPT5gVGhlIGdsb2JhbCAke2kucmVkKFwib21pdFwiKX0gY29uZmlndXJhdGlvbiBleGNsdWRlcyBldmVyeSBmaWVsZCBvZiB0aGUgbW9kZWwgJHtpLmJvbGQoZS5vdXRwdXRUeXBlLm5hbWUpfS4gQXQgbGVhc3Qgb25lIGZpZWxkIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGApfWZ1bmN0aW9uIE5kKGUscil7bGV0IHQ9aGEoZS5zZWxlY3Rpb25QYXRoLHIpO2lmKHQucGFyZW50S2luZCE9PVwidW5rbm93blwiKXt0LmZpZWxkLm1hcmtBc0Vycm9yKCk7bGV0IG49dC5wYXJlbnQ7c3dpdGNoKHQucGFyZW50S2luZCl7Y2FzZVwic2VsZWN0XCI6Z2EobixlLm91dHB1dFR5cGUpO2JyZWFrO2Nhc2VcImluY2x1ZGVcIjpHZChuLGUub3V0cHV0VHlwZSk7YnJlYWs7Y2FzZVwib21pdFwiOlFkKG4sZS5vdXRwdXRUeXBlKTticmVha319ci5hZGRFcnJvck1lc3NhZ2Uobj0+e2xldCBpPVtgVW5rbm93biBmaWVsZCAke24ucmVkKGBcXGAke3QuZmllbGROYW1lfVxcYGApfWBdO3JldHVybiB0LnBhcmVudEtpbmQhPT1cInVua25vd25cIiYmaS5wdXNoKGBmb3IgJHtuLmJvbGQodC5wYXJlbnRLaW5kKX0gc3RhdGVtZW50YCksaS5wdXNoKGBvbiBtb2RlbCAke24uYm9sZChgXFxgJHtlLm91dHB1dFR5cGUubmFtZX1cXGBgKX0uYCksaS5wdXNoKHB0KG4pKSxpLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gTGQoZSxyKXtsZXQgdD1oYShlLnNlbGVjdGlvblBhdGgscik7dC5wYXJlbnRLaW5kIT09XCJ1bmtub3duXCImJnQuZmllbGQudmFsdWUubWFya0FzRXJyb3IoKSxyLmFkZEVycm9yTWVzc2FnZShuPT5gSW52YWxpZCB2YWx1ZSBmb3Igc2VsZWN0aW9uIGZpZWxkIFxcYCR7bi5yZWQodC5maWVsZE5hbWUpfVxcYDogJHtlLnVuZGVybHlpbmdFcnJvcn1gKX1mdW5jdGlvbiBGZChlLHIpe2xldCB0PWUuYXJndW1lbnRQYXRoWzBdLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7biYmKG4uZ2V0RmllbGQodCk/Lm1hcmtBc0Vycm9yKCksV2QobixlLmFyZ3VtZW50cykpLHIuYWRkRXJyb3JNZXNzYWdlKGk9Pm1hKGksdCxlLmFyZ3VtZW50cy5tYXAobz0+by5uYW1lKSkpfWZ1bmN0aW9uIE1kKGUscil7bGV0W3Qsbl09Y3QoZS5hcmd1bWVudFBhdGgpLGk9ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7aWYoaSl7aS5nZXREZWVwRmllbGQoZS5hcmd1bWVudFBhdGgpPy5tYXJrQXNFcnJvcigpO2xldCBvPWkuZ2V0RGVlcEZpZWxkVmFsdWUodCk/LmFzT2JqZWN0KCk7byYmeWEobyxlLmlucHV0VHlwZSl9ci5hZGRFcnJvck1lc3NhZ2Uobz0+bWEobyxuLGUuaW5wdXRUeXBlLmZpZWxkcy5tYXAocz0+cy5uYW1lKSkpfWZ1bmN0aW9uIG1hKGUscix0KXtsZXQgbj1bYFVua25vd24gYXJndW1lbnQgXFxgJHtlLnJlZChyKX1cXGAuYF0saT1IZChyLHQpO3JldHVybiBpJiZuLnB1c2goYERpZCB5b3UgbWVhbiBcXGAke2UuZ3JlZW4oaSl9XFxgP2ApLHQubGVuZ3RoPjAmJm4ucHVzaChwdChlKSksbi5qb2luKFwiIFwiKX1mdW5jdGlvbiAkZChlLHIpe2xldCB0O3IuYWRkRXJyb3JNZXNzYWdlKGw9PnQ/LnZhbHVlIGluc3RhbmNlb2YgUSYmdC52YWx1ZS50ZXh0PT09XCJudWxsXCI/YEFyZ3VtZW50IFxcYCR7bC5ncmVlbihvKX1cXGAgbXVzdCBub3QgYmUgJHtsLnJlZChcIm51bGxcIil9LmA6YEFyZ3VtZW50IFxcYCR7bC5ncmVlbihvKX1cXGAgaXMgbWlzc2luZy5gKTtsZXQgbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtpZighbilyZXR1cm47bGV0W2ksb109Y3QoZS5hcmd1bWVudFBhdGgpLHM9bmV3IHV0LGE9bi5nZXREZWVwRmllbGRWYWx1ZShpKT8uYXNPYmplY3QoKTtpZihhKWlmKHQ9YS5nZXRGaWVsZChvKSx0JiZhLnJlbW92ZUZpZWxkKG8pLGUuaW5wdXRUeXBlcy5sZW5ndGg9PT0xJiZlLmlucHV0VHlwZXNbMF0ua2luZD09PVwib2JqZWN0XCIpe2ZvcihsZXQgbCBvZiBlLmlucHV0VHlwZXNbMF0uZmllbGRzKXMuYWRkRmllbGQobC5uYW1lLGwudHlwZU5hbWVzLmpvaW4oXCIgfCBcIikpO2EuYWRkU3VnZ2VzdGlvbihuZXcgdWUobyxzKS5tYWtlUmVxdWlyZWQoKSl9ZWxzZXtsZXQgbD1lLmlucHV0VHlwZXMubWFwKGZhKS5qb2luKFwiIHwgXCIpO2EuYWRkU3VnZ2VzdGlvbihuZXcgdWUobyxsKS5tYWtlUmVxdWlyZWQoKSl9fWZ1bmN0aW9uIGZhKGUpe3JldHVybiBlLmtpbmQ9PT1cImxpc3RcIj9gJHtmYShlLmVsZW1lbnRUeXBlKX1bXWA6ZS5uYW1lfWZ1bmN0aW9uIHFkKGUscil7bGV0IHQ9ZS5hcmd1bWVudC5uYW1lLG49ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKGUuc2VsZWN0aW9uUGF0aCk/LmFzT2JqZWN0KCk7biYmbi5nZXREZWVwRmllbGRWYWx1ZShlLmFyZ3VtZW50UGF0aCk/Lm1hcmtBc0Vycm9yKCksci5hZGRFcnJvck1lc3NhZ2UoaT0+e2xldCBvPVBuKFwib3JcIixlLmFyZ3VtZW50LnR5cGVOYW1lcy5tYXAocz0+aS5ncmVlbihzKSkpO3JldHVybmBBcmd1bWVudCBcXGAke2kuYm9sZCh0KX1cXGA6IEludmFsaWQgdmFsdWUgcHJvdmlkZWQuIEV4cGVjdGVkICR7b30sIHByb3ZpZGVkICR7aS5yZWQoZS5pbmZlcnJlZFR5cGUpfS5gfSl9ZnVuY3Rpb24gamQoZSxyKXtsZXQgdD1lLmFyZ3VtZW50Lm5hbWUsbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKTtuJiZuLmdldERlZXBGaWVsZFZhbHVlKGUuYXJndW1lbnRQYXRoKT8ubWFya0FzRXJyb3IoKSxyLmFkZEVycm9yTWVzc2FnZShpPT57bGV0IG89W2BJbnZhbGlkIHZhbHVlIGZvciBhcmd1bWVudCBcXGAke2kuYm9sZCh0KX1cXGBgXTtpZihlLnVuZGVybHlpbmdFcnJvciYmby5wdXNoKGA6ICR7ZS51bmRlcmx5aW5nRXJyb3J9YCksby5wdXNoKFwiLlwiKSxlLmFyZ3VtZW50LnR5cGVOYW1lcy5sZW5ndGg+MCl7bGV0IHM9UG4oXCJvclwiLGUuYXJndW1lbnQudHlwZU5hbWVzLm1hcChhPT5pLmdyZWVuKGEpKSk7by5wdXNoKGAgRXhwZWN0ZWQgJHtzfS5gKX1yZXR1cm4gby5qb2luKFwiXCIpfSl9ZnVuY3Rpb24gVmQoZSxyKXtsZXQgdD1lLmFyZ3VtZW50Lm5hbWUsbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKSxpO2lmKG4pe2xldCBzPW4uZ2V0RGVlcEZpZWxkKGUuYXJndW1lbnRQYXRoKT8udmFsdWU7cz8ubWFya0FzRXJyb3IoKSxzIGluc3RhbmNlb2YgUSYmKGk9cy50ZXh0KX1yLmFkZEVycm9yTWVzc2FnZShvPT57bGV0IHM9W1wiVW5hYmxlIHRvIGZpdCB2YWx1ZVwiXTtyZXR1cm4gaSYmcy5wdXNoKG8ucmVkKGkpKSxzLnB1c2goYGludG8gYSA2NC1iaXQgc2lnbmVkIGludGVnZXIgZm9yIGZpZWxkIFxcYCR7by5ib2xkKHQpfVxcYGApLHMuam9pbihcIiBcIil9KX1mdW5jdGlvbiBCZChlLHIpe2xldCB0PWUuYXJndW1lbnRQYXRoW2UuYXJndW1lbnRQYXRoLmxlbmd0aC0xXSxuPXIuYXJndW1lbnRzLmdldERlZXBTdWJTZWxlY3Rpb25WYWx1ZShlLnNlbGVjdGlvblBhdGgpPy5hc09iamVjdCgpO2lmKG4pe2xldCBpPW4uZ2V0RGVlcEZpZWxkVmFsdWUoZS5hcmd1bWVudFBhdGgpPy5hc09iamVjdCgpO2kmJnlhKGksZS5pbnB1dFR5cGUpfXIuYWRkRXJyb3JNZXNzYWdlKGk9PntsZXQgbz1bYEFyZ3VtZW50IFxcYCR7aS5ib2xkKHQpfVxcYCBvZiB0eXBlICR7aS5ib2xkKGUuaW5wdXRUeXBlLm5hbWUpfSBuZWVkc2BdO3JldHVybiBlLmNvbnN0cmFpbnRzLm1pbkZpZWxkQ291bnQ9PT0xP2UuY29uc3RyYWludHMucmVxdWlyZWRGaWVsZHM/by5wdXNoKGAke2kuZ3JlZW4oXCJhdCBsZWFzdCBvbmUgb2ZcIil9ICR7UG4oXCJvclwiLGUuY29uc3RyYWludHMucmVxdWlyZWRGaWVsZHMubWFwKHM9PmBcXGAke2kuYm9sZChzKX1cXGBgKSl9IGFyZ3VtZW50cy5gKTpvLnB1c2goYCR7aS5ncmVlbihcImF0IGxlYXN0IG9uZVwiKX0gYXJndW1lbnQuYCk6by5wdXNoKGAke2kuZ3JlZW4oYGF0IGxlYXN0ICR7ZS5jb25zdHJhaW50cy5taW5GaWVsZENvdW50fWApfSBhcmd1bWVudHMuYCksby5wdXNoKHB0KGkpKSxvLmpvaW4oXCIgXCIpfSl9ZnVuY3Rpb24gVWQoZSxyKXtsZXQgdD1lLmFyZ3VtZW50UGF0aFtlLmFyZ3VtZW50UGF0aC5sZW5ndGgtMV0sbj1yLmFyZ3VtZW50cy5nZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUoZS5zZWxlY3Rpb25QYXRoKT8uYXNPYmplY3QoKSxpPVtdO2lmKG4pe2xldCBvPW4uZ2V0RGVlcEZpZWxkVmFsdWUoZS5hcmd1bWVudFBhdGgpPy5hc09iamVjdCgpO28mJihvLm1hcmtBc0Vycm9yKCksaT1PYmplY3Qua2V5cyhvLmdldEZpZWxkcygpKSl9ci5hZGRFcnJvck1lc3NhZ2Uobz0+e2xldCBzPVtgQXJndW1lbnQgXFxgJHtvLmJvbGQodCl9XFxgIG9mIHR5cGUgJHtvLmJvbGQoZS5pbnB1dFR5cGUubmFtZSl9IG5lZWRzYF07cmV0dXJuIGUuY29uc3RyYWludHMubWluRmllbGRDb3VudD09PTEmJmUuY29uc3RyYWludHMubWF4RmllbGRDb3VudD09MT9zLnB1c2goYCR7by5ncmVlbihcImV4YWN0bHkgb25lXCIpfSBhcmd1bWVudCxgKTplLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnQ9PTE/cy5wdXNoKGAke28uZ3JlZW4oXCJhdCBtb3N0IG9uZVwiKX0gYXJndW1lbnQsYCk6cy5wdXNoKGAke28uZ3JlZW4oYGF0IG1vc3QgJHtlLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnR9YCl9IGFyZ3VtZW50cyxgKSxzLnB1c2goYGJ1dCB5b3UgcHJvdmlkZWQgJHtQbihcImFuZFwiLGkubWFwKGE9Pm8ucmVkKGEpKSl9LiBQbGVhc2UgY2hvb3NlYCksZS5jb25zdHJhaW50cy5tYXhGaWVsZENvdW50PT09MT9zLnB1c2goXCJvbmUuXCIpOnMucHVzaChgJHtlLmNvbnN0cmFpbnRzLm1heEZpZWxkQ291bnR9LmApLHMuam9pbihcIiBcIil9KX1mdW5jdGlvbiBnYShlLHIpe2ZvcihsZXQgdCBvZiByLmZpZWxkcyllLmhhc0ZpZWxkKHQubmFtZSl8fGUuYWRkU3VnZ2VzdGlvbihuZXcgdWUodC5uYW1lLFwidHJ1ZVwiKSl9ZnVuY3Rpb24gR2QoZSxyKXtmb3IobGV0IHQgb2Ygci5maWVsZHMpdC5pc1JlbGF0aW9uJiYhZS5oYXNGaWVsZCh0Lm5hbWUpJiZlLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHQubmFtZSxcInRydWVcIikpfWZ1bmN0aW9uIFFkKGUscil7Zm9yKGxldCB0IG9mIHIuZmllbGRzKSFlLmhhc0ZpZWxkKHQubmFtZSkmJiF0LmlzUmVsYXRpb24mJmUuYWRkU3VnZ2VzdGlvbihuZXcgdWUodC5uYW1lLFwidHJ1ZVwiKSl9ZnVuY3Rpb24gV2QoZSxyKXtmb3IobGV0IHQgb2YgcillLmhhc0ZpZWxkKHQubmFtZSl8fGUuYWRkU3VnZ2VzdGlvbihuZXcgdWUodC5uYW1lLHQudHlwZU5hbWVzLmpvaW4oXCIgfCBcIikpKX1mdW5jdGlvbiBoYShlLHIpe2xldFt0LG5dPWN0KGUpLGk9ci5hcmd1bWVudHMuZ2V0RGVlcFN1YlNlbGVjdGlvblZhbHVlKHQpPy5hc09iamVjdCgpO2lmKCFpKXJldHVybntwYXJlbnRLaW5kOlwidW5rbm93blwiLGZpZWxkTmFtZTpufTtsZXQgbz1pLmdldEZpZWxkVmFsdWUoXCJzZWxlY3RcIik/LmFzT2JqZWN0KCkscz1pLmdldEZpZWxkVmFsdWUoXCJpbmNsdWRlXCIpPy5hc09iamVjdCgpLGE9aS5nZXRGaWVsZFZhbHVlKFwib21pdFwiKT8uYXNPYmplY3QoKSxsPW8/LmdldEZpZWxkKG4pO3JldHVybiBvJiZsP3twYXJlbnRLaW5kOlwic2VsZWN0XCIscGFyZW50Om8sZmllbGQ6bCxmaWVsZE5hbWU6bn06KGw9cz8uZ2V0RmllbGQobikscyYmbD97cGFyZW50S2luZDpcImluY2x1ZGVcIixmaWVsZDpsLHBhcmVudDpzLGZpZWxkTmFtZTpufToobD1hPy5nZXRGaWVsZChuKSxhJiZsP3twYXJlbnRLaW5kOlwib21pdFwiLGZpZWxkOmwscGFyZW50OmEsZmllbGROYW1lOm59OntwYXJlbnRLaW5kOlwidW5rbm93blwiLGZpZWxkTmFtZTpufSkpfWZ1bmN0aW9uIHlhKGUscil7aWYoci5raW5kPT09XCJvYmplY3RcIilmb3IobGV0IHQgb2Ygci5maWVsZHMpZS5oYXNGaWVsZCh0Lm5hbWUpfHxlLmFkZFN1Z2dlc3Rpb24obmV3IHVlKHQubmFtZSx0LnR5cGVOYW1lcy5qb2luKFwiIHwgXCIpKSl9ZnVuY3Rpb24gY3QoZSl7bGV0IHI9Wy4uLmVdLHQ9ci5wb3AoKTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIGVtcHR5IHBhdGhcIik7cmV0dXJuW3IsdF19ZnVuY3Rpb24gcHQoe2dyZWVuOmUsZW5hYmxlZDpyfSl7cmV0dXJuXCJBdmFpbGFibGUgb3B0aW9ucyBhcmUgXCIrKHI/YGxpc3RlZCBpbiAke2UoXCJncmVlblwiKX1gOlwibWFya2VkIHdpdGggP1wiKStcIi5cIn1mdW5jdGlvbiBQbihlLHIpe2lmKHIubGVuZ3RoPT09MSlyZXR1cm4gclswXTtsZXQgdD1bLi4ucl0sbj10LnBvcCgpO3JldHVybmAke3Quam9pbihcIiwgXCIpfSAke2V9ICR7bn1gfXZhciBKZD0zO2Z1bmN0aW9uIEhkKGUscil7bGV0IHQ9MS8wLG47Zm9yKGxldCBpIG9mIHIpe2xldCBvPSgwLGRhLmRlZmF1bHQpKGUsaSk7bz5KZHx8bzx0JiYodD1vLG49aSl9cmV0dXJuIG59dmFyIGR0PWNsYXNze21vZGVsTmFtZTtuYW1lO3R5cGVOYW1lO2lzTGlzdDtpc0VudW07Y29uc3RydWN0b3Iocix0LG4saSxvKXt0aGlzLm1vZGVsTmFtZT1yLHRoaXMubmFtZT10LHRoaXMudHlwZU5hbWU9bix0aGlzLmlzTGlzdD1pLHRoaXMuaXNFbnVtPW99X3RvR3JhcGhRTElucHV0VHlwZSgpe2xldCByPXRoaXMuaXNMaXN0P1wiTGlzdFwiOlwiXCIsdD10aGlzLmlzRW51bT9cIkVudW1cIjpcIlwiO3JldHVybmAke3J9JHt0fSR7dGhpcy50eXBlTmFtZX1GaWVsZFJlZklucHV0PCR7dGhpcy5tb2RlbE5hbWV9PmB9fTtmdW5jdGlvbiBEcihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGR0fXZhciBUbj1TeW1ib2woKSxKaT1uZXcgV2Vha01hcCxGZT1jbGFzc3tjb25zdHJ1Y3RvcihyKXtyPT09VG4/Smkuc2V0KHRoaXMsYFByaXNtYS4ke3RoaXMuX2dldE5hbWUoKX1gKTpKaS5zZXQodGhpcyxgbmV3IFByaXNtYS4ke3RoaXMuX2dldE5hbWVzcGFjZSgpfS4ke3RoaXMuX2dldE5hbWUoKX0oKWApfV9nZXROYW1lKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZX10b1N0cmluZygpe3JldHVybiBKaS5nZXQodGhpcyl9fSxtdD1jbGFzcyBleHRlbmRzIEZle19nZXROYW1lc3BhY2UoKXtyZXR1cm5cIk51bGxUeXBlc1wifX0sZnQ9Y2xhc3MgZXh0ZW5kcyBtdHtfYnJhbmRfRGJOdWxsfTtIaShmdCxcIkRiTnVsbFwiKTt2YXIgZ3Q9Y2xhc3MgZXh0ZW5kcyBtdHtfYnJhbmRfSnNvbk51bGx9O0hpKGd0LFwiSnNvbk51bGxcIik7dmFyIGh0PWNsYXNzIGV4dGVuZHMgbXR7X2JyYW5kX0FueU51bGx9O0hpKGh0LFwiQW55TnVsbFwiKTt2YXIgU249e2NsYXNzZXM6e0RiTnVsbDpmdCxKc29uTnVsbDpndCxBbnlOdWxsOmh0fSxpbnN0YW5jZXM6e0RiTnVsbDpuZXcgZnQoVG4pLEpzb25OdWxsOm5ldyBndChUbiksQW55TnVsbDpuZXcgaHQoVG4pfX07ZnVuY3Rpb24gSGkoZSxyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm5hbWVcIix7dmFsdWU6cixjb25maWd1cmFibGU6ITB9KX12YXIgYmE9XCI6IFwiLFJuPWNsYXNze2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5uYW1lPXI7dGhpcy52YWx1ZT10fWhhc0Vycm9yPSExO21hcmtBc0Vycm9yKCl7dGhpcy5oYXNFcnJvcj0hMH1nZXRQcmludFdpZHRoKCl7cmV0dXJuIHRoaXMubmFtZS5sZW5ndGgrdGhpcy52YWx1ZS5nZXRQcmludFdpZHRoKCkrYmEubGVuZ3RofXdyaXRlKHIpe2xldCB0PW5ldyBUZSh0aGlzLm5hbWUpO3RoaXMuaGFzRXJyb3ImJnQudW5kZXJsaW5lKCkuc2V0Q29sb3Ioci5jb250ZXh0LmNvbG9ycy5yZWQpLHIud3JpdGUodCkud3JpdGUoYmEpLndyaXRlKHRoaXMudmFsdWUpfX07dmFyIEtpPWNsYXNze2FyZ3VtZW50cztlcnJvck1lc3NhZ2VzPVtdO2NvbnN0cnVjdG9yKHIpe3RoaXMuYXJndW1lbnRzPXJ9d3JpdGUocil7ci53cml0ZSh0aGlzLmFyZ3VtZW50cyl9YWRkRXJyb3JNZXNzYWdlKHIpe3RoaXMuZXJyb3JNZXNzYWdlcy5wdXNoKHIpfXJlbmRlckFsbE1lc3NhZ2VzKHIpe3JldHVybiB0aGlzLmVycm9yTWVzc2FnZXMubWFwKHQ9PnQocikpLmpvaW4oYFxuYCl9fTtmdW5jdGlvbiBfcihlKXtyZXR1cm4gbmV3IEtpKEVhKGUpKX1mdW5jdGlvbiBFYShlKXtsZXQgcj1uZXcgT3I7Zm9yKGxldFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpe2xldCBpPW5ldyBSbih0LHdhKG4pKTtyLmFkZEZpZWxkKGkpfXJldHVybiByfWZ1bmN0aW9uIHdhKGUpe2lmKHR5cGVvZiBlPT1cInN0cmluZ1wiKXJldHVybiBuZXcgUShKU09OLnN0cmluZ2lmeShlKSk7aWYodHlwZW9mIGU9PVwibnVtYmVyXCJ8fHR5cGVvZiBlPT1cImJvb2xlYW5cIilyZXR1cm4gbmV3IFEoU3RyaW5nKGUpKTtpZih0eXBlb2YgZT09XCJiaWdpbnRcIilyZXR1cm4gbmV3IFEoYCR7ZX1uYCk7aWYoZT09PW51bGwpcmV0dXJuIG5ldyBRKFwibnVsbFwiKTtpZihlPT09dm9pZCAwKXJldHVybiBuZXcgUShcInVuZGVmaW5lZFwiKTtpZihScihlKSlyZXR1cm4gbmV3IFEoYG5ldyBQcmlzbWEuRGVjaW1hbChcIiR7ZS50b0ZpeGVkKCl9XCIpYCk7aWYoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihlKT9uZXcgUShgQnVmZmVyLmFsbG9jKCR7ZS5ieXRlTGVuZ3RofSlgKTpuZXcgUShgbmV3IFVpbnQ4QXJyYXkoJHtlLmJ5dGVMZW5ndGh9KWApO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXtsZXQgcj1nbihlKT9lLnRvSVNPU3RyaW5nKCk6XCJJbnZhbGlkIERhdGVcIjtyZXR1cm4gbmV3IFEoYG5ldyBEYXRlKFwiJHtyfVwiKWApfXJldHVybiBlIGluc3RhbmNlb2YgRmU/bmV3IFEoYFByaXNtYS4ke2UuX2dldE5hbWUoKX1gKTpEcihlKT9uZXcgUShgcHJpc21hLiR7WWUoZS5tb2RlbE5hbWUpfS4kZmllbGRzLiR7ZS5uYW1lfWApOkFycmF5LmlzQXJyYXkoZSk/S2QoZSk6dHlwZW9mIGU9PVwib2JqZWN0XCI/RWEoZSk6bmV3IFEoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKX1mdW5jdGlvbiBLZChlKXtsZXQgcj1uZXcga3I7Zm9yKGxldCB0IG9mIGUpci5hZGRJdGVtKHdhKHQpKTtyZXR1cm4gcn1mdW5jdGlvbiBDbihlLHIpe2xldCB0PXI9PT1cInByZXR0eVwiP3BhOnZuLG49ZS5yZW5kZXJBbGxNZXNzYWdlcyh0KSxpPW5ldyBBcigwLHtjb2xvcnM6dH0pLndyaXRlKGUpLnRvU3RyaW5nKCk7cmV0dXJue21lc3NhZ2U6bixhcmdzOml9fWZ1bmN0aW9uIEFuKHthcmdzOmUsZXJyb3JzOnIsZXJyb3JGb3JtYXQ6dCxjYWxsc2l0ZTpuLG9yaWdpbmFsTWV0aG9kOmksY2xpZW50VmVyc2lvbjpvLGdsb2JhbE9taXQ6c30pe2xldCBhPV9yKGUpO2ZvcihsZXQgcCBvZiByKUVuKHAsYSxzKTtsZXR7bWVzc2FnZTpsLGFyZ3M6dX09Q24oYSx0KSxjPWJuKHttZXNzYWdlOmwsY2FsbHNpdGU6bixvcmlnaW5hbE1ldGhvZDppLHNob3dDb2xvcnM6dD09PVwicHJldHR5XCIsY2FsbEFyZ3VtZW50czp1fSk7dGhyb3cgbmV3IFooYyx7Y2xpZW50VmVyc2lvbjpvfSl9ZnVuY3Rpb24gU2UoZSl7cmV0dXJuIGUucmVwbGFjZSgvXi4vLHI9PnIudG9Mb3dlckNhc2UoKSl9ZnVuY3Rpb24gdmEoZSxyLHQpe2xldCBuPVNlKHQpO3JldHVybiFyLnJlc3VsdHx8IShyLnJlc3VsdC4kYWxsTW9kZWxzfHxyLnJlc3VsdFtuXSk/ZTpZZCh7Li4uZSwuLi54YShyLm5hbWUsZSxyLnJlc3VsdC4kYWxsTW9kZWxzKSwuLi54YShyLm5hbWUsZSxyLnJlc3VsdFtuXSl9KX1mdW5jdGlvbiBZZChlKXtsZXQgcj1uZXcgUGUsdD0obixpKT0+ci5nZXRPckNyZWF0ZShuLCgpPT5pLmhhcyhuKT9bbl06KGkuYWRkKG4pLGVbbl0/ZVtuXS5uZWVkcy5mbGF0TWFwKG89PnQobyxpKSk6W25dKSk7cmV0dXJuIHhyKGUsbj0+KHsuLi5uLG5lZWRzOnQobi5uYW1lLG5ldyBTZXQpfSkpfWZ1bmN0aW9uIHhhKGUscix0KXtyZXR1cm4gdD94cih0LCh7bmVlZHM6bixjb21wdXRlOml9LG8pPT4oe25hbWU6byxuZWVkczpuP09iamVjdC5rZXlzKG4pLmZpbHRlcihzPT5uW3NdKTpbXSxjb21wdXRlOnpkKHIsbyxpKX0pKTp7fX1mdW5jdGlvbiB6ZChlLHIsdCl7bGV0IG49ZT8uW3JdPy5jb21wdXRlO3JldHVybiBuP2k9PnQoey4uLmksW3JdOm4oaSl9KTp0fWZ1bmN0aW9uIFBhKGUscil7aWYoIXIpcmV0dXJuIGU7bGV0IHQ9ey4uLmV9O2ZvcihsZXQgbiBvZiBPYmplY3QudmFsdWVzKHIpKWlmKGVbbi5uYW1lXSlmb3IobGV0IGkgb2Ygbi5uZWVkcyl0W2ldPSEwO3JldHVybiB0fWZ1bmN0aW9uIFRhKGUscil7aWYoIXIpcmV0dXJuIGU7bGV0IHQ9ey4uLmV9O2ZvcihsZXQgbiBvZiBPYmplY3QudmFsdWVzKHIpKWlmKCFlW24ubmFtZV0pZm9yKGxldCBpIG9mIG4ubmVlZHMpZGVsZXRlIHRbaV07cmV0dXJuIHR9dmFyIEluPWNsYXNze2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5leHRlbnNpb249cjt0aGlzLnByZXZpb3VzPXR9Y29tcHV0ZWRGaWVsZHNDYWNoZT1uZXcgUGU7bW9kZWxFeHRlbnNpb25zQ2FjaGU9bmV3IFBlO3F1ZXJ5Q2FsbGJhY2tzQ2FjaGU9bmV3IFBlO2NsaWVudEV4dGVuc2lvbnM9YXQoKCk9PnRoaXMuZXh0ZW5zaW9uLmNsaWVudD97Li4udGhpcy5wcmV2aW91cz8uZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpLC4uLnRoaXMuZXh0ZW5zaW9uLmNsaWVudH06dGhpcy5wcmV2aW91cz8uZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpKTtiYXRjaENhbGxiYWNrcz1hdCgoKT0+e2xldCByPXRoaXMucHJldmlvdXM/LmdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKT8/W10sdD10aGlzLmV4dGVuc2lvbi5xdWVyeT8uJF9faW50ZXJuYWxCYXRjaDtyZXR1cm4gdD9yLmNvbmNhdCh0KTpyfSk7Z2V0QWxsQ29tcHV0ZWRGaWVsZHMocil7cmV0dXJuIHRoaXMuY29tcHV0ZWRGaWVsZHNDYWNoZS5nZXRPckNyZWF0ZShyLCgpPT52YSh0aGlzLnByZXZpb3VzPy5nZXRBbGxDb21wdXRlZEZpZWxkcyhyKSx0aGlzLmV4dGVuc2lvbixyKSl9Z2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpe3JldHVybiB0aGlzLmNsaWVudEV4dGVuc2lvbnMuZ2V0KCl9Z2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpe3JldHVybiB0aGlzLm1vZGVsRXh0ZW5zaW9uc0NhY2hlLmdldE9yQ3JlYXRlKHIsKCk9PntsZXQgdD1TZShyKTtyZXR1cm4hdGhpcy5leHRlbnNpb24ubW9kZWx8fCEodGhpcy5leHRlbnNpb24ubW9kZWxbdF18fHRoaXMuZXh0ZW5zaW9uLm1vZGVsLiRhbGxNb2RlbHMpP3RoaXMucHJldmlvdXM/LmdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKTp7Li4udGhpcy5wcmV2aW91cz8uZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpLC4uLnRoaXMuZXh0ZW5zaW9uLm1vZGVsLiRhbGxNb2RlbHMsLi4udGhpcy5leHRlbnNpb24ubW9kZWxbdF19fSl9Z2V0QWxsUXVlcnlDYWxsYmFja3Mocix0KXtyZXR1cm4gdGhpcy5xdWVyeUNhbGxiYWNrc0NhY2hlLmdldE9yQ3JlYXRlKGAke3J9OiR7dH1gLCgpPT57bGV0IG49dGhpcy5wcmV2aW91cz8uZ2V0QWxsUXVlcnlDYWxsYmFja3Mocix0KT8/W10saT1bXSxvPXRoaXMuZXh0ZW5zaW9uLnF1ZXJ5O3JldHVybiFvfHwhKG9bcl18fG8uJGFsbE1vZGVsc3x8b1t0XXx8by4kYWxsT3BlcmF0aW9ucyk/bjoob1tyXSE9PXZvaWQgMCYmKG9bcl1bdF0hPT12b2lkIDAmJmkucHVzaChvW3JdW3RdKSxvW3JdLiRhbGxPcGVyYXRpb25zIT09dm9pZCAwJiZpLnB1c2gob1tyXS4kYWxsT3BlcmF0aW9ucykpLHIhPT1cIiRub25lXCImJm8uJGFsbE1vZGVscyE9PXZvaWQgMCYmKG8uJGFsbE1vZGVsc1t0XSE9PXZvaWQgMCYmaS5wdXNoKG8uJGFsbE1vZGVsc1t0XSksby4kYWxsTW9kZWxzLiRhbGxPcGVyYXRpb25zIT09dm9pZCAwJiZpLnB1c2goby4kYWxsTW9kZWxzLiRhbGxPcGVyYXRpb25zKSksb1t0XSE9PXZvaWQgMCYmaS5wdXNoKG9bdF0pLG8uJGFsbE9wZXJhdGlvbnMhPT12b2lkIDAmJmkucHVzaChvLiRhbGxPcGVyYXRpb25zKSxuLmNvbmNhdChpKSl9KX1nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCl7cmV0dXJuIHRoaXMuYmF0Y2hDYWxsYmFja3MuZ2V0KCl9fSxOcj1jbGFzcyBle2NvbnN0cnVjdG9yKHIpe3RoaXMuaGVhZD1yfXN0YXRpYyBlbXB0eSgpe3JldHVybiBuZXcgZX1zdGF0aWMgc2luZ2xlKHIpe3JldHVybiBuZXcgZShuZXcgSW4ocikpfWlzRW1wdHkoKXtyZXR1cm4gdGhpcy5oZWFkPT09dm9pZCAwfWFwcGVuZChyKXtyZXR1cm4gbmV3IGUobmV3IEluKHIsdGhpcy5oZWFkKSl9Z2V0QWxsQ29tcHV0ZWRGaWVsZHMocil7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsQ29tcHV0ZWRGaWVsZHMocil9Z2V0QWxsQ2xpZW50RXh0ZW5zaW9ucygpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbENsaWVudEV4dGVuc2lvbnMoKX1nZXRBbGxNb2RlbEV4dGVuc2lvbnMocil7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsTW9kZWxFeHRlbnNpb25zKHIpfWdldEFsbFF1ZXJ5Q2FsbGJhY2tzKHIsdCl7cmV0dXJuIHRoaXMuaGVhZD8uZ2V0QWxsUXVlcnlDYWxsYmFja3Mocix0KT8/W119Z2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcygpe3JldHVybiB0aGlzLmhlYWQ/LmdldEFsbEJhdGNoUXVlcnlDYWxsYmFja3MoKT8/W119fTt2YXIga249Y2xhc3N7Y29uc3RydWN0b3Iocil7dGhpcy5uYW1lPXJ9fTtmdW5jdGlvbiBTYShlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGtufWZ1bmN0aW9uIFJhKGUpe3JldHVybiBuZXcga24oZSl9dmFyIENhPVN5bWJvbCgpLHl0PWNsYXNze2NvbnN0cnVjdG9yKHIpe2lmKHIhPT1DYSl0aHJvdyBuZXcgRXJyb3IoXCJTa2lwIGluc3RhbmNlIGNhbiBub3QgYmUgY29uc3RydWN0ZWQgZGlyZWN0bHlcIil9aWZVbmRlZmluZWQocil7cmV0dXJuIHI9PT12b2lkIDA/T246cn19LE9uPW5ldyB5dChDYSk7ZnVuY3Rpb24gUmUoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB5dH12YXIgWmQ9e2ZpbmRVbmlxdWU6XCJmaW5kVW5pcXVlXCIsZmluZFVuaXF1ZU9yVGhyb3c6XCJmaW5kVW5pcXVlT3JUaHJvd1wiLGZpbmRGaXJzdDpcImZpbmRGaXJzdFwiLGZpbmRGaXJzdE9yVGhyb3c6XCJmaW5kRmlyc3RPclRocm93XCIsZmluZE1hbnk6XCJmaW5kTWFueVwiLGNvdW50OlwiYWdncmVnYXRlXCIsY3JlYXRlOlwiY3JlYXRlT25lXCIsY3JlYXRlTWFueTpcImNyZWF0ZU1hbnlcIixjcmVhdGVNYW55QW5kUmV0dXJuOlwiY3JlYXRlTWFueUFuZFJldHVyblwiLHVwZGF0ZTpcInVwZGF0ZU9uZVwiLHVwZGF0ZU1hbnk6XCJ1cGRhdGVNYW55XCIsdXBkYXRlTWFueUFuZFJldHVybjpcInVwZGF0ZU1hbnlBbmRSZXR1cm5cIix1cHNlcnQ6XCJ1cHNlcnRPbmVcIixkZWxldGU6XCJkZWxldGVPbmVcIixkZWxldGVNYW55OlwiZGVsZXRlTWFueVwiLGV4ZWN1dGVSYXc6XCJleGVjdXRlUmF3XCIscXVlcnlSYXc6XCJxdWVyeVJhd1wiLGFnZ3JlZ2F0ZTpcImFnZ3JlZ2F0ZVwiLGdyb3VwQnk6XCJncm91cEJ5XCIscnVuQ29tbWFuZFJhdzpcInJ1bkNvbW1hbmRSYXdcIixmaW5kUmF3OlwiZmluZFJhd1wiLGFnZ3JlZ2F0ZVJhdzpcImFnZ3JlZ2F0ZVJhd1wifSxBYT1cImV4cGxpY2l0bHkgYHVuZGVmaW5lZGAgdmFsdWVzIGFyZSBub3QgYWxsb3dlZFwiO2Z1bmN0aW9uIERuKHttb2RlbE5hbWU6ZSxhY3Rpb246cixhcmdzOnQscnVudGltZURhdGFNb2RlbDpuLGV4dGVuc2lvbnM6aT1Oci5lbXB0eSgpLGNhbGxzaXRlOm8sY2xpZW50TWV0aG9kOnMsZXJyb3JGb3JtYXQ6YSxjbGllbnRWZXJzaW9uOmwscHJldmlld0ZlYXR1cmVzOnUsZ2xvYmFsT21pdDpjfSl7bGV0IHA9bmV3IFlpKHtydW50aW1lRGF0YU1vZGVsOm4sbW9kZWxOYW1lOmUsYWN0aW9uOnIscm9vdEFyZ3M6dCxjYWxsc2l0ZTpvLGV4dGVuc2lvbnM6aSxzZWxlY3Rpb25QYXRoOltdLGFyZ3VtZW50UGF0aDpbXSxvcmlnaW5hbE1ldGhvZDpzLGVycm9yRm9ybWF0OmEsY2xpZW50VmVyc2lvbjpsLHByZXZpZXdGZWF0dXJlczp1LGdsb2JhbE9taXQ6Y30pO3JldHVybnttb2RlbE5hbWU6ZSxhY3Rpb246WmRbcl0scXVlcnk6YnQodCxwKX19ZnVuY3Rpb24gYnQoe3NlbGVjdDplLGluY2x1ZGU6ciwuLi50fT17fSxuKXtsZXQgaT10Lm9taXQ7cmV0dXJuIGRlbGV0ZSB0Lm9taXQse2FyZ3VtZW50czprYSh0LG4pLHNlbGVjdGlvbjpYZChlLHIsaSxuKX19ZnVuY3Rpb24gWGQoZSxyLHQsbil7cmV0dXJuIGU/KHI/bi50aHJvd1ZhbGlkYXRpb25FcnJvcih7a2luZDpcIk11dHVhbGx5RXhjbHVzaXZlRmllbGRzXCIsZmlyc3RGaWVsZDpcImluY2x1ZGVcIixzZWNvbmRGaWVsZDpcInNlbGVjdFwiLHNlbGVjdGlvblBhdGg6bi5nZXRTZWxlY3Rpb25QYXRoKCl9KTp0JiZuLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNcIixmaXJzdEZpZWxkOlwib21pdFwiLHNlY29uZEZpZWxkOlwic2VsZWN0XCIsc2VsZWN0aW9uUGF0aDpuLmdldFNlbGVjdGlvblBhdGgoKX0pLG5tKGUsbikpOmVtKG4scix0KX1mdW5jdGlvbiBlbShlLHIsdCl7bGV0IG49e307cmV0dXJuIGUubW9kZWxPclR5cGUmJiFlLmlzUmF3QWN0aW9uKCkmJihuLiRjb21wb3NpdGVzPSEwLG4uJHNjYWxhcnM9ITApLHImJnJtKG4scixlKSx0bShuLHQsZSksbn1mdW5jdGlvbiBybShlLHIsdCl7Zm9yKGxldFtuLGldb2YgT2JqZWN0LmVudHJpZXMocikpe2lmKFJlKGkpKWNvbnRpbnVlO2xldCBvPXQubmVzdFNlbGVjdGlvbihuKTtpZih6aShpLG8pLGk9PT0hMXx8aT09PXZvaWQgMCl7ZVtuXT0hMTtjb250aW51ZX1sZXQgcz10LmZpbmRGaWVsZChuKTtpZihzJiZzLmtpbmQhPT1cIm9iamVjdFwiJiZ0LnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW5jbHVkZU9uU2NhbGFyXCIsc2VsZWN0aW9uUGF0aDp0LmdldFNlbGVjdGlvblBhdGgoKS5jb25jYXQobiksb3V0cHV0VHlwZTp0LmdldE91dHB1dFR5cGVEZXNjcmlwdGlvbigpfSkscyl7ZVtuXT1idChpPT09ITA/e306aSxvKTtjb250aW51ZX1pZihpPT09ITApe2Vbbl09ITA7Y29udGludWV9ZVtuXT1idChpLG8pfX1mdW5jdGlvbiB0bShlLHIsdCl7bGV0IG49dC5nZXRDb21wdXRlZEZpZWxkcygpLGk9ey4uLnQuZ2V0R2xvYmFsT21pdCgpLC4uLnJ9LG89VGEoaSxuKTtmb3IobGV0W3MsYV1vZiBPYmplY3QuZW50cmllcyhvKSl7aWYoUmUoYSkpY29udGludWU7emkoYSx0Lm5lc3RTZWxlY3Rpb24ocykpO2xldCBsPXQuZmluZEZpZWxkKHMpO24/LltzXSYmIWx8fChlW3NdPSFhKX19ZnVuY3Rpb24gbm0oZSxyKXtsZXQgdD17fSxuPXIuZ2V0Q29tcHV0ZWRGaWVsZHMoKSxpPVBhKGUsbik7Zm9yKGxldFtvLHNdb2YgT2JqZWN0LmVudHJpZXMoaSkpe2lmKFJlKHMpKWNvbnRpbnVlO2xldCBhPXIubmVzdFNlbGVjdGlvbihvKTt6aShzLGEpO2xldCBsPXIuZmluZEZpZWxkKG8pO2lmKCEobj8uW29dJiYhbCkpe2lmKHM9PT0hMXx8cz09PXZvaWQgMHx8UmUocykpe3Rbb109ITE7Y29udGludWV9aWYocz09PSEwKXtsPy5raW5kPT09XCJvYmplY3RcIj90W29dPWJ0KHt9LGEpOnRbb109ITA7Y29udGludWV9dFtvXT1idChzLGEpfX1yZXR1cm4gdH1mdW5jdGlvbiBJYShlLHIpe2lmKGU9PT1udWxsKXJldHVybiBudWxsO2lmKHR5cGVvZiBlPT1cInN0cmluZ1wifHx0eXBlb2YgZT09XCJudW1iZXJcInx8dHlwZW9mIGU9PVwiYm9vbGVhblwiKXJldHVybiBlO2lmKHR5cGVvZiBlPT1cImJpZ2ludFwiKXJldHVybnskdHlwZTpcIkJpZ0ludFwiLHZhbHVlOlN0cmluZyhlKX07aWYoU3IoZSkpe2lmKGduKGUpKXJldHVybnskdHlwZTpcIkRhdGVUaW1lXCIsdmFsdWU6ZS50b0lTT1N0cmluZygpfTtyLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOnIuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDpyLmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOnIuZ2V0QXJndW1lbnROYW1lKCksdHlwZU5hbWVzOltcIkRhdGVcIl19LHVuZGVybHlpbmdFcnJvcjpcIlByb3ZpZGVkIERhdGUgb2JqZWN0IGlzIGludmFsaWRcIn0pfWlmKFNhKGUpKXJldHVybnskdHlwZTpcIlBhcmFtXCIsdmFsdWU6ZS5uYW1lfTtpZihEcihlKSlyZXR1cm57JHR5cGU6XCJGaWVsZFJlZlwiLHZhbHVlOntfcmVmOmUubmFtZSxfY29udGFpbmVyOmUubW9kZWxOYW1lfX07aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gaW0oZSxyKTtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpe2xldHtidWZmZXI6dCxieXRlT2Zmc2V0Om4sYnl0ZUxlbmd0aDppfT1lO3JldHVybnskdHlwZTpcIkJ5dGVzXCIsdmFsdWU6QnVmZmVyLmZyb20odCxuLGkpLnRvU3RyaW5nKFwiYmFzZTY0XCIpfX1pZihvbShlKSlyZXR1cm4gZS52YWx1ZXM7aWYoUnIoZSkpcmV0dXJueyR0eXBlOlwiRGVjaW1hbFwiLHZhbHVlOmUudG9GaXhlZCgpfTtpZihlIGluc3RhbmNlb2YgRmUpe2lmKGUhPT1Tbi5pbnN0YW5jZXNbZS5fZ2V0TmFtZSgpXSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIE9iamVjdEVudW1WYWx1ZVwiKTtyZXR1cm57JHR5cGU6XCJFbnVtXCIsdmFsdWU6ZS5fZ2V0TmFtZSgpfX1pZihzbShlKSlyZXR1cm4gZS50b0pTT04oKTtpZih0eXBlb2YgZT09XCJvYmplY3RcIilyZXR1cm4ga2EoZSxyKTtyLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOnIuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDpyLmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOnIuZ2V0QXJndW1lbnROYW1lKCksdHlwZU5hbWVzOltdfSx1bmRlcmx5aW5nRXJyb3I6YFdlIGNvdWxkIG5vdCBzZXJpYWxpemUgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9IHZhbHVlLiBTZXJpYWxpemUgdGhlIG9iamVjdCB0byBKU09OIG9yIGltcGxlbWVudCBhIFwiLnRvSlNPTigpXCIgbWV0aG9kIG9uIGl0YH0pfWZ1bmN0aW9uIGthKGUscil7aWYoZS4kdHlwZSlyZXR1cm57JHR5cGU6XCJSYXdcIix2YWx1ZTplfTtsZXQgdD17fTtmb3IobGV0IG4gaW4gZSl7bGV0IGk9ZVtuXSxvPXIubmVzdEFyZ3VtZW50KG4pO1JlKGkpfHwoaSE9PXZvaWQgMD90W25dPUlhKGksbyk6ci5pc1ByZXZpZXdGZWF0dXJlT24oXCJzdHJpY3RVbmRlZmluZWRDaGVja3NcIikmJnIudGhyb3dWYWxpZGF0aW9uRXJyb3Ioe2tpbmQ6XCJJbnZhbGlkQXJndW1lbnRWYWx1ZVwiLGFyZ3VtZW50UGF0aDpvLmdldEFyZ3VtZW50UGF0aCgpLHNlbGVjdGlvblBhdGg6ci5nZXRTZWxlY3Rpb25QYXRoKCksYXJndW1lbnQ6e25hbWU6ci5nZXRBcmd1bWVudE5hbWUoKSx0eXBlTmFtZXM6W119LHVuZGVybHlpbmdFcnJvcjpBYX0pKX1yZXR1cm4gdH1mdW5jdGlvbiBpbShlLHIpe2xldCB0PVtdO2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtsZXQgaT1yLm5lc3RBcmd1bWVudChTdHJpbmcobikpLG89ZVtuXTtpZihvPT09dm9pZCAwfHxSZShvKSl7bGV0IHM9bz09PXZvaWQgMD9cInVuZGVmaW5lZFwiOlwiUHJpc21hLnNraXBcIjtyLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZEFyZ3VtZW50VmFsdWVcIixzZWxlY3Rpb25QYXRoOmkuZ2V0U2VsZWN0aW9uUGF0aCgpLGFyZ3VtZW50UGF0aDppLmdldEFyZ3VtZW50UGF0aCgpLGFyZ3VtZW50OntuYW1lOmAke3IuZ2V0QXJndW1lbnROYW1lKCl9WyR7bn1dYCx0eXBlTmFtZXM6W119LHVuZGVybHlpbmdFcnJvcjpgQ2FuIG5vdCB1c2UgXFxgJHtzfVxcYCB2YWx1ZSB3aXRoaW4gYXJyYXkuIFVzZSBcXGBudWxsXFxgIG9yIGZpbHRlciBvdXQgXFxgJHtzfVxcYCB2YWx1ZXNgfSl9dC5wdXNoKElhKG8saSkpfXJldHVybiB0fWZ1bmN0aW9uIG9tKGUpe3JldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJmUuX19wcmlzbWFSYXdQYXJhbWV0ZXJzX189PT0hMH1mdW5jdGlvbiBzbShlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsJiZ0eXBlb2YgZS50b0pTT049PVwiZnVuY3Rpb25cIn1mdW5jdGlvbiB6aShlLHIpe2U9PT12b2lkIDAmJnIuaXNQcmV2aWV3RmVhdHVyZU9uKFwic3RyaWN0VW5kZWZpbmVkQ2hlY2tzXCIpJiZyLnRocm93VmFsaWRhdGlvbkVycm9yKHtraW5kOlwiSW52YWxpZFNlbGVjdGlvblZhbHVlXCIsc2VsZWN0aW9uUGF0aDpyLmdldFNlbGVjdGlvblBhdGgoKSx1bmRlcmx5aW5nRXJyb3I6QWF9KX12YXIgWWk9Y2xhc3MgZXtjb25zdHJ1Y3RvcihyKXt0aGlzLnBhcmFtcz1yO3RoaXMucGFyYW1zLm1vZGVsTmFtZSYmKHRoaXMubW9kZWxPclR5cGU9dGhpcy5wYXJhbXMucnVudGltZURhdGFNb2RlbC5tb2RlbHNbdGhpcy5wYXJhbXMubW9kZWxOYW1lXT8/dGhpcy5wYXJhbXMucnVudGltZURhdGFNb2RlbC50eXBlc1t0aGlzLnBhcmFtcy5tb2RlbE5hbWVdKX1tb2RlbE9yVHlwZTt0aHJvd1ZhbGlkYXRpb25FcnJvcihyKXtBbih7ZXJyb3JzOltyXSxvcmlnaW5hbE1ldGhvZDp0aGlzLnBhcmFtcy5vcmlnaW5hbE1ldGhvZCxhcmdzOnRoaXMucGFyYW1zLnJvb3RBcmdzPz97fSxjYWxsc2l0ZTp0aGlzLnBhcmFtcy5jYWxsc2l0ZSxlcnJvckZvcm1hdDp0aGlzLnBhcmFtcy5lcnJvckZvcm1hdCxjbGllbnRWZXJzaW9uOnRoaXMucGFyYW1zLmNsaWVudFZlcnNpb24sZ2xvYmFsT21pdDp0aGlzLnBhcmFtcy5nbG9iYWxPbWl0fSl9Z2V0U2VsZWN0aW9uUGF0aCgpe3JldHVybiB0aGlzLnBhcmFtcy5zZWxlY3Rpb25QYXRofWdldEFyZ3VtZW50UGF0aCgpe3JldHVybiB0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGh9Z2V0QXJndW1lbnROYW1lKCl7cmV0dXJuIHRoaXMucGFyYW1zLmFyZ3VtZW50UGF0aFt0aGlzLnBhcmFtcy5hcmd1bWVudFBhdGgubGVuZ3RoLTFdfWdldE91dHB1dFR5cGVEZXNjcmlwdGlvbigpe2lmKCEoIXRoaXMucGFyYW1zLm1vZGVsTmFtZXx8IXRoaXMubW9kZWxPclR5cGUpKXJldHVybntuYW1lOnRoaXMucGFyYW1zLm1vZGVsTmFtZSxmaWVsZHM6dGhpcy5tb2RlbE9yVHlwZS5maWVsZHMubWFwKHI9Pih7bmFtZTpyLm5hbWUsdHlwZU5hbWU6XCJib29sZWFuXCIsaXNSZWxhdGlvbjpyLmtpbmQ9PT1cIm9iamVjdFwifSkpfX1pc1Jhd0FjdGlvbigpe3JldHVybltcImV4ZWN1dGVSYXdcIixcInF1ZXJ5UmF3XCIsXCJydW5Db21tYW5kUmF3XCIsXCJmaW5kUmF3XCIsXCJhZ2dyZWdhdGVSYXdcIl0uaW5jbHVkZXModGhpcy5wYXJhbXMuYWN0aW9uKX1pc1ByZXZpZXdGZWF0dXJlT24ocil7cmV0dXJuIHRoaXMucGFyYW1zLnByZXZpZXdGZWF0dXJlcy5pbmNsdWRlcyhyKX1nZXRDb21wdXRlZEZpZWxkcygpe2lmKHRoaXMucGFyYW1zLm1vZGVsTmFtZSlyZXR1cm4gdGhpcy5wYXJhbXMuZXh0ZW5zaW9ucy5nZXRBbGxDb21wdXRlZEZpZWxkcyh0aGlzLnBhcmFtcy5tb2RlbE5hbWUpfWZpbmRGaWVsZChyKXtyZXR1cm4gdGhpcy5tb2RlbE9yVHlwZT8uZmllbGRzLmZpbmQodD0+dC5uYW1lPT09cil9bmVzdFNlbGVjdGlvbihyKXtsZXQgdD10aGlzLmZpbmRGaWVsZChyKSxuPXQ/LmtpbmQ9PT1cIm9iamVjdFwiP3QudHlwZTp2b2lkIDA7cmV0dXJuIG5ldyBlKHsuLi50aGlzLnBhcmFtcyxtb2RlbE5hbWU6bixzZWxlY3Rpb25QYXRoOnRoaXMucGFyYW1zLnNlbGVjdGlvblBhdGguY29uY2F0KHIpfSl9Z2V0R2xvYmFsT21pdCgpe3JldHVybiB0aGlzLnBhcmFtcy5tb2RlbE5hbWUmJnRoaXMuc2hvdWxkQXBwbHlHbG9iYWxPbWl0KCk/dGhpcy5wYXJhbXMuZ2xvYmFsT21pdD8uW1llKHRoaXMucGFyYW1zLm1vZGVsTmFtZSldPz97fTp7fX1zaG91bGRBcHBseUdsb2JhbE9taXQoKXtzd2l0Y2godGhpcy5wYXJhbXMuYWN0aW9uKXtjYXNlXCJmaW5kRmlyc3RcIjpjYXNlXCJmaW5kRmlyc3RPclRocm93XCI6Y2FzZVwiZmluZFVuaXF1ZU9yVGhyb3dcIjpjYXNlXCJmaW5kTWFueVwiOmNhc2VcInVwc2VydFwiOmNhc2VcImZpbmRVbmlxdWVcIjpjYXNlXCJjcmVhdGVNYW55QW5kUmV0dXJuXCI6Y2FzZVwiY3JlYXRlXCI6Y2FzZVwidXBkYXRlXCI6Y2FzZVwidXBkYXRlTWFueUFuZFJldHVyblwiOmNhc2VcImRlbGV0ZVwiOnJldHVybiEwO2Nhc2VcImV4ZWN1dGVSYXdcIjpjYXNlXCJhZ2dyZWdhdGVSYXdcIjpjYXNlXCJydW5Db21tYW5kUmF3XCI6Y2FzZVwiZmluZFJhd1wiOmNhc2VcImNyZWF0ZU1hbnlcIjpjYXNlXCJkZWxldGVNYW55XCI6Y2FzZVwiZ3JvdXBCeVwiOmNhc2VcInVwZGF0ZU1hbnlcIjpjYXNlXCJjb3VudFwiOmNhc2VcImFnZ3JlZ2F0ZVwiOmNhc2VcInF1ZXJ5UmF3XCI6cmV0dXJuITE7ZGVmYXVsdDpfZSh0aGlzLnBhcmFtcy5hY3Rpb24sXCJVbmtub3duIGFjdGlvblwiKX19bmVzdEFyZ3VtZW50KHIpe3JldHVybiBuZXcgZSh7Li4udGhpcy5wYXJhbXMsYXJndW1lbnRQYXRoOnRoaXMucGFyYW1zLmFyZ3VtZW50UGF0aC5jb25jYXQocil9KX19O2Z1bmN0aW9uIE9hKGUpe2lmKCFlLl9oYXNQcmV2aWV3RmxhZyhcIm1ldHJpY3NcIikpdGhyb3cgbmV3IFooXCJgbWV0cmljc2AgcHJldmlldyBmZWF0dXJlIG11c3QgYmUgZW5hYmxlZCBpbiBvcmRlciB0byBhY2Nlc3MgbWV0cmljcyBBUElcIix7Y2xpZW50VmVyc2lvbjplLl9jbGllbnRWZXJzaW9ufSl9dmFyIExyPWNsYXNze19jbGllbnQ7Y29uc3RydWN0b3Iocil7dGhpcy5fY2xpZW50PXJ9cHJvbWV0aGV1cyhyKXtyZXR1cm4gT2EodGhpcy5fY2xpZW50KSx0aGlzLl9jbGllbnQuX2VuZ2luZS5tZXRyaWNzKHtmb3JtYXQ6XCJwcm9tZXRoZXVzXCIsLi4ucn0pfWpzb24ocil7cmV0dXJuIE9hKHRoaXMuX2NsaWVudCksdGhpcy5fY2xpZW50Ll9lbmdpbmUubWV0cmljcyh7Zm9ybWF0OlwianNvblwiLC4uLnJ9KX19O2Z1bmN0aW9uIERhKGUscil7bGV0IHQ9YXQoKCk9PmFtKHIpKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRtbWZcIix7Z2V0OigpPT50LmdldCgpfSl9ZnVuY3Rpb24gYW0oZSl7cmV0dXJue2RhdGFtb2RlbDp7bW9kZWxzOlppKGUubW9kZWxzKSxlbnVtczpaaShlLmVudW1zKSx0eXBlczpaaShlLnR5cGVzKX19fWZ1bmN0aW9uIFppKGUpe3JldHVybiBPYmplY3QuZW50cmllcyhlKS5tYXAoKFtyLHRdKT0+KHtuYW1lOnIsLi4udH0pKX12YXIgWGk9bmV3IFdlYWtNYXAsX249XCIkJFByaXNtYVR5cGVkU3FsXCIsRXQ9Y2xhc3N7Y29uc3RydWN0b3Iocix0KXtYaS5zZXQodGhpcyx7c3FsOnIsdmFsdWVzOnR9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxfbix7dmFsdWU6X259KX1nZXQgc3FsKCl7cmV0dXJuIFhpLmdldCh0aGlzKS5zcWx9Z2V0IHZhbHVlcygpe3JldHVybiBYaS5nZXQodGhpcykudmFsdWVzfX07ZnVuY3Rpb24gX2EoZSl7cmV0dXJuKC4uLnIpPT5uZXcgRXQoZSxyKX1mdW5jdGlvbiBObihlKXtyZXR1cm4gZSE9bnVsbCYmZVtfbl09PT1fbn12YXIgcHU9ayhFaSgpKTt2YXIgZHU9cmVxdWlyZShcIm5vZGU6YXN5bmNfaG9va3NcIiksbXU9cmVxdWlyZShcIm5vZGU6ZXZlbnRzXCIpLGZ1PWsocmVxdWlyZShcIm5vZGU6ZnNcIikpLFpuPWsocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7dmFyIG9lPWNsYXNzIGV7Y29uc3RydWN0b3Iocix0KXtpZihyLmxlbmd0aC0xIT09dC5sZW5ndGgpdGhyb3cgci5sZW5ndGg9PT0wP25ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhdCBsZWFzdCAxIHN0cmluZ1wiKTpuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAke3IubGVuZ3RofSBzdHJpbmdzIHRvIGhhdmUgJHtyLmxlbmd0aC0xfSB2YWx1ZXNgKTtsZXQgbj10LnJlZHVjZSgocyxhKT0+cysoYSBpbnN0YW5jZW9mIGU/YS52YWx1ZXMubGVuZ3RoOjEpLDApO3RoaXMudmFsdWVzPW5ldyBBcnJheShuKSx0aGlzLnN0cmluZ3M9bmV3IEFycmF5KG4rMSksdGhpcy5zdHJpbmdzWzBdPXJbMF07bGV0IGk9MCxvPTA7Zm9yKDtpPHQubGVuZ3RoOyl7bGV0IHM9dFtpKytdLGE9cltpXTtpZihzIGluc3RhbmNlb2YgZSl7dGhpcy5zdHJpbmdzW29dKz1zLnN0cmluZ3NbMF07bGV0IGw9MDtmb3IoO2w8cy52YWx1ZXMubGVuZ3RoOyl0aGlzLnZhbHVlc1tvKytdPXMudmFsdWVzW2wrK10sdGhpcy5zdHJpbmdzW29dPXMuc3RyaW5nc1tsXTt0aGlzLnN0cmluZ3Nbb10rPWF9ZWxzZSB0aGlzLnZhbHVlc1tvKytdPXMsdGhpcy5zdHJpbmdzW29dPWF9fWdldCBzcWwoKXtsZXQgcj10aGlzLnN0cmluZ3MubGVuZ3RoLHQ9MSxuPXRoaXMuc3RyaW5nc1swXTtmb3IoO3Q8cjspbis9YD8ke3RoaXMuc3RyaW5nc1t0KytdfWA7cmV0dXJuIG59Z2V0IHN0YXRlbWVudCgpe2xldCByPXRoaXMuc3RyaW5ncy5sZW5ndGgsdD0xLG49dGhpcy5zdHJpbmdzWzBdO2Zvcig7dDxyOyluKz1gOiR7dH0ke3RoaXMuc3RyaW5nc1t0KytdfWA7cmV0dXJuIG59Z2V0IHRleHQoKXtsZXQgcj10aGlzLnN0cmluZ3MubGVuZ3RoLHQ9MSxuPXRoaXMuc3RyaW5nc1swXTtmb3IoO3Q8cjspbis9YCQke3R9JHt0aGlzLnN0cmluZ3NbdCsrXX1gO3JldHVybiBufWluc3BlY3QoKXtyZXR1cm57c3FsOnRoaXMuc3FsLHN0YXRlbWVudDp0aGlzLnN0YXRlbWVudCx0ZXh0OnRoaXMudGV4dCx2YWx1ZXM6dGhpcy52YWx1ZXN9fX07ZnVuY3Rpb24gTmEoZSxyPVwiLFwiLHQ9XCJcIixuPVwiXCIpe2lmKGUubGVuZ3RoPT09MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYGpvaW4oW10pYCB0byBiZSBjYWxsZWQgd2l0aCBhbiBhcnJheSBvZiBtdWx0aXBsZSBlbGVtZW50cywgYnV0IGdvdCBhbiBlbXB0eSBhcnJheVwiKTtyZXR1cm4gbmV3IG9lKFt0LC4uLkFycmF5KGUubGVuZ3RoLTEpLmZpbGwociksbl0sZSl9ZnVuY3Rpb24gZW8oZSl7cmV0dXJuIG5ldyBvZShbZV0sW10pfXZhciBMYT1lbyhcIlwiKTtmdW5jdGlvbiBybyhlLC4uLnIpe3JldHVybiBuZXcgb2UoZSxyKX1mdW5jdGlvbiB3dChlKXtyZXR1cm57Z2V0S2V5cygpe3JldHVybiBPYmplY3Qua2V5cyhlKX0sZ2V0UHJvcGVydHlWYWx1ZShyKXtyZXR1cm4gZVtyXX19fWZ1bmN0aW9uIHJlKGUscil7cmV0dXJue2dldEtleXMoKXtyZXR1cm5bZV19LGdldFByb3BlcnR5VmFsdWUoKXtyZXR1cm4gcigpfX19ZnVuY3Rpb24gYXIoZSl7bGV0IHI9bmV3IFBlO3JldHVybntnZXRLZXlzKCl7cmV0dXJuIGUuZ2V0S2V5cygpfSxnZXRQcm9wZXJ0eVZhbHVlKHQpe3JldHVybiByLmdldE9yQ3JlYXRlKHQsKCk9PmUuZ2V0UHJvcGVydHlWYWx1ZSh0KSl9LGdldFByb3BlcnR5RGVzY3JpcHRvcih0KXtyZXR1cm4gZS5nZXRQcm9wZXJ0eURlc2NyaXB0b3I/Lih0KX19fXZhciBMbj17ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9O2Z1bmN0aW9uIEZuKGUpe2xldCByPW5ldyBTZXQoZSk7cmV0dXJue2dldFByb3RvdHlwZU9mOigpPT5PYmplY3QucHJvdG90eXBlLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjooKT0+TG4saGFzOih0LG4pPT5yLmhhcyhuKSxzZXQ6KHQsbixpKT0+ci5hZGQobikmJlJlZmxlY3Quc2V0KHQsbixpKSxvd25LZXlzOigpPT5bLi4ucl19fXZhciBGYT1TeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIik7ZnVuY3Rpb24gaGUoZSxyKXtsZXQgdD1sbShyKSxuPW5ldyBTZXQsaT1uZXcgUHJveHkoZSx7Z2V0KG8scyl7aWYobi5oYXMocykpcmV0dXJuIG9bc107bGV0IGE9dC5nZXQocyk7cmV0dXJuIGE/YS5nZXRQcm9wZXJ0eVZhbHVlKHMpOm9bc119LGhhcyhvLHMpe2lmKG4uaGFzKHMpKXJldHVybiEwO2xldCBhPXQuZ2V0KHMpO3JldHVybiBhP2EuaGFzPy4ocyk/PyEwOlJlZmxlY3QuaGFzKG8scyl9LG93bktleXMobyl7bGV0IHM9TWEoUmVmbGVjdC5vd25LZXlzKG8pLHQpLGE9TWEoQXJyYXkuZnJvbSh0LmtleXMoKSksdCk7cmV0dXJuWy4uLm5ldyBTZXQoWy4uLnMsLi4uYSwuLi5uXSldfSxzZXQobyxzLGEpe3JldHVybiB0LmdldChzKT8uZ2V0UHJvcGVydHlEZXNjcmlwdG9yPy4ocyk/LndyaXRhYmxlPT09ITE/ITE6KG4uYWRkKHMpLFJlZmxlY3Quc2V0KG8scyxhKSl9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLHMpe2xldCBhPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8scyk7aWYoYSYmIWEuY29uZmlndXJhYmxlKXJldHVybiBhO2xldCBsPXQuZ2V0KHMpO3JldHVybiBsP2wuZ2V0UHJvcGVydHlEZXNjcmlwdG9yP3suLi5MbiwuLi5sPy5nZXRQcm9wZXJ0eURlc2NyaXB0b3Iocyl9OkxuOmF9LGRlZmluZVByb3BlcnR5KG8scyxhKXtyZXR1cm4gbi5hZGQocyksUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShvLHMsYSl9LGdldFByb3RvdHlwZU9mOigpPT5PYmplY3QucHJvdG90eXBlfSk7cmV0dXJuIGlbRmFdPWZ1bmN0aW9uKCl7bGV0IG89ey4uLnRoaXN9O3JldHVybiBkZWxldGUgb1tGYV0sb30saX1mdW5jdGlvbiBsbShlKXtsZXQgcj1uZXcgTWFwO2ZvcihsZXQgdCBvZiBlKXtsZXQgbj10LmdldEtleXMoKTtmb3IobGV0IGkgb2YgbilyLnNldChpLHQpfXJldHVybiByfWZ1bmN0aW9uIE1hKGUscil7cmV0dXJuIGUuZmlsdGVyKHQ9PnIuZ2V0KHQpPy5oYXM/Lih0KT8/ITApfWZ1bmN0aW9uIEZyKGUpe3JldHVybntnZXRLZXlzKCl7cmV0dXJuIGV9LGhhcygpe3JldHVybiExfSxnZXRQcm9wZXJ0eVZhbHVlKCl7fX19ZnVuY3Rpb24gTXIoZSxyKXtyZXR1cm57YmF0Y2g6ZSx0cmFuc2FjdGlvbjpyPy5raW5kPT09XCJiYXRjaFwiP3tpc29sYXRpb25MZXZlbDpyLm9wdGlvbnMuaXNvbGF0aW9uTGV2ZWx9OnZvaWQgMH19ZnVuY3Rpb24gJGEoZSl7aWYoZT09PXZvaWQgMClyZXR1cm5cIlwiO2xldCByPV9yKGUpO3JldHVybiBuZXcgQXIoMCx7Y29sb3JzOnZufSkud3JpdGUocikudG9TdHJpbmcoKX12YXIgdW09XCJQMjAzN1wiO2Z1bmN0aW9uICRyKHtlcnJvcjplLHVzZXJfZmFjaW5nX2Vycm9yOnJ9LHQsbil7cmV0dXJuIHIuZXJyb3JfY29kZT9uZXcgeihjbShyLG4pLHtjb2RlOnIuZXJyb3JfY29kZSxjbGllbnRWZXJzaW9uOnQsbWV0YTpyLm1ldGEsYmF0Y2hSZXF1ZXN0SWR4OnIuYmF0Y2hfcmVxdWVzdF9pZHh9KTpuZXcgaihlLHtjbGllbnRWZXJzaW9uOnQsYmF0Y2hSZXF1ZXN0SWR4OnIuYmF0Y2hfcmVxdWVzdF9pZHh9KX1mdW5jdGlvbiBjbShlLHIpe2xldCB0PWUubWVzc2FnZTtyZXR1cm4ocj09PVwicG9zdGdyZXNxbFwifHxyPT09XCJwb3N0Z3Jlc1wifHxyPT09XCJteXNxbFwiKSYmZS5lcnJvcl9jb2RlPT09dW0mJih0Kz1gXG5QcmlzbWEgQWNjZWxlcmF0ZSBoYXMgYnVpbHQtaW4gY29ubmVjdGlvbiBwb29saW5nIHRvIHByZXZlbnQgc3VjaCBlcnJvcnM6IGh0dHBzOi8vcHJpcy5seS9jbGllbnQvZXJyb3ItYWNjZWxlcmF0ZWApLHR9dmFyIHh0PVwiPHVua25vd24+XCI7ZnVuY3Rpb24gcWEoZSl7dmFyIHI9ZS5zcGxpdChgXG5gKTtyZXR1cm4gci5yZWR1Y2UoZnVuY3Rpb24odCxuKXt2YXIgaT1tbShuKXx8Z20obil8fGJtKG4pfHx2bShuKXx8d20obik7cmV0dXJuIGkmJnQucHVzaChpKSx0fSxbXSl9dmFyIHBtPS9eXFxzKmF0ICguKj8pID9cXCgoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWUtZXh0ZW5zaW9ufG5hdGl2ZXxldmFsfHdlYnBhY2t8cnNjfDxhbm9ueW1vdXM+fFxcL3xbYS16XTpcXFxcfFxcXFxcXFxcKS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaSxkbT0vXFwoKFxcUyopKD86OihcXGQrKSkoPzo6KFxcZCspKVxcKS87ZnVuY3Rpb24gbW0oZSl7dmFyIHI9cG0uZXhlYyhlKTtpZighcilyZXR1cm4gbnVsbDt2YXIgdD1yWzJdJiZyWzJdLmluZGV4T2YoXCJuYXRpdmVcIik9PT0wLG49clsyXSYmclsyXS5pbmRleE9mKFwiZXZhbFwiKT09PTAsaT1kbS5leGVjKHJbMl0pO3JldHVybiBuJiZpIT1udWxsJiYoclsyXT1pWzFdLHJbM109aVsyXSxyWzRdPWlbM10pLHtmaWxlOnQ/bnVsbDpyWzJdLG1ldGhvZE5hbWU6clsxXXx8eHQsYXJndW1lbnRzOnQ/W3JbMl1dOltdLGxpbmVOdW1iZXI6clszXT8rclszXTpudWxsLGNvbHVtbjpyWzRdPytyWzRdOm51bGx9fXZhciBmbT0vXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/LispICk/XFwoPygoPzpmaWxlfG1zLWFwcHh8aHR0cHM/fHdlYnBhY2t8cnNjfGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7ZnVuY3Rpb24gZ20oZSl7dmFyIHI9Zm0uZXhlYyhlKTtyZXR1cm4gcj97ZmlsZTpyWzJdLG1ldGhvZE5hbWU6clsxXXx8eHQsYXJndW1lbnRzOltdLGxpbmVOdW1iZXI6K3JbM10sY29sdW1uOnJbNF0/K3JbNF06bnVsbH06bnVsbH12YXIgaG09L15cXHMqKC4qPykoPzpcXCgoLio/KVxcKSk/KD86XnxAKSgoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZXx3ZWJwYWNrfHJzY3xyZXNvdXJjZXxcXFtuYXRpdmUpLio/fFteQF0qYnVuZGxlKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2kseW09LyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2k7ZnVuY3Rpb24gYm0oZSl7dmFyIHI9aG0uZXhlYyhlKTtpZighcilyZXR1cm4gbnVsbDt2YXIgdD1yWzNdJiZyWzNdLmluZGV4T2YoXCIgPiBldmFsXCIpPi0xLG49eW0uZXhlYyhyWzNdKTtyZXR1cm4gdCYmbiE9bnVsbCYmKHJbM109blsxXSxyWzRdPW5bMl0scls1XT1udWxsKSx7ZmlsZTpyWzNdLG1ldGhvZE5hbWU6clsxXXx8eHQsYXJndW1lbnRzOnJbMl0/clsyXS5zcGxpdChcIixcIik6W10sbGluZU51bWJlcjpyWzRdPytyWzRdOm51bGwsY29sdW1uOnJbNV0/K3JbNV06bnVsbH19dmFyIEVtPS9eXFxzKig/OihbXkBdKikoPzpcXCgoLio/KVxcKSk/QCk/KFxcUy4qPyk6KFxcZCspKD86OihcXGQrKSk/XFxzKiQvaTtmdW5jdGlvbiB3bShlKXt2YXIgcj1FbS5leGVjKGUpO3JldHVybiByP3tmaWxlOnJbM10sbWV0aG9kTmFtZTpyWzFdfHx4dCxhcmd1bWVudHM6W10sbGluZU51bWJlcjorcls0XSxjb2x1bW46cls1XT8rcls1XTpudWxsfTpudWxsfXZhciB4bT0vXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/W15cXFxcL10rKD86IFxcW2FzIFxcUytcXF0pPykgKT9cXCg/KC4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2k7ZnVuY3Rpb24gdm0oZSl7dmFyIHI9eG0uZXhlYyhlKTtyZXR1cm4gcj97ZmlsZTpyWzJdLG1ldGhvZE5hbWU6clsxXXx8eHQsYXJndW1lbnRzOltdLGxpbmVOdW1iZXI6K3JbM10sY29sdW1uOnJbNF0/K3JbNF06bnVsbH06bnVsbH12YXIgdG89Y2xhc3N7Z2V0TG9jYXRpb24oKXtyZXR1cm4gbnVsbH19LG5vPWNsYXNze19lcnJvcjtjb25zdHJ1Y3Rvcigpe3RoaXMuX2Vycm9yPW5ldyBFcnJvcn1nZXRMb2NhdGlvbigpe2xldCByPXRoaXMuX2Vycm9yLnN0YWNrO2lmKCFyKXJldHVybiBudWxsO2xldCBuPXFhKHIpLmZpbmQoaT0+e2lmKCFpLmZpbGUpcmV0dXJuITE7bGV0IG89T2koaS5maWxlKTtyZXR1cm4gbyE9PVwiPGFub255bW91cz5cIiYmIW8uaW5jbHVkZXMoXCJAcHJpc21hXCIpJiYhby5pbmNsdWRlcyhcIi9wYWNrYWdlcy9jbGllbnQvc3JjL3J1bnRpbWUvXCIpJiYhby5lbmRzV2l0aChcIi9ydW50aW1lL2JpbmFyeS5qc1wiKSYmIW8uZW5kc1dpdGgoXCIvcnVudGltZS9saWJyYXJ5LmpzXCIpJiYhby5lbmRzV2l0aChcIi9ydW50aW1lL2VkZ2UuanNcIikmJiFvLmVuZHNXaXRoKFwiL3J1bnRpbWUvZWRnZS1lc20uanNcIikmJiFvLnN0YXJ0c1dpdGgoXCJpbnRlcm5hbC9cIikmJiFpLm1ldGhvZE5hbWUuaW5jbHVkZXMoXCJuZXcgXCIpJiYhaS5tZXRob2ROYW1lLmluY2x1ZGVzKFwiZ2V0Q2FsbFNpdGVcIikmJiFpLm1ldGhvZE5hbWUuaW5jbHVkZXMoXCJQcm94eS5cIikmJmkubWV0aG9kTmFtZS5zcGxpdChcIi5cIikubGVuZ3RoPDR9KTtyZXR1cm4hbnx8IW4uZmlsZT9udWxsOntmaWxlTmFtZTpuLmZpbGUsbGluZU51bWJlcjpuLmxpbmVOdW1iZXIsY29sdW1uTnVtYmVyOm4uY29sdW1ufX19O2Z1bmN0aW9uIFplKGUpe3JldHVybiBlPT09XCJtaW5pbWFsXCI/dHlwZW9mICRFbmFibGVkQ2FsbFNpdGU9PVwiZnVuY3Rpb25cIiYmZSE9PVwibWluaW1hbFwiP25ldyAkRW5hYmxlZENhbGxTaXRlOm5ldyB0bzpuZXcgbm99dmFyIGphPXtfYXZnOiEwLF9jb3VudDohMCxfc3VtOiEwLF9taW46ITAsX21heDohMH07ZnVuY3Rpb24gcXIoZT17fSl7bGV0IHI9VG0oZSk7cmV0dXJuIE9iamVjdC5lbnRyaWVzKHIpLnJlZHVjZSgobixbaSxvXSk9PihqYVtpXSE9PXZvaWQgMD9uLnNlbGVjdFtpXT17c2VsZWN0Om99Om5baV09byxuKSx7c2VsZWN0Ont9fSl9ZnVuY3Rpb24gVG0oZT17fSl7cmV0dXJuIHR5cGVvZiBlLl9jb3VudD09XCJib29sZWFuXCI/ey4uLmUsX2NvdW50OntfYWxsOmUuX2NvdW50fX06ZX1mdW5jdGlvbiBNbihlPXt9KXtyZXR1cm4gcj0+KHR5cGVvZiBlLl9jb3VudD09XCJib29sZWFuXCImJihyLl9jb3VudD1yLl9jb3VudC5fYWxsKSxyKX1mdW5jdGlvbiBWYShlLHIpe2xldCB0PU1uKGUpO3JldHVybiByKHthY3Rpb246XCJhZ2dyZWdhdGVcIix1bnBhY2tlcjp0LGFyZ3NNYXBwZXI6cXJ9KShlKX1mdW5jdGlvbiBTbShlPXt9KXtsZXR7c2VsZWN0OnIsLi4udH09ZTtyZXR1cm4gdHlwZW9mIHI9PVwib2JqZWN0XCI/cXIoey4uLnQsX2NvdW50OnJ9KTpxcih7Li4udCxfY291bnQ6e19hbGw6ITB9fSl9ZnVuY3Rpb24gUm0oZT17fSl7cmV0dXJuIHR5cGVvZiBlLnNlbGVjdD09XCJvYmplY3RcIj9yPT5NbihlKShyKS5fY291bnQ6cj0+TW4oZSkocikuX2NvdW50Ll9hbGx9ZnVuY3Rpb24gQmEoZSxyKXtyZXR1cm4gcih7YWN0aW9uOlwiY291bnRcIix1bnBhY2tlcjpSbShlKSxhcmdzTWFwcGVyOlNtfSkoZSl9ZnVuY3Rpb24gQ20oZT17fSl7bGV0IHI9cXIoZSk7aWYoQXJyYXkuaXNBcnJheShyLmJ5KSlmb3IobGV0IHQgb2Ygci5ieSl0eXBlb2YgdD09XCJzdHJpbmdcIiYmKHIuc2VsZWN0W3RdPSEwKTtlbHNlIHR5cGVvZiByLmJ5PT1cInN0cmluZ1wiJiYoci5zZWxlY3Rbci5ieV09ITApO3JldHVybiByfWZ1bmN0aW9uIEFtKGU9e30pe3JldHVybiByPT4odHlwZW9mIGU/Ll9jb3VudD09XCJib29sZWFuXCImJnIuZm9yRWFjaCh0PT57dC5fY291bnQ9dC5fY291bnQuX2FsbH0pLHIpfWZ1bmN0aW9uIFVhKGUscil7cmV0dXJuIHIoe2FjdGlvbjpcImdyb3VwQnlcIix1bnBhY2tlcjpBbShlKSxhcmdzTWFwcGVyOkNtfSkoZSl9ZnVuY3Rpb24gR2EoZSxyLHQpe2lmKHI9PT1cImFnZ3JlZ2F0ZVwiKXJldHVybiBuPT5WYShuLHQpO2lmKHI9PT1cImNvdW50XCIpcmV0dXJuIG49PkJhKG4sdCk7aWYocj09PVwiZ3JvdXBCeVwiKXJldHVybiBuPT5VYShuLHQpfWZ1bmN0aW9uIFFhKGUscil7bGV0IHQ9ci5maWVsZHMuZmlsdGVyKGk9PiFpLnJlbGF0aW9uTmFtZSksbj16cyh0LFwibmFtZVwiKTtyZXR1cm4gbmV3IFByb3h5KHt9LHtnZXQoaSxvKXtpZihvIGluIGl8fHR5cGVvZiBvPT1cInN5bWJvbFwiKXJldHVybiBpW29dO2xldCBzPW5bb107aWYocylyZXR1cm4gbmV3IGR0KGUsbyxzLnR5cGUscy5pc0xpc3Qscy5raW5kPT09XCJlbnVtXCIpfSwuLi5GbihPYmplY3Qua2V5cyhuKSl9KX12YXIgV2E9ZT0+QXJyYXkuaXNBcnJheShlKT9lOmUuc3BsaXQoXCIuXCIpLGlvPShlLHIpPT5XYShyKS5yZWR1Y2UoKHQsbik9PnQmJnRbbl0sZSksSmE9KGUscix0KT0+V2EocikucmVkdWNlUmlnaHQoKG4saSxvLHMpPT5PYmplY3QuYXNzaWduKHt9LGlvKGUscy5zbGljZSgwLG8pKSx7W2ldOm59KSx0KTtmdW5jdGlvbiBJbShlLHIpe3JldHVybiBlPT09dm9pZCAwfHxyPT09dm9pZCAwP1tdOlsuLi5yLFwic2VsZWN0XCIsZV19ZnVuY3Rpb24ga20oZSxyLHQpe3JldHVybiByPT09dm9pZCAwP2U/P3t9OkphKHIsdCxlfHwhMCl9ZnVuY3Rpb24gb28oZSxyLHQsbixpLG8pe2xldCBhPWUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzW3JdLmZpZWxkcy5yZWR1Y2UoKGwsdSk9Pih7Li4ubCxbdS5uYW1lXTp1fSkse30pO3JldHVybiBsPT57bGV0IHU9WmUoZS5fZXJyb3JGb3JtYXQpLGM9SW0obixpKSxwPWttKGwsbyxjKSxkPXQoe2RhdGFQYXRoOmMsY2FsbHNpdGU6dX0pKHApLGY9T20oZSxyKTtyZXR1cm4gbmV3IFByb3h5KGQse2dldChnLGgpe2lmKCFmLmluY2x1ZGVzKGgpKXJldHVybiBnW2hdO2xldCBQPVthW2hdLnR5cGUsdCxoXSxTPVtjLHBdO3JldHVybiBvbyhlLC4uLlAsLi4uUyl9LC4uLkZuKFsuLi5mLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGQpXSl9KX19ZnVuY3Rpb24gT20oZSxyKXtyZXR1cm4gZS5fcnVudGltZURhdGFNb2RlbC5tb2RlbHNbcl0uZmllbGRzLmZpbHRlcih0PT50LmtpbmQ9PT1cIm9iamVjdFwiKS5tYXAodD0+dC5uYW1lKX12YXIgRG09W1wiZmluZFVuaXF1ZVwiLFwiZmluZFVuaXF1ZU9yVGhyb3dcIixcImZpbmRGaXJzdFwiLFwiZmluZEZpcnN0T3JUaHJvd1wiLFwiY3JlYXRlXCIsXCJ1cGRhdGVcIixcInVwc2VydFwiLFwiZGVsZXRlXCJdLF9tPVtcImFnZ3JlZ2F0ZVwiLFwiY291bnRcIixcImdyb3VwQnlcIl07ZnVuY3Rpb24gc28oZSxyKXtsZXQgdD1lLl9leHRlbnNpb25zLmdldEFsbE1vZGVsRXh0ZW5zaW9ucyhyKT8/e30sbj1bTm0oZSxyKSxGbShlLHIpLHd0KHQpLHJlKFwibmFtZVwiLCgpPT5yKSxyZShcIiRuYW1lXCIsKCk9PnIpLHJlKFwiJHBhcmVudFwiLCgpPT5lLl9hcHBsaWVkUGFyZW50KV07cmV0dXJuIGhlKHt9LG4pfWZ1bmN0aW9uIE5tKGUscil7bGV0IHQ9U2Uociksbj1PYmplY3Qua2V5cyhDcikuY29uY2F0KFwiY291bnRcIik7cmV0dXJue2dldEtleXMoKXtyZXR1cm4gbn0sZ2V0UHJvcGVydHlWYWx1ZShpKXtsZXQgbz1pLHM9YT0+bD0+e2xldCB1PVplKGUuX2Vycm9yRm9ybWF0KTtyZXR1cm4gZS5fY3JlYXRlUHJpc21hUHJvbWlzZShjPT57bGV0IHA9e2FyZ3M6bCxkYXRhUGF0aDpbXSxhY3Rpb246byxtb2RlbDpyLGNsaWVudE1ldGhvZDpgJHt0fS4ke2l9YCxqc01vZGVsTmFtZTp0LHRyYW5zYWN0aW9uOmMsY2FsbHNpdGU6dX07cmV0dXJuIGUuX3JlcXVlc3Qoey4uLnAsLi4uYX0pfSx7YWN0aW9uOm8sYXJnczpsLG1vZGVsOnJ9KX07cmV0dXJuIERtLmluY2x1ZGVzKG8pP29vKGUscixzKTpMbShpKT9HYShlLGkscyk6cyh7fSl9fX1mdW5jdGlvbiBMbShlKXtyZXR1cm4gX20uaW5jbHVkZXMoZSl9ZnVuY3Rpb24gRm0oZSxyKXtyZXR1cm4gYXIocmUoXCJmaWVsZHNcIiwoKT0+e2xldCB0PWUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzW3JdO3JldHVybiBRYShyLHQpfSkpfWZ1bmN0aW9uIEhhKGUpe3JldHVybiBlLnJlcGxhY2UoL14uLyxyPT5yLnRvVXBwZXJDYXNlKCkpfXZhciBhbz1TeW1ib2woKTtmdW5jdGlvbiB2dChlKXtsZXQgcj1bTW0oZSksJG0oZSkscmUoYW8sKCk9PmUpLHJlKFwiJHBhcmVudFwiLCgpPT5lLl9hcHBsaWVkUGFyZW50KV0sdD1lLl9leHRlbnNpb25zLmdldEFsbENsaWVudEV4dGVuc2lvbnMoKTtyZXR1cm4gdCYmci5wdXNoKHd0KHQpKSxoZShlLHIpfWZ1bmN0aW9uIE1tKGUpe2xldCByPU9iamVjdC5nZXRQcm90b3R5cGVPZihlLl9vcmlnaW5hbENsaWVudCksdD1bLi4ubmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKSldO3JldHVybntnZXRLZXlzKCl7cmV0dXJuIHR9LGdldFByb3BlcnR5VmFsdWUobil7cmV0dXJuIGVbbl19fX1mdW5jdGlvbiAkbShlKXtsZXQgcj1PYmplY3Qua2V5cyhlLl9ydW50aW1lRGF0YU1vZGVsLm1vZGVscyksdD1yLm1hcChTZSksbj1bLi4ubmV3IFNldChyLmNvbmNhdCh0KSldO3JldHVybiBhcih7Z2V0S2V5cygpe3JldHVybiBufSxnZXRQcm9wZXJ0eVZhbHVlKGkpe2xldCBvPUhhKGkpO2lmKGUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzW29dIT09dm9pZCAwKXJldHVybiBzbyhlLG8pO2lmKGUuX3J1bnRpbWVEYXRhTW9kZWwubW9kZWxzW2ldIT09dm9pZCAwKXJldHVybiBzbyhlLGkpfSxnZXRQcm9wZXJ0eURlc2NyaXB0b3IoaSl7aWYoIXQuaW5jbHVkZXMoaSkpcmV0dXJue2VudW1lcmFibGU6ITF9fX0pfWZ1bmN0aW9uIEthKGUpe3JldHVybiBlW2FvXT9lW2FvXTplfWZ1bmN0aW9uIFlhKGUpe2lmKHR5cGVvZiBlPT1cImZ1bmN0aW9uXCIpcmV0dXJuIGUodGhpcyk7aWYoZS5jbGllbnQ/Ll9fQWNjZWxlcmF0ZUVuZ2luZSl7bGV0IHQ9ZS5jbGllbnQuX19BY2NlbGVyYXRlRW5naW5lO3RoaXMuX29yaWdpbmFsQ2xpZW50Ll9lbmdpbmU9bmV3IHQodGhpcy5fb3JpZ2luYWxDbGllbnQuX2FjY2VsZXJhdGVFbmdpbmVDb25maWcpfWxldCByPU9iamVjdC5jcmVhdGUodGhpcy5fb3JpZ2luYWxDbGllbnQse19leHRlbnNpb25zOnt2YWx1ZTp0aGlzLl9leHRlbnNpb25zLmFwcGVuZChlKX0sX2FwcGxpZWRQYXJlbnQ6e3ZhbHVlOnRoaXMsY29uZmlndXJhYmxlOiEwfSwkdXNlOnt2YWx1ZTp2b2lkIDB9LCRvbjp7dmFsdWU6dm9pZCAwfX0pO3JldHVybiB2dChyKX1mdW5jdGlvbiB6YSh7cmVzdWx0OmUsbW9kZWxOYW1lOnIsc2VsZWN0OnQsb21pdDpuLGV4dGVuc2lvbnM6aX0pe2xldCBvPWkuZ2V0QWxsQ29tcHV0ZWRGaWVsZHMocik7aWYoIW8pcmV0dXJuIGU7bGV0IHM9W10sYT1bXTtmb3IobGV0IGwgb2YgT2JqZWN0LnZhbHVlcyhvKSl7aWYobil7aWYobltsLm5hbWVdKWNvbnRpbnVlO2xldCB1PWwubmVlZHMuZmlsdGVyKGM9Pm5bY10pO3UubGVuZ3RoPjAmJmEucHVzaChGcih1KSl9ZWxzZSBpZih0KXtpZighdFtsLm5hbWVdKWNvbnRpbnVlO2xldCB1PWwubmVlZHMuZmlsdGVyKGM9PiF0W2NdKTt1Lmxlbmd0aD4wJiZhLnB1c2goRnIodSkpfXFtKGUsbC5uZWVkcykmJnMucHVzaChqbShsLGhlKGUscykpKX1yZXR1cm4gcy5sZW5ndGg+MHx8YS5sZW5ndGg+MD9oZShlLFsuLi5zLC4uLmFdKTplfWZ1bmN0aW9uIHFtKGUscil7cmV0dXJuIHIuZXZlcnkodD0+TWkoZSx0KSl9ZnVuY3Rpb24gam0oZSxyKXtyZXR1cm4gYXIocmUoZS5uYW1lLCgpPT5lLmNvbXB1dGUocikpKX1mdW5jdGlvbiAkbih7dmlzaXRvcjplLHJlc3VsdDpyLGFyZ3M6dCxydW50aW1lRGF0YU1vZGVsOm4sbW9kZWxOYW1lOml9KXtpZihBcnJheS5pc0FycmF5KHIpKXtmb3IobGV0IHM9MDtzPHIubGVuZ3RoO3MrKylyW3NdPSRuKHtyZXN1bHQ6cltzXSxhcmdzOnQsbW9kZWxOYW1lOmkscnVudGltZURhdGFNb2RlbDpuLHZpc2l0b3I6ZX0pO3JldHVybiByfWxldCBvPWUocixpLHQpPz9yO3JldHVybiB0LmluY2x1ZGUmJlphKHtpbmNsdWRlT3JTZWxlY3Q6dC5pbmNsdWRlLHJlc3VsdDpvLHBhcmVudE1vZGVsTmFtZTppLHJ1bnRpbWVEYXRhTW9kZWw6bix2aXNpdG9yOmV9KSx0LnNlbGVjdCYmWmEoe2luY2x1ZGVPclNlbGVjdDp0LnNlbGVjdCxyZXN1bHQ6byxwYXJlbnRNb2RlbE5hbWU6aSxydW50aW1lRGF0YU1vZGVsOm4sdmlzaXRvcjplfSksb31mdW5jdGlvbiBaYSh7aW5jbHVkZU9yU2VsZWN0OmUscmVzdWx0OnIscGFyZW50TW9kZWxOYW1lOnQscnVudGltZURhdGFNb2RlbDpuLHZpc2l0b3I6aX0pe2ZvcihsZXRbbyxzXW9mIE9iamVjdC5lbnRyaWVzKGUpKXtpZighc3x8cltvXT09bnVsbHx8UmUocykpY29udGludWU7bGV0IGw9bi5tb2RlbHNbdF0uZmllbGRzLmZpbmQoYz0+Yy5uYW1lPT09byk7aWYoIWx8fGwua2luZCE9PVwib2JqZWN0XCJ8fCFsLnJlbGF0aW9uTmFtZSljb250aW51ZTtsZXQgdT10eXBlb2Ygcz09XCJvYmplY3RcIj9zOnt9O3Jbb109JG4oe3Zpc2l0b3I6aSxyZXN1bHQ6cltvXSxhcmdzOnUsbW9kZWxOYW1lOmwudHlwZSxydW50aW1lRGF0YU1vZGVsOm59KX19ZnVuY3Rpb24gWGEoe3Jlc3VsdDplLG1vZGVsTmFtZTpyLGFyZ3M6dCxleHRlbnNpb25zOm4scnVudGltZURhdGFNb2RlbDppLGdsb2JhbE9taXQ6b30pe3JldHVybiBuLmlzRW1wdHkoKXx8ZT09bnVsbHx8dHlwZW9mIGUhPVwib2JqZWN0XCJ8fCFpLm1vZGVsc1tyXT9lOiRuKHtyZXN1bHQ6ZSxhcmdzOnQ/P3t9LG1vZGVsTmFtZTpyLHJ1bnRpbWVEYXRhTW9kZWw6aSx2aXNpdG9yOihhLGwsdSk9PntsZXQgYz1TZShsKTtyZXR1cm4gemEoe3Jlc3VsdDphLG1vZGVsTmFtZTpjLHNlbGVjdDp1LnNlbGVjdCxvbWl0OnUuc2VsZWN0P3ZvaWQgMDp7Li4ubz8uW2NdLC4uLnUub21pdH0sZXh0ZW5zaW9uczpufSl9fSl9dmFyIFZtPVtcIiRjb25uZWN0XCIsXCIkZGlzY29ubmVjdFwiLFwiJG9uXCIsXCIkdHJhbnNhY3Rpb25cIixcIiR1c2VcIixcIiRleHRlbmRzXCJdLGVsPVZtO2Z1bmN0aW9uIHJsKGUpe2lmKGUgaW5zdGFuY2VvZiBvZSlyZXR1cm4gQm0oZSk7aWYoTm4oZSkpcmV0dXJuIFVtKGUpO2lmKEFycmF5LmlzQXJyYXkoZSkpe2xldCB0PVtlWzBdXTtmb3IobGV0IG49MTtuPGUubGVuZ3RoO24rKyl0W25dPVB0KGVbbl0pO3JldHVybiB0fWxldCByPXt9O2ZvcihsZXQgdCBpbiBlKXJbdF09UHQoZVt0XSk7cmV0dXJuIHJ9ZnVuY3Rpb24gQm0oZSl7cmV0dXJuIG5ldyBvZShlLnN0cmluZ3MsZS52YWx1ZXMpfWZ1bmN0aW9uIFVtKGUpe3JldHVybiBuZXcgRXQoZS5zcWwsZS52YWx1ZXMpfWZ1bmN0aW9uIFB0KGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxlPT1udWxsfHxlIGluc3RhbmNlb2YgRmV8fERyKGUpKXJldHVybiBlO2lmKFJyKGUpKXJldHVybiBuZXcgdmUoZS50b0ZpeGVkKCkpO2lmKFNyKGUpKXJldHVybiBuZXcgRGF0ZSgrZSk7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXJldHVybiBlLnNsaWNlKDApO2lmKEFycmF5LmlzQXJyYXkoZSkpe2xldCByPWUubGVuZ3RoLHQ7Zm9yKHQ9QXJyYXkocik7ci0tOyl0W3JdPVB0KGVbcl0pO3JldHVybiB0fWlmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXtsZXQgcj17fTtmb3IobGV0IHQgaW4gZSl0PT09XCJfX3Byb3RvX19cIj9PYmplY3QuZGVmaW5lUHJvcGVydHkocix0LHt2YWx1ZTpQdChlW3RdKSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx3cml0YWJsZTohMH0pOnJbdF09UHQoZVt0XSk7cmV0dXJuIHJ9X2UoZSxcIlVua25vd24gdmFsdWVcIil9ZnVuY3Rpb24gbmwoZSxyLHQsbj0wKXtyZXR1cm4gZS5fY3JlYXRlUHJpc21hUHJvbWlzZShpPT57bGV0IG89ci5jdXN0b21EYXRhUHJveHlGZXRjaDtyZXR1cm5cInRyYW5zYWN0aW9uXCJpbiByJiZpIT09dm9pZCAwJiYoci50cmFuc2FjdGlvbj8ua2luZD09PVwiYmF0Y2hcIiYmci50cmFuc2FjdGlvbi5sb2NrLnRoZW4oKSxyLnRyYW5zYWN0aW9uPWkpLG49PT10Lmxlbmd0aD9lLl9leGVjdXRlUmVxdWVzdChyKTp0W25dKHttb2RlbDpyLm1vZGVsLG9wZXJhdGlvbjpyLm1vZGVsP3IuYWN0aW9uOnIuY2xpZW50TWV0aG9kLGFyZ3M6cmwoci5hcmdzPz97fSksX19pbnRlcm5hbFBhcmFtczpyLHF1ZXJ5OihzLGE9cik9PntsZXQgbD1hLmN1c3RvbURhdGFQcm94eUZldGNoO3JldHVybiBhLmN1c3RvbURhdGFQcm94eUZldGNoPWFsKG8sbCksYS5hcmdzPXMsbmwoZSxhLHQsbisxKX19KX0pfWZ1bmN0aW9uIGlsKGUscil7bGV0e2pzTW9kZWxOYW1lOnQsYWN0aW9uOm4sY2xpZW50TWV0aG9kOml9PXIsbz10P246aTtpZihlLl9leHRlbnNpb25zLmlzRW1wdHkoKSlyZXR1cm4gZS5fZXhlY3V0ZVJlcXVlc3Qocik7bGV0IHM9ZS5fZXh0ZW5zaW9ucy5nZXRBbGxRdWVyeUNhbGxiYWNrcyh0Pz9cIiRub25lXCIsbyk7cmV0dXJuIG5sKGUscixzKX1mdW5jdGlvbiBvbChlKXtyZXR1cm4gcj0+e2xldCB0PXtyZXF1ZXN0czpyfSxuPXJbMF0uZXh0ZW5zaW9ucy5nZXRBbGxCYXRjaFF1ZXJ5Q2FsbGJhY2tzKCk7cmV0dXJuIG4ubGVuZ3RoP3NsKHQsbiwwLGUpOmUodCl9fWZ1bmN0aW9uIHNsKGUscix0LG4pe2lmKHQ9PT1yLmxlbmd0aClyZXR1cm4gbihlKTtsZXQgaT1lLmN1c3RvbURhdGFQcm94eUZldGNoLG89ZS5yZXF1ZXN0c1swXS50cmFuc2FjdGlvbjtyZXR1cm4gclt0XSh7YXJnczp7cXVlcmllczplLnJlcXVlc3RzLm1hcChzPT4oe21vZGVsOnMubW9kZWxOYW1lLG9wZXJhdGlvbjpzLmFjdGlvbixhcmdzOnMuYXJnc30pKSx0cmFuc2FjdGlvbjpvP3tpc29sYXRpb25MZXZlbDpvLmtpbmQ9PT1cImJhdGNoXCI/by5pc29sYXRpb25MZXZlbDp2b2lkIDB9OnZvaWQgMH0sX19pbnRlcm5hbFBhcmFtczplLHF1ZXJ5KHMsYT1lKXtsZXQgbD1hLmN1c3RvbURhdGFQcm94eUZldGNoO3JldHVybiBhLmN1c3RvbURhdGFQcm94eUZldGNoPWFsKGksbCksc2woYSxyLHQrMSxuKX19KX12YXIgdGw9ZT0+ZTtmdW5jdGlvbiBhbChlPXRsLHI9dGwpe3JldHVybiB0PT5lKHIodCkpfXZhciBsbD1OKFwicHJpc21hOmNsaWVudFwiKSx1bD17VmVyY2VsOlwidmVyY2VsXCIsXCJOZXRsaWZ5IENJXCI6XCJuZXRsaWZ5XCJ9O2Z1bmN0aW9uIGNsKHtwb3N0aW5zdGFsbDplLGNpTmFtZTpyLGNsaWVudFZlcnNpb246dH0pe2lmKGxsKFwiY2hlY2tQbGF0Zm9ybUNhY2hpbmc6cG9zdGluc3RhbGxcIixlKSxsbChcImNoZWNrUGxhdGZvcm1DYWNoaW5nOmNpTmFtZVwiLHIpLGU9PT0hMCYmciYmciBpbiB1bCl7bGV0IG49YFByaXNtYSBoYXMgZGV0ZWN0ZWQgdGhhdCB0aGlzIHByb2plY3Qgd2FzIGJ1aWx0IG9uICR7cn0sIHdoaWNoIGNhY2hlcyBkZXBlbmRlbmNpZXMuIFRoaXMgbGVhZHMgdG8gYW4gb3V0ZGF0ZWQgUHJpc21hIENsaWVudCBiZWNhdXNlIFByaXNtYSdzIGF1dG8tZ2VuZXJhdGlvbiBpc24ndCB0cmlnZ2VyZWQuIFRvIGZpeCB0aGlzLCBtYWtlIHN1cmUgdG8gcnVuIHRoZSBcXGBwcmlzbWEgZ2VuZXJhdGVcXGAgY29tbWFuZCBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3MuXG5cbkxlYXJuIGhvdzogaHR0cHM6Ly9wcmlzLmx5L2QvJHt1bFtyXX0tYnVpbGRgO3Rocm93IGNvbnNvbGUuZXJyb3IobiksbmV3IFQobix0KX19ZnVuY3Rpb24gcGwoZSxyKXtyZXR1cm4gZT9lLmRhdGFzb3VyY2VzP2UuZGF0YXNvdXJjZXM6ZS5kYXRhc291cmNlVXJsP3tbclswXV06e3VybDplLmRhdGFzb3VyY2VVcmx9fTp7fTp7fX12YXIgR209KCk9Pmdsb2JhbFRoaXMucHJvY2Vzcz8ucmVsZWFzZT8ubmFtZT09PVwibm9kZVwiLFFtPSgpPT4hIWdsb2JhbFRoaXMuQnVufHwhIWdsb2JhbFRoaXMucHJvY2Vzcz8udmVyc2lvbnM/LmJ1bixXbT0oKT0+ISFnbG9iYWxUaGlzLkRlbm8sSm09KCk9PnR5cGVvZiBnbG9iYWxUaGlzLk5ldGxpZnk9PVwib2JqZWN0XCIsSG09KCk9PnR5cGVvZiBnbG9iYWxUaGlzLkVkZ2VSdW50aW1lPT1cIm9iamVjdFwiLEttPSgpPT5nbG9iYWxUaGlzLm5hdmlnYXRvcj8udXNlckFnZW50PT09XCJDbG91ZGZsYXJlLVdvcmtlcnNcIjtmdW5jdGlvbiBZbSgpe3JldHVybltbSm0sXCJuZXRsaWZ5XCJdLFtIbSxcImVkZ2UtbGlnaHRcIl0sW0ttLFwid29ya2VyZFwiXSxbV20sXCJkZW5vXCJdLFtRbSxcImJ1blwiXSxbR20sXCJub2RlXCJdXS5mbGF0TWFwKHQ9PnRbMF0oKT9bdFsxXV06W10pLmF0KDApPz9cIlwifXZhciB6bT17bm9kZTpcIk5vZGUuanNcIix3b3JrZXJkOlwiQ2xvdWRmbGFyZSBXb3JrZXJzXCIsZGVubzpcIkRlbm8gYW5kIERlbm8gRGVwbG95XCIsbmV0bGlmeTpcIk5ldGxpZnkgRWRnZSBGdW5jdGlvbnNcIixcImVkZ2UtbGlnaHRcIjpcIkVkZ2UgUnVudGltZSAoVmVyY2VsIEVkZ2UgRnVuY3Rpb25zLCBWZXJjZWwgRWRnZSBNaWRkbGV3YXJlLCBOZXh0LmpzIChQYWdlcyBSb3V0ZXIpIEVkZ2UgQVBJIFJvdXRlcywgTmV4dC5qcyAoQXBwIFJvdXRlcikgRWRnZSBSb3V0ZSBIYW5kbGVycyBvciBOZXh0LmpzIE1pZGRsZXdhcmUpXCJ9O2Z1bmN0aW9uIHFuKCl7bGV0IGU9WW0oKTtyZXR1cm57aWQ6ZSxwcmV0dHlOYW1lOnptW2VdfHxlLGlzRWRnZTpbXCJ3b3JrZXJkXCIsXCJkZW5vXCIsXCJuZXRsaWZ5XCIsXCJlZGdlLWxpZ2h0XCJdLmluY2x1ZGVzKGUpfX12YXIgaGw9ayhyZXF1aXJlKFwibm9kZTpmc1wiKSksVHQ9ayhyZXF1aXJlKFwibm9kZTpwYXRoXCIpKTtmdW5jdGlvbiBqbihlKXtsZXR7cnVudGltZUJpbmFyeVRhcmdldDpyfT1lO3JldHVybmBBZGQgXCIke3J9XCIgdG8gXFxgYmluYXJ5VGFyZ2V0c1xcYCBpbiB0aGUgXCJzY2hlbWEucHJpc21hXCIgZmlsZSBhbmQgcnVuIFxcYHByaXNtYSBnZW5lcmF0ZVxcYCBhZnRlciBzYXZpbmcgaXQ6XG5cbiR7Wm0oZSl9YH1mdW5jdGlvbiBabShlKXtsZXR7Z2VuZXJhdG9yOnIsZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0czp0LHJ1bnRpbWVCaW5hcnlUYXJnZXQ6bn09ZSxpPXtmcm9tRW52VmFyOm51bGwsdmFsdWU6bn0sbz1bLi4udCxpXTtyZXR1cm4gQWkoey4uLnIsYmluYXJ5VGFyZ2V0czpvfSl9ZnVuY3Rpb24gWGUoZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6cn09ZTtyZXR1cm5gUHJpc21hIENsaWVudCBjb3VsZCBub3QgbG9jYXRlIHRoZSBRdWVyeSBFbmdpbmUgZm9yIHJ1bnRpbWUgXCIke3J9XCIuYH1mdW5jdGlvbiBlcihlKXtsZXR7c2VhcmNoZWRMb2NhdGlvbnM6cn09ZTtyZXR1cm5gVGhlIGZvbGxvd2luZyBsb2NhdGlvbnMgaGF2ZSBiZWVuIHNlYXJjaGVkOlxuJHtbLi4ubmV3IFNldChyKV0ubWFwKGk9PmAgICR7aX1gKS5qb2luKGBcbmApfWB9ZnVuY3Rpb24gZGwoZSl7bGV0e3J1bnRpbWVCaW5hcnlUYXJnZXQ6cn09ZTtyZXR1cm5gJHtYZShlKX1cblxuVGhpcyBoYXBwZW5lZCBiZWNhdXNlIFxcYGJpbmFyeVRhcmdldHNcXGAgaGF2ZSBiZWVuIHBpbm5lZCwgYnV0IHRoZSBhY3R1YWwgZGVwbG95bWVudCBhbHNvIHJlcXVpcmVkIFwiJHtyfVwiLlxuJHtqbihlKX1cblxuJHtlcihlKX1gfWZ1bmN0aW9uIFZuKGUpe3JldHVybmBXZSB3b3VsZCBhcHByZWNpYXRlIGlmIHlvdSBjb3VsZCB0YWtlIHRoZSB0aW1lIHRvIHNoYXJlIHNvbWUgaW5mb3JtYXRpb24gd2l0aCB1cy5cblBsZWFzZSBoZWxwIHVzIGJ5IGFuc3dlcmluZyBhIGZldyBxdWVzdGlvbnM6IGh0dHBzOi8vcHJpcy5seS8ke2V9YH1mdW5jdGlvbiBCbihlKXtsZXR7ZXJyb3JTdGFjazpyfT1lO3JldHVybiByPy5tYXRjaCgvXFwvXFwubmV4dHxcXC9uZXh0QHxcXC9uZXh0XFwvLyk/YFxuXG5XZSBkZXRlY3RlZCB0aGF0IHlvdSBhcmUgdXNpbmcgTmV4dC5qcywgbGVhcm4gaG93IHRvIGZpeCB0aGlzOiBodHRwczovL3ByaXMubHkvZC9lbmdpbmUtbm90LWZvdW5kLW5leHRqcy5gOlwiXCJ9ZnVuY3Rpb24gbWwoZSl7bGV0e3F1ZXJ5RW5naW5lTmFtZTpyfT1lO3JldHVybmAke1hlKGUpfSR7Qm4oZSl9XG5cblRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1bmRsZXIgdGhhdCBoYXMgbm90IGNvcGllZCBcIiR7cn1cIiBuZXh0IHRvIHRoZSByZXN1bHRpbmcgYnVuZGxlLlxuRW5zdXJlIHRoYXQgXCIke3J9XCIgaGFzIGJlZW4gY29waWVkIG5leHQgdG8gdGhlIGJ1bmRsZSBvciBpbiBcIiR7ZS5leHBlY3RlZExvY2F0aW9ufVwiLlxuXG4ke1ZuKFwiZW5naW5lLW5vdC1mb3VuZC1idW5kbGVyLWludmVzdGlnYXRpb25cIil9XG5cbiR7ZXIoZSl9YH1mdW5jdGlvbiBmbChlKXtsZXR7cnVudGltZUJpbmFyeVRhcmdldDpyLGdlbmVyYXRvckJpbmFyeVRhcmdldHM6dH09ZSxuPXQuZmluZChpPT5pLm5hdGl2ZSk7cmV0dXJuYCR7WGUoZSl9XG5cblRoaXMgaGFwcGVuZWQgYmVjYXVzZSBQcmlzbWEgQ2xpZW50IHdhcyBnZW5lcmF0ZWQgZm9yIFwiJHtuPy52YWx1ZT8/XCJ1bmtub3duXCJ9XCIsIGJ1dCB0aGUgYWN0dWFsIGRlcGxveW1lbnQgcmVxdWlyZWQgXCIke3J9XCIuXG4ke2puKGUpfVxuXG4ke2VyKGUpfWB9ZnVuY3Rpb24gZ2woZSl7bGV0e3F1ZXJ5RW5naW5lTmFtZTpyfT1lO3JldHVybmAke1hlKGUpfSR7Qm4oZSl9XG5cblRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSB0b29saW5nIHRoYXQgaGFzIG5vdCBjb3BpZWQgXCIke3J9XCIgdG8gdGhlIGRlcGxveW1lbnQgZm9sZGVyLlxuRW5zdXJlIHRoYXQgeW91IHJhbiBcXGBwcmlzbWEgZ2VuZXJhdGVcXGAgYW5kIHRoYXQgXCIke3J9XCIgaGFzIGJlZW4gY29waWVkIHRvIFwiJHtlLmV4cGVjdGVkTG9jYXRpb259XCIuXG5cbiR7Vm4oXCJlbmdpbmUtbm90LWZvdW5kLXRvb2xpbmctaW52ZXN0aWdhdGlvblwiKX1cblxuJHtlcihlKX1gfXZhciBYbT1OKFwicHJpc21hOmNsaWVudDplbmdpbmVzOnJlc29sdmVFbmdpbmVQYXRoXCIpLGVmPSgpPT5uZXcgUmVnRXhwKFwicnVudGltZVtcXFxcXFxcXC9dbGlicmFyeVxcXFwubT9qcyRcIik7YXN5bmMgZnVuY3Rpb24geWwoZSxyKXtsZXQgdD17YmluYXJ5OnByb2Nlc3MuZW52LlBSSVNNQV9RVUVSWV9FTkdJTkVfQklOQVJZLGxpYnJhcnk6cHJvY2Vzcy5lbnYuUFJJU01BX1FVRVJZX0VOR0lORV9MSUJSQVJZfVtlXT8/ci5wcmlzbWFQYXRoO2lmKHQhPT12b2lkIDApcmV0dXJuIHQ7bGV0e2VuZ2luZVBhdGg6bixzZWFyY2hlZExvY2F0aW9uczppfT1hd2FpdCByZihlLHIpO2lmKFhtKFwiZW5naW5lUGF0aFwiLG4pLG4hPT12b2lkIDAmJmU9PT1cImJpbmFyeVwiJiZ2aShuKSxuIT09dm9pZCAwKXJldHVybiByLnByaXNtYVBhdGg9bjtsZXQgbz1hd2FpdCBpcigpLHM9ci5nZW5lcmF0b3I/LmJpbmFyeVRhcmdldHM/P1tdLGE9cy5zb21lKGQ9PmQubmF0aXZlKSxsPSFzLnNvbWUoZD0+ZC52YWx1ZT09PW8pLHU9X19maWxlbmFtZS5tYXRjaChlZigpKT09PW51bGwsYz17c2VhcmNoZWRMb2NhdGlvbnM6aSxnZW5lcmF0b3JCaW5hcnlUYXJnZXRzOnMsZ2VuZXJhdG9yOnIuZ2VuZXJhdG9yLHJ1bnRpbWVCaW5hcnlUYXJnZXQ6byxxdWVyeUVuZ2luZU5hbWU6YmwoZSxvKSxleHBlY3RlZExvY2F0aW9uOlR0LmRlZmF1bHQucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSxyLmRpcm5hbWUpLGVycm9yU3RhY2s6bmV3IEVycm9yKCkuc3RhY2t9LHA7dGhyb3cgYSYmbD9wPWZsKGMpOmw/cD1kbChjKTp1P3A9bWwoYyk6cD1nbChjKSxuZXcgVChwLHIuY2xpZW50VmVyc2lvbil9YXN5bmMgZnVuY3Rpb24gcmYoZW5naW5lVHlwZSxjb25maWcpe2xldCBiaW5hcnlUYXJnZXQ9YXdhaXQgaXIoKSxzZWFyY2hlZExvY2F0aW9ucz1bXSxkaXJuYW1lPWV2YWwoXCJfX2Rpcm5hbWVcIiksc2VhcmNoTG9jYXRpb25zPVtjb25maWcuZGlybmFtZSxUdC5kZWZhdWx0LnJlc29sdmUoZGlybmFtZSxcIi4uXCIpLGNvbmZpZy5nZW5lcmF0b3I/Lm91dHB1dD8udmFsdWU/P2Rpcm5hbWUsVHQuZGVmYXVsdC5yZXNvbHZlKGRpcm5hbWUsXCIuLi8uLi8uLi8ucHJpc21hL2NsaWVudFwiKSxcIi90bXAvcHJpc21hLWVuZ2luZXNcIixjb25maWcuY3dkXTtfX2ZpbGVuYW1lLmluY2x1ZGVzKFwicmVzb2x2ZUVuZ2luZVBhdGhcIikmJnNlYXJjaExvY2F0aW9ucy5wdXNoKGdzKCkpO2ZvcihsZXQgZSBvZiBzZWFyY2hMb2NhdGlvbnMpe2xldCByPWJsKGVuZ2luZVR5cGUsYmluYXJ5VGFyZ2V0KSx0PVR0LmRlZmF1bHQuam9pbihlLHIpO2lmKHNlYXJjaGVkTG9jYXRpb25zLnB1c2goZSksaGwuZGVmYXVsdC5leGlzdHNTeW5jKHQpKXJldHVybntlbmdpbmVQYXRoOnQsc2VhcmNoZWRMb2NhdGlvbnN9fXJldHVybntlbmdpbmVQYXRoOnZvaWQgMCxzZWFyY2hlZExvY2F0aW9uc319ZnVuY3Rpb24gYmwoZSxyKXtyZXR1cm4gZT09PVwibGlicmFyeVwiP0J0KHIsXCJmc1wiKTpgcXVlcnktZW5naW5lLSR7cn0ke3I9PT1cIndpbmRvd3NcIj9cIi5leGVcIjpcIlwifWB9dmFyIGxvPWsoa2koKSk7ZnVuY3Rpb24gRWwoZSl7cmV0dXJuIGU/ZS5yZXBsYWNlKC9cIi4qXCIvZywnXCJYXCInKS5yZXBsYWNlKC9bXFxzOlxcW10oWystXT8oWzAtOV0qWy5dKT9bMC05XSspL2cscj0+YCR7clswXX01YCk6XCJcIn1mdW5jdGlvbiB3bChlKXtyZXR1cm4gZS5zcGxpdChgXG5gKS5tYXAocj0+ci5yZXBsYWNlKC9eXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKVxccyovLFwiXCIpLnJlcGxhY2UoL1xcK1xcZCtcXHMqbXMkLyxcIlwiKSkuam9pbihgXG5gKX12YXIgeGw9ayhMcygpKTtmdW5jdGlvbiB2bCh7dGl0bGU6ZSx1c2VyOnI9XCJwcmlzbWFcIixyZXBvOnQ9XCJwcmlzbWFcIix0ZW1wbGF0ZTpuPVwiYnVnX3JlcG9ydC55bWxcIixib2R5Oml9KXtyZXR1cm4oMCx4bC5kZWZhdWx0KSh7dXNlcjpyLHJlcG86dCx0ZW1wbGF0ZTpuLHRpdGxlOmUsYm9keTppfSl9ZnVuY3Rpb24gUGwoe3ZlcnNpb246ZSxiaW5hcnlUYXJnZXQ6cix0aXRsZTp0LGRlc2NyaXB0aW9uOm4sZW5naW5lVmVyc2lvbjppLGRhdGFiYXNlOm8scXVlcnk6c30pe2xldCBhPUdvKDZlMy0ocz8ubGVuZ3RoPz8wKSksbD13bCgoMCxsby5kZWZhdWx0KShhKSksdT1uP2AjIERlc2NyaXB0aW9uXG5cXGBcXGBcXGBcbiR7bn1cblxcYFxcYFxcYGA6XCJcIixjPSgwLGxvLmRlZmF1bHQpKGBIaSBQcmlzbWEgVGVhbSEgTXkgUHJpc21hIENsaWVudCBqdXN0IGNyYXNoZWQuIFRoaXMgaXMgdGhlIHJlcG9ydDpcbiMjIFZlcnNpb25zXG5cbnwgTmFtZSAgICAgICAgICAgIHwgVmVyc2lvbiAgICAgICAgICAgIHxcbnwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgTm9kZSAgICAgICAgICAgIHwgJHtwcm9jZXNzLnZlcnNpb24/LnBhZEVuZCgxOSl9fCBcbnwgT1MgICAgICAgICAgICAgIHwgJHtyPy5wYWRFbmQoMTkpfXxcbnwgUHJpc21hIENsaWVudCAgIHwgJHtlPy5wYWRFbmQoMTkpfXxcbnwgUXVlcnkgRW5naW5lICAgIHwgJHtpPy5wYWRFbmQoMTkpfXxcbnwgRGF0YWJhc2UgICAgICAgIHwgJHtvPy5wYWRFbmQoMTkpfXxcblxuJHt1fVxuXG4jIyBMb2dzXG5cXGBcXGBcXGBcbiR7bH1cblxcYFxcYFxcYFxuXG4jIyBDbGllbnQgU25pcHBldFxuXFxgXFxgXFxgdHNcbi8vIFBMRUFTRSBGSUxMIFlPVVIgQ09ERSBTTklQUEVUIEhFUkVcblxcYFxcYFxcYFxuXG4jIyBTY2hlbWFcblxcYFxcYFxcYHByaXNtYVxuLy8gUExFQVNFIEFERCBZT1VSIFNDSEVNQSBIRVJFIElGIFBPU1NJQkxFXG5cXGBcXGBcXGBcblxuIyMgUHJpc21hIEVuZ2luZSBRdWVyeVxuXFxgXFxgXFxgXG4ke3M/RWwocyk6XCJcIn1cblxcYFxcYFxcYFxuYCkscD12bCh7dGl0bGU6dCxib2R5OmN9KTtyZXR1cm5gJHt0fVxuXG5UaGlzIGlzIGEgbm9uLXJlY292ZXJhYmxlIGVycm9yIHdoaWNoIHByb2JhYmx5IGhhcHBlbnMgd2hlbiB0aGUgUHJpc21hIFF1ZXJ5IEVuZ2luZSBoYXMgYSBwYW5pYy5cblxuJHtZKHApfVxuXG5JZiB5b3Ugd2FudCB0aGUgUHJpc21hIHRlYW0gdG8gbG9vayBpbnRvIGl0LCBwbGVhc2Ugb3BlbiB0aGUgbGluayBhYm92ZSBcXHV7MUY2NEZ9XG5UbyBpbmNyZWFzZSB0aGUgY2hhbmNlIG9mIHN1Y2Nlc3MsIHBsZWFzZSBwb3N0IHlvdXIgc2NoZW1hIGFuZCBhIHNuaXBwZXQgb2ZcbmhvdyB5b3UgdXNlZCBQcmlzbWEgQ2xpZW50IGluIHRoZSBpc3N1ZS4gXG5gfWZ1bmN0aW9uIGpyKHtpbmxpbmVEYXRhc291cmNlczplLG92ZXJyaWRlRGF0YXNvdXJjZXM6cixlbnY6dCxjbGllbnRWZXJzaW9uOm59KXtsZXQgaSxvPU9iamVjdC5rZXlzKGUpWzBdLHM9ZVtvXT8udXJsLGE9cltvXT8udXJsO2lmKG89PT12b2lkIDA/aT12b2lkIDA6YT9pPWE6cz8udmFsdWU/aT1zLnZhbHVlOnM/LmZyb21FbnZWYXImJihpPXRbcy5mcm9tRW52VmFyXSkscz8uZnJvbUVudlZhciE9PXZvaWQgMCYmaT09PXZvaWQgMCl0aHJvdyBuZXcgVChgZXJyb3I6IEVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBmb3VuZDogJHtzLmZyb21FbnZWYXJ9LmAsbik7aWYoaT09PXZvaWQgMCl0aHJvdyBuZXcgVChcImVycm9yOiBNaXNzaW5nIFVSTCBlbnZpcm9ubWVudCB2YXJpYWJsZSwgdmFsdWUsIG9yIG92ZXJyaWRlLlwiLG4pO3JldHVybiBpfXZhciBVbj1jbGFzcyBleHRlbmRzIEVycm9ye2NsaWVudFZlcnNpb247Y2F1c2U7Y29uc3RydWN0b3Iocix0KXtzdXBlcihyKSx0aGlzLmNsaWVudFZlcnNpb249dC5jbGllbnRWZXJzaW9uLHRoaXMuY2F1c2U9dC5jYXVzZX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVybiB0aGlzLm5hbWV9fTt2YXIgc2U9Y2xhc3MgZXh0ZW5kcyBVbntpc1JldHJ5YWJsZTtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIsdCksdGhpcy5pc1JldHJ5YWJsZT10LmlzUmV0cnlhYmxlPz8hMH19O2Z1bmN0aW9uIFIoZSxyKXtyZXR1cm57Li4uZSxpc1JldHJ5YWJsZTpyfX12YXIgVnI9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiRm9yY2VkUmV0cnlFcnJvclwiO2NvZGU9XCJQNTAwMVwiO2NvbnN0cnVjdG9yKHIpe3N1cGVyKFwiVGhpcyByZXF1ZXN0IG11c3QgYmUgcmV0cmllZFwiLFIociwhMCkpfX07eChWcixcIkZvcmNlZFJldHJ5RXJyb3JcIik7dmFyIGxyPWNsYXNzIGV4dGVuZHMgc2V7bmFtZT1cIkludmFsaWREYXRhc291cmNlRXJyb3JcIjtjb2RlPVwiUDYwMDFcIjtjb25zdHJ1Y3RvcihyLHQpe3N1cGVyKHIsUih0LCExKSl9fTt4KGxyLFwiSW52YWxpZERhdGFzb3VyY2VFcnJvclwiKTt2YXIgdXI9Y2xhc3MgZXh0ZW5kcyBzZXtuYW1lPVwiTm90SW1wbGVtZW50ZWRZZXRFcnJvclwiO2NvZGU9XCJQNTAwNFwiO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIocixSKHQsITEpKX19O3godXIsXCJOb3RJbXBsZW1lbnRlZFlldEVycm9yXCIpO3ZhciAkPWNsYXNzIGV4dGVuZHMgc2V7cmVzcG9uc2U7Y29uc3RydWN0b3Iocix0KXtzdXBlcihyLHQpLHRoaXMucmVzcG9uc2U9dC5yZXNwb25zZTtsZXQgbj10aGlzLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwicHJpc21hLXJlcXVlc3QtaWRcIik7aWYobil7bGV0IGk9YChUaGUgcmVxdWVzdCBpZCB3YXM6ICR7bn0pYDt0aGlzLm1lc3NhZ2U9dGhpcy5tZXNzYWdlK1wiIFwiK2l9fX07dmFyIGNyPWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiU2NoZW1hTWlzc2luZ0Vycm9yXCI7Y29kZT1cIlA1MDA1XCI7Y29uc3RydWN0b3Iocil7c3VwZXIoXCJTY2hlbWEgbmVlZHMgdG8gYmUgdXBsb2FkZWRcIixSKHIsITApKX19O3goY3IsXCJTY2hlbWFNaXNzaW5nRXJyb3JcIik7dmFyIHVvPVwiVGhpcyByZXF1ZXN0IGNvdWxkIG5vdCBiZSB1bmRlcnN0b29kIGJ5IHRoZSBzZXJ2ZXJcIixTdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkJhZFJlcXVlc3RFcnJvclwiO2NvZGU9XCJQNTAwMFwiO2NvbnN0cnVjdG9yKHIsdCxuKXtzdXBlcih0fHx1byxSKHIsITEpKSxuJiYodGhpcy5jb2RlPW4pfX07eChTdCxcIkJhZFJlcXVlc3RFcnJvclwiKTt2YXIgUnQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJIZWFsdGhjaGVja1RpbWVvdXRFcnJvclwiO2NvZGU9XCJQNTAxM1wiO2xvZ3M7Y29uc3RydWN0b3Iocix0KXtzdXBlcihcIkVuZ2luZSBub3Qgc3RhcnRlZDogaGVhbHRoY2hlY2sgdGltZW91dFwiLFIociwhMCkpLHRoaXMubG9ncz10fX07eChSdCxcIkhlYWx0aGNoZWNrVGltZW91dEVycm9yXCIpO3ZhciBDdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkVuZ2luZVN0YXJ0dXBFcnJvclwiO2NvZGU9XCJQNTAxNFwiO2xvZ3M7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHQsUihyLCEwKSksdGhpcy5sb2dzPW59fTt4KEN0LFwiRW5naW5lU3RhcnR1cEVycm9yXCIpO3ZhciBBdD1jbGFzcyBleHRlbmRzICR7bmFtZT1cIkVuZ2luZVZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvclwiO2NvZGU9XCJQNTAxMlwiO2NvbnN0cnVjdG9yKHIpe3N1cGVyKFwiRW5naW5lIHZlcnNpb24gaXMgbm90IHN1cHBvcnRlZFwiLFIociwhMSkpfX07eChBdCxcIkVuZ2luZVZlcnNpb25Ob3RTdXBwb3J0ZWRFcnJvclwiKTt2YXIgY289XCJSZXF1ZXN0IHRpbWVkIG91dFwiLEl0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiR2F0ZXdheVRpbWVvdXRFcnJvclwiO2NvZGU9XCJQNTAwOVwiO2NvbnN0cnVjdG9yKHIsdD1jbyl7c3VwZXIodCxSKHIsITEpKX19O3goSXQsXCJHYXRld2F5VGltZW91dEVycm9yXCIpO3ZhciB0Zj1cIkludGVyYWN0aXZlIHRyYW5zYWN0aW9uIGVycm9yXCIsa3Q9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uRXJyb3JcIjtjb2RlPVwiUDUwMTVcIjtjb25zdHJ1Y3RvcihyLHQ9dGYpe3N1cGVyKHQsUihyLCExKSl9fTt4KGt0LFwiSW50ZXJhY3RpdmVUcmFuc2FjdGlvbkVycm9yXCIpO3ZhciBuZj1cIlJlcXVlc3QgcGFyYW1ldGVycyBhcmUgaW52YWxpZFwiLE90PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiSW52YWxpZFJlcXVlc3RFcnJvclwiO2NvZGU9XCJQNTAxMVwiO2NvbnN0cnVjdG9yKHIsdD1uZil7c3VwZXIodCxSKHIsITEpKX19O3goT3QsXCJJbnZhbGlkUmVxdWVzdEVycm9yXCIpO3ZhciBwbz1cIlJlcXVlc3RlZCByZXNvdXJjZSBkb2VzIG5vdCBleGlzdFwiLER0PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiTm90Rm91bmRFcnJvclwiO2NvZGU9XCJQNTAwM1wiO2NvbnN0cnVjdG9yKHIsdD1wbyl7c3VwZXIodCxSKHIsITEpKX19O3goRHQsXCJOb3RGb3VuZEVycm9yXCIpO3ZhciBtbz1cIlVua25vd24gc2VydmVyIGVycm9yXCIsQnI9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJTZXJ2ZXJFcnJvclwiO2NvZGU9XCJQNTAwNlwiO2xvZ3M7Y29uc3RydWN0b3Iocix0LG4pe3N1cGVyKHR8fG1vLFIociwhMCkpLHRoaXMubG9ncz1ufX07eChCcixcIlNlcnZlckVycm9yXCIpO3ZhciBmbz1cIlVuYXV0aG9yaXplZCwgY2hlY2sgeW91ciBjb25uZWN0aW9uIHN0cmluZ1wiLF90PWNsYXNzIGV4dGVuZHMgJHtuYW1lPVwiVW5hdXRob3JpemVkRXJyb3JcIjtjb2RlPVwiUDUwMDdcIjtjb25zdHJ1Y3RvcihyLHQ9Zm8pe3N1cGVyKHQsUihyLCExKSl9fTt4KF90LFwiVW5hdXRob3JpemVkRXJyb3JcIik7dmFyIGdvPVwiVXNhZ2UgZXhjZWVkZWQsIHJldHJ5IGFnYWluIGxhdGVyXCIsTnQ9Y2xhc3MgZXh0ZW5kcyAke25hbWU9XCJVc2FnZUV4Y2VlZGVkRXJyb3JcIjtjb2RlPVwiUDUwMDhcIjtjb25zdHJ1Y3RvcihyLHQ9Z28pe3N1cGVyKHQsUihyLCEwKSl9fTt4KE50LFwiVXNhZ2VFeGNlZWRlZEVycm9yXCIpO2FzeW5jIGZ1bmN0aW9uIG9mKGUpe2xldCByO3RyeXtyPWF3YWl0IGUudGV4dCgpfWNhdGNoe3JldHVybnt0eXBlOlwiRW1wdHlFcnJvclwifX10cnl7bGV0IHQ9SlNPTi5wYXJzZShyKTtpZih0eXBlb2YgdD09XCJzdHJpbmdcIilzd2l0Y2godCl7Y2FzZVwiSW50ZXJuYWxEYXRhUHJveHlFcnJvclwiOnJldHVybnt0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnR9O2RlZmF1bHQ6cmV0dXJue3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTp0fX1pZih0eXBlb2YgdD09XCJvYmplY3RcIiYmdCE9PW51bGwpe2lmKFwiaXNfcGFuaWNcImluIHQmJlwibWVzc2FnZVwiaW4gdCYmXCJlcnJvcl9jb2RlXCJpbiB0KXJldHVybnt0eXBlOlwiUXVlcnlFbmdpbmVFcnJvclwiLGJvZHk6dH07aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiB0fHxcIkludGVyYWN0aXZlVHJhbnNhY3Rpb25NaXNyb3V0ZWRcImluIHR8fFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gdCl7bGV0IG49T2JqZWN0LnZhbHVlcyh0KVswXS5yZWFzb247cmV0dXJuIHR5cGVvZiBuPT1cInN0cmluZ1wiJiYhW1wiU2NoZW1hTWlzc2luZ1wiLFwiRW5naW5lVmVyc2lvbk5vdFN1cHBvcnRlZFwiXS5pbmNsdWRlcyhuKT97dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnR9Ont0eXBlOlwiRGF0YVByb3h5RXJyb3JcIixib2R5OnR9fX1yZXR1cm57dHlwZTpcIlVua25vd25Kc29uRXJyb3JcIixib2R5OnR9fWNhdGNoe3JldHVybiByPT09XCJcIj97dHlwZTpcIkVtcHR5RXJyb3JcIn06e3R5cGU6XCJVbmtub3duVGV4dEVycm9yXCIsYm9keTpyfX19YXN5bmMgZnVuY3Rpb24gTHQoZSxyKXtpZihlLm9rKXJldHVybjtsZXQgdD17Y2xpZW50VmVyc2lvbjpyLHJlc3BvbnNlOmV9LG49YXdhaXQgb2YoZSk7aWYobi50eXBlPT09XCJRdWVyeUVuZ2luZUVycm9yXCIpdGhyb3cgbmV3IHoobi5ib2R5Lm1lc3NhZ2Use2NvZGU6bi5ib2R5LmVycm9yX2NvZGUsY2xpZW50VmVyc2lvbjpyfSk7aWYobi50eXBlPT09XCJEYXRhUHJveHlFcnJvclwiKXtpZihuLmJvZHk9PT1cIkludGVybmFsRGF0YVByb3h5RXJyb3JcIil0aHJvdyBuZXcgQnIodCxcIkludGVybmFsIERhdGEgUHJveHkgZXJyb3JcIik7aWYoXCJFbmdpbmVOb3RTdGFydGVkXCJpbiBuLmJvZHkpe2lmKG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbj09PVwiU2NoZW1hTWlzc2luZ1wiKXJldHVybiBuZXcgY3IodCk7aWYobi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uPT09XCJFbmdpbmVWZXJzaW9uTm90U3VwcG9ydGVkXCIpdGhyb3cgbmV3IEF0KHQpO2lmKFwiRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxsb2dzOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5FbmdpbmVTdGFydHVwRXJyb3I7dGhyb3cgbmV3IEN0KHQsaSxvKX1pZihcIktub3duRW5naW5lU3RhcnR1cEVycm9yXCJpbiBuLmJvZHkuRW5naW5lTm90U3RhcnRlZC5yZWFzb24pe2xldHttc2c6aSxlcnJvcl9jb2RlOm99PW4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbi5Lbm93bkVuZ2luZVN0YXJ0dXBFcnJvcjt0aHJvdyBuZXcgVChpLHIsbyl9aWYoXCJIZWFsdGhjaGVja1RpbWVvdXRcImluIG4uYm9keS5FbmdpbmVOb3RTdGFydGVkLnJlYXNvbil7bGV0e2xvZ3M6aX09bi5ib2R5LkVuZ2luZU5vdFN0YXJ0ZWQucmVhc29uLkhlYWx0aGNoZWNrVGltZW91dDt0aHJvdyBuZXcgUnQodCxpKX19aWYoXCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkXCJpbiBuLmJvZHkpe2xldCBpPXtJRFBhcnNlRXJyb3I6XCJDb3VsZCBub3QgcGFyc2UgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb24gSURcIixOb1F1ZXJ5RW5naW5lRm91bmRFcnJvcjpcIkNvdWxkIG5vdCBmaW5kIFF1ZXJ5IEVuZ2luZSBmb3IgdGhlIHNwZWNpZmllZCBob3N0IGFuZCB0cmFuc2FjdGlvbiBJRFwiLFRyYW5zYWN0aW9uU3RhcnRFcnJvcjpcIkNvdWxkIG5vdCBzdGFydCBpbnRlcmFjdGl2ZSB0cmFuc2FjdGlvblwifTt0aHJvdyBuZXcga3QodCxpW24uYm9keS5JbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkLnJlYXNvbl0pfWlmKFwiSW52YWxpZFJlcXVlc3RFcnJvclwiaW4gbi5ib2R5KXRocm93IG5ldyBPdCh0LG4uYm9keS5JbnZhbGlkUmVxdWVzdEVycm9yLnJlYXNvbil9aWYoZS5zdGF0dXM9PT00MDF8fGUuc3RhdHVzPT09NDAzKXRocm93IG5ldyBfdCh0LFVyKGZvLG4pKTtpZihlLnN0YXR1cz09PTQwNClyZXR1cm4gbmV3IER0KHQsVXIocG8sbikpO2lmKGUuc3RhdHVzPT09NDI5KXRocm93IG5ldyBOdCh0LFVyKGdvLG4pKTtpZihlLnN0YXR1cz09PTUwNCl0aHJvdyBuZXcgSXQodCxVcihjbyxuKSk7aWYoZS5zdGF0dXM+PTUwMCl0aHJvdyBuZXcgQnIodCxVcihtbyxuKSk7aWYoZS5zdGF0dXM+PTQwMCl0aHJvdyBuZXcgU3QodCxVcih1byxuKSl9ZnVuY3Rpb24gVXIoZSxyKXtyZXR1cm4gci50eXBlPT09XCJFbXB0eUVycm9yXCI/ZTpgJHtlfTogJHtKU09OLnN0cmluZ2lmeShyKX1gfWZ1bmN0aW9uIFRsKGUpe2xldCByPU1hdGgucG93KDIsZSkqNTAsdD1NYXRoLmNlaWwoTWF0aC5yYW5kb20oKSpyKS1NYXRoLmNlaWwoci8yKSxuPXIrdDtyZXR1cm4gbmV3IFByb21pc2UoaT0+c2V0VGltZW91dCgoKT0+aShuKSxuKSl9dmFyIE1lPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2Z1bmN0aW9uIFNsKGUpe2xldCByPW5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShlKSx0PVwiXCIsbj1yLmJ5dGVMZW5ndGgsaT1uJTMsbz1uLWkscyxhLGwsdSxjO2ZvcihsZXQgcD0wO3A8bztwPXArMyljPXJbcF08PDE2fHJbcCsxXTw8OHxyW3ArMl0scz0oYyYxNjUxNTA3Mik+PjE4LGE9KGMmMjU4MDQ4KT4+MTIsbD0oYyY0MDMyKT4+Nix1PWMmNjMsdCs9TWVbc10rTWVbYV0rTWVbbF0rTWVbdV07cmV0dXJuIGk9PTE/KGM9cltvXSxzPShjJjI1Mik+PjIsYT0oYyYzKTw8NCx0Kz1NZVtzXStNZVthXStcIj09XCIpOmk9PTImJihjPXJbb108PDh8cltvKzFdLHM9KGMmNjQ1MTIpPj4xMCxhPShjJjEwMDgpPj40LGw9KGMmMTUpPDwyLHQrPU1lW3NdK01lW2FdK01lW2xdK1wiPVwiKSx0fWZ1bmN0aW9uIFJsKGUpe2lmKCEhZS5nZW5lcmF0b3I/LnByZXZpZXdGZWF0dXJlcy5zb21lKHQ9PnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcIm1ldHJpY3NcIikpKXRocm93IG5ldyBUKFwiVGhlIGBtZXRyaWNzYCBwcmV2aWV3IGZlYXR1cmUgaXMgbm90IHlldCBhdmFpbGFibGUgd2l0aCBBY2NlbGVyYXRlLlxcblBsZWFzZSByZW1vdmUgYG1ldHJpY3NgIGZyb20gdGhlIGBwcmV2aWV3RmVhdHVyZXNgIGluIHlvdXIgc2NoZW1hLlxcblxcbk1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQWNjZWxlcmF0ZTogaHR0cHM6Ly9wcmlzLmx5L2QvYWNjZWxlcmF0ZVwiLGUuY2xpZW50VmVyc2lvbil9ZnVuY3Rpb24gc2YoZSl7cmV0dXJuIGVbMF0qMWUzK2VbMV0vMWU2fWZ1bmN0aW9uIGhvKGUpe3JldHVybiBuZXcgRGF0ZShzZihlKSl9dmFyIENsPXtcIkBwcmlzbWEvZGVidWdcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2VuZ2luZXMtdmVyc2lvblwiOlwiNi42LjAtNTMuZjY3Njc2MjI4MGI1NGNkMDdjNzcwMDE3ZWQzNzExZGRkZTM1ZjM3YVwiLFwiQHByaXNtYS9mZXRjaC1lbmdpbmVcIjpcIndvcmtzcGFjZToqXCIsXCJAcHJpc21hL2dldC1wbGF0Zm9ybVwiOlwid29ya3NwYWNlOipcIn07dmFyIEZ0PWNsYXNzIGV4dGVuZHMgc2V7bmFtZT1cIlJlcXVlc3RFcnJvclwiO2NvZGU9XCJQNTAxMFwiO2NvbnN0cnVjdG9yKHIsdCl7c3VwZXIoYENhbm5vdCBmZXRjaCBkYXRhIGZyb20gc2VydmljZTpcbiR7cn1gLFIodCwhMCkpfX07eChGdCxcIlJlcXVlc3RFcnJvclwiKTthc3luYyBmdW5jdGlvbiBwcihlLHIsdD1uPT5uKXtsZXR7Y2xpZW50VmVyc2lvbjpuLC4uLml9PXIsbz10KGZldGNoKTt0cnl7cmV0dXJuIGF3YWl0IG8oZSxpKX1jYXRjaChzKXtsZXQgYT1zLm1lc3NhZ2U/P1wiVW5rbm93biBlcnJvclwiO3Rocm93IG5ldyBGdChhLHtjbGllbnRWZXJzaW9uOm4sY2F1c2U6c30pfX12YXIgbGY9L15bMS05XVswLTldKlxcLlswLTldK1xcLlswLTldKyQvLEFsPU4oXCJwcmlzbWE6Y2xpZW50OmRhdGFwcm94eUVuZ2luZVwiKTthc3luYyBmdW5jdGlvbiB1ZihlLHIpe2xldCB0PUNsW1wiQHByaXNtYS9lbmdpbmVzLXZlcnNpb25cIl0sbj1yLmNsaWVudFZlcnNpb24/P1widW5rbm93blwiO2lmKHByb2Nlc3MuZW52LlBSSVNNQV9DTElFTlRfREFUQV9QUk9YWV9DTElFTlRfVkVSU0lPTilyZXR1cm4gcHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9EQVRBX1BST1hZX0NMSUVOVF9WRVJTSU9OO2lmKGUuaW5jbHVkZXMoXCJhY2NlbGVyYXRlXCIpJiZuIT09XCIwLjAuMFwiJiZuIT09XCJpbi1tZW1vcnlcIilyZXR1cm4gbjtsZXRbaSxvXT1uPy5zcGxpdChcIi1cIik/P1tdO2lmKG89PT12b2lkIDAmJmxmLnRlc3QoaSkpcmV0dXJuIGk7aWYobyE9PXZvaWQgMHx8bj09PVwiMC4wLjBcInx8bj09PVwiaW4tbWVtb3J5XCIpe2lmKGUuc3RhcnRzV2l0aChcImxvY2FsaG9zdFwiKXx8ZS5zdGFydHNXaXRoKFwiMTI3LjAuMC4xXCIpKXJldHVyblwiMC4wLjBcIjtsZXRbc109dC5zcGxpdChcIi1cIik/P1tdLFthLGwsdV09cy5zcGxpdChcIi5cIiksYz1jZihgPD0ke2F9LiR7bH0uJHt1fWApLHA9YXdhaXQgcHIoYyx7Y2xpZW50VmVyc2lvbjpufSk7aWYoIXAub2spdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggc3RhYmxlIFByaXNtYSB2ZXJzaW9uLCB1bnBrZy5jb20gc3RhdHVzICR7cC5zdGF0dXN9ICR7cC5zdGF0dXNUZXh0fSwgcmVzcG9uc2UgYm9keTogJHthd2FpdCBwLnRleHQoKXx8XCI8ZW1wdHkgYm9keT5cIn1gKTtsZXQgZD1hd2FpdCBwLnRleHQoKTtBbChcImxlbmd0aCBvZiBib2R5IGZldGNoZWQgZnJvbSB1bnBrZy5jb21cIixkLmxlbmd0aCk7bGV0IGY7dHJ5e2Y9SlNPTi5wYXJzZShkKX1jYXRjaChnKXt0aHJvdyBjb25zb2xlLmVycm9yKFwiSlNPTi5wYXJzZSBlcnJvcjogYm9keSBmZXRjaGVkIGZyb20gdW5wa2cuY29tOiBcIixkKSxnfXJldHVybiBmLnZlcnNpb259dGhyb3cgbmV3IHVyKFwiT25seSBgbWFqb3IubWlub3IucGF0Y2hgIHZlcnNpb25zIGFyZSBzdXBwb3J0ZWQgYnkgQWNjZWxlcmF0ZS5cIix7Y2xpZW50VmVyc2lvbjpufSl9YXN5bmMgZnVuY3Rpb24gSWwoZSxyKXtsZXQgdD1hd2FpdCB1ZihlLHIpO3JldHVybiBBbChcInZlcnNpb25cIix0KSx0fWZ1bmN0aW9uIGNmKGUpe3JldHVybiBlbmNvZGVVUkkoYGh0dHBzOi8vdW5wa2cuY29tL3ByaXNtYUAke2V9L3BhY2thZ2UuanNvbmApfXZhciBrbD0zLEduPU4oXCJwcmlzbWE6Y2xpZW50OmRhdGFwcm94eUVuZ2luZVwiKSx5bz1jbGFzc3thcGlLZXk7dHJhY2luZ0hlbHBlcjtsb2dMZXZlbDtsb2dRdWVyaWVzO2VuZ2luZUhhc2g7Y29uc3RydWN0b3Ioe2FwaUtleTpyLHRyYWNpbmdIZWxwZXI6dCxsb2dMZXZlbDpuLGxvZ1F1ZXJpZXM6aSxlbmdpbmVIYXNoOm99KXt0aGlzLmFwaUtleT1yLHRoaXMudHJhY2luZ0hlbHBlcj10LHRoaXMubG9nTGV2ZWw9bix0aGlzLmxvZ1F1ZXJpZXM9aSx0aGlzLmVuZ2luZUhhc2g9b31idWlsZCh7dHJhY2VwYXJlbnQ6cixpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOnR9PXt9KXtsZXQgbj17QXV0aG9yaXphdGlvbjpgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcIlByaXNtYS1FbmdpbmUtSGFzaFwiOnRoaXMuZW5naW5lSGFzaH07dGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpJiYobi50cmFjZXBhcmVudD1yPz90aGlzLnRyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKSksdCYmKG5bXCJYLXRyYW5zYWN0aW9uLWlkXCJdPXQuaWQpO2xldCBpPXRoaXMuYnVpbGRDYXB0dXJlU2V0dGluZ3MoKTtyZXR1cm4gaS5sZW5ndGg+MCYmKG5bXCJYLWNhcHR1cmUtdGVsZW1ldHJ5XCJdPWkuam9pbihcIiwgXCIpKSxufWJ1aWxkQ2FwdHVyZVNldHRpbmdzKCl7bGV0IHI9W107cmV0dXJuIHRoaXMudHJhY2luZ0hlbHBlci5pc0VuYWJsZWQoKSYmci5wdXNoKFwidHJhY2luZ1wiKSx0aGlzLmxvZ0xldmVsJiZyLnB1c2godGhpcy5sb2dMZXZlbCksdGhpcy5sb2dRdWVyaWVzJiZyLnB1c2goXCJxdWVyeVwiKSxyfX0sTXQ9Y2xhc3N7bmFtZT1cIkRhdGFQcm94eUVuZ2luZVwiO2lubGluZVNjaGVtYTtpbmxpbmVTY2hlbWFIYXNoO2lubGluZURhdGFzb3VyY2VzO2NvbmZpZztsb2dFbWl0dGVyO2VudjtjbGllbnRWZXJzaW9uO2VuZ2luZUhhc2g7dHJhY2luZ0hlbHBlcjtyZW1vdGVDbGllbnRWZXJzaW9uO2hvc3Q7aGVhZGVyQnVpbGRlcjtzdGFydFByb21pc2U7Y29uc3RydWN0b3Iocil7UmwociksdGhpcy5jb25maWc9cix0aGlzLmVudj17Li4uci5lbnYsLi4udHlwZW9mIHByb2Nlc3M8XCJ1XCI/cHJvY2Vzcy5lbnY6e319LHRoaXMuaW5saW5lU2NoZW1hPVNsKHIuaW5saW5lU2NoZW1hKSx0aGlzLmlubGluZURhdGFzb3VyY2VzPXIuaW5saW5lRGF0YXNvdXJjZXMsdGhpcy5pbmxpbmVTY2hlbWFIYXNoPXIuaW5saW5lU2NoZW1hSGFzaCx0aGlzLmNsaWVudFZlcnNpb249ci5jbGllbnRWZXJzaW9uLHRoaXMuZW5naW5lSGFzaD1yLmVuZ2luZVZlcnNpb24sdGhpcy5sb2dFbWl0dGVyPXIubG9nRW1pdHRlcix0aGlzLnRyYWNpbmdIZWxwZXI9ci50cmFjaW5nSGVscGVyfWFwaUtleSgpe3JldHVybiB0aGlzLmhlYWRlckJ1aWxkZXIuYXBpS2V5fXZlcnNpb24oKXtyZXR1cm4gdGhpcy5lbmdpbmVIYXNofWFzeW5jIHN0YXJ0KCl7dGhpcy5zdGFydFByb21pc2UhPT12b2lkIDAmJmF3YWl0IHRoaXMuc3RhcnRQcm9taXNlLHRoaXMuc3RhcnRQcm9taXNlPShhc3luYygpPT57bGV0W3IsdF09dGhpcy5leHRyYWN0SG9zdEFuZEFwaUtleSgpO3RoaXMuaG9zdD1yLHRoaXMuaGVhZGVyQnVpbGRlcj1uZXcgeW8oe2FwaUtleTp0LHRyYWNpbmdIZWxwZXI6dGhpcy50cmFjaW5nSGVscGVyLGxvZ0xldmVsOnRoaXMuY29uZmlnLmxvZ0xldmVsLGxvZ1F1ZXJpZXM6dGhpcy5jb25maWcubG9nUXVlcmllcyxlbmdpbmVIYXNoOnRoaXMuZW5naW5lSGFzaH0pLHRoaXMucmVtb3RlQ2xpZW50VmVyc2lvbj1hd2FpdCBJbChyLHRoaXMuY29uZmlnKSxHbihcImhvc3RcIix0aGlzLmhvc3QpfSkoKSxhd2FpdCB0aGlzLnN0YXJ0UHJvbWlzZX1hc3luYyBzdG9wKCl7fXByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhyKXtyPy5sb2dzPy5sZW5ndGgmJnIubG9ncy5mb3JFYWNoKHQ9Pntzd2l0Y2godC5sZXZlbCl7Y2FzZVwiZGVidWdcIjpjYXNlXCJ0cmFjZVwiOkduKHQpO2JyZWFrO2Nhc2VcImVycm9yXCI6Y2FzZVwid2FyblwiOmNhc2VcImluZm9cIjp7dGhpcy5sb2dFbWl0dGVyLmVtaXQodC5sZXZlbCx7dGltZXN0YW1wOmhvKHQudGltZXN0YW1wKSxtZXNzYWdlOnQuYXR0cmlidXRlcy5tZXNzYWdlPz9cIlwiLHRhcmdldDp0LnRhcmdldH0pO2JyZWFrfWNhc2VcInF1ZXJ5XCI6e3RoaXMubG9nRW1pdHRlci5lbWl0KFwicXVlcnlcIix7cXVlcnk6dC5hdHRyaWJ1dGVzLnF1ZXJ5Pz9cIlwiLHRpbWVzdGFtcDpobyh0LnRpbWVzdGFtcCksZHVyYXRpb246dC5hdHRyaWJ1dGVzLmR1cmF0aW9uX21zPz8wLHBhcmFtczp0LmF0dHJpYnV0ZXMucGFyYW1zPz9cIlwiLHRhcmdldDp0LnRhcmdldH0pO2JyZWFrfWRlZmF1bHQ6dC5sZXZlbH19KSxyPy50cmFjZXM/Lmxlbmd0aCYmdGhpcy50cmFjaW5nSGVscGVyLmRpc3BhdGNoRW5naW5lU3BhbnMoci50cmFjZXMpfW9uQmVmb3JlRXhpdCgpe3Rocm93IG5ldyBFcnJvcignXCJiZWZvcmVFeGl0XCIgaG9vayBpcyBub3QgYXBwbGljYWJsZSB0byB0aGUgcmVtb3RlIHF1ZXJ5IGVuZ2luZScpfWFzeW5jIHVybChyKXtyZXR1cm4gYXdhaXQgdGhpcy5zdGFydCgpLGBodHRwczovLyR7dGhpcy5ob3N0fS8ke3RoaXMucmVtb3RlQ2xpZW50VmVyc2lvbn0vJHt0aGlzLmlubGluZVNjaGVtYUhhc2h9LyR7cn1gfWFzeW5jIHVwbG9hZFNjaGVtYSgpe2xldCByPXtuYW1lOlwic2NoZW1hVXBsb2FkXCIsaW50ZXJuYWw6ITB9O3JldHVybiB0aGlzLnRyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4ocixhc3luYygpPT57bGV0IHQ9YXdhaXQgcHIoYXdhaXQgdGhpcy51cmwoXCJzY2hlbWFcIikse21ldGhvZDpcIlBVVFwiLGhlYWRlcnM6dGhpcy5oZWFkZXJCdWlsZGVyLmJ1aWxkKCksYm9keTp0aGlzLmlubGluZVNjaGVtYSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pO3Qub2t8fEduKFwic2NoZW1hIHJlc3BvbnNlIHN0YXR1c1wiLHQuc3RhdHVzKTtsZXQgbj1hd2FpdCBMdCh0LHRoaXMuY2xpZW50VmVyc2lvbik7aWYobil0aHJvdyB0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcIndhcm5cIix7bWVzc2FnZTpgRXJyb3Igd2hpbGUgdXBsb2FkaW5nIHNjaGVtYTogJHtuLm1lc3NhZ2V9YCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KSxuO3RoaXMubG9nRW1pdHRlci5lbWl0KFwiaW5mb1wiLHttZXNzYWdlOmBTY2hlbWEgKHJlKXVwbG9hZGVkIChoYXNoOiAke3RoaXMuaW5saW5lU2NoZW1hSGFzaH0pYCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KX0pfXJlcXVlc3Qocix7dHJhY2VwYXJlbnQ6dCxpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOm4sY3VzdG9tRGF0YVByb3h5RmV0Y2g6aX0pe3JldHVybiB0aGlzLnJlcXVlc3RJbnRlcm5hbCh7Ym9keTpyLHRyYWNlcGFyZW50OnQsaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KX1hc3luYyByZXF1ZXN0QmF0Y2gocix7dHJhY2VwYXJlbnQ6dCx0cmFuc2FjdGlvbjpuLGN1c3RvbURhdGFQcm94eUZldGNoOml9KXtsZXQgbz1uPy5raW5kPT09XCJpdHhcIj9uLm9wdGlvbnM6dm9pZCAwLHM9TXIocixuKTtyZXR1cm4oYXdhaXQgdGhpcy5yZXF1ZXN0SW50ZXJuYWwoe2JvZHk6cyxjdXN0b21EYXRhUHJveHlGZXRjaDppLGludGVyYWN0aXZlVHJhbnNhY3Rpb246byx0cmFjZXBhcmVudDp0fSkpLm1hcChsPT4obC5leHRlbnNpb25zJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhsLmV4dGVuc2lvbnMpLFwiZXJyb3JzXCJpbiBsP3RoaXMuY29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihsLmVycm9ycyk6bCkpfXJlcXVlc3RJbnRlcm5hbCh7Ym9keTpyLHRyYWNlcGFyZW50OnQsY3VzdG9tRGF0YVByb3h5RmV0Y2g6bixpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOml9KXtyZXR1cm4gdGhpcy53aXRoUmV0cnkoe2FjdGlvbkdlcnVuZDpcInF1ZXJ5aW5nXCIsY2FsbGJhY2s6YXN5bmMoe2xvZ0h0dHBDYWxsOm99KT0+e2xldCBzPWk/YCR7aS5wYXlsb2FkLmVuZHBvaW50fS9ncmFwaHFsYDphd2FpdCB0aGlzLnVybChcImdyYXBocWxcIik7byhzKTtsZXQgYT1hd2FpdCBwcihzLHttZXRob2Q6XCJQT1NUXCIsaGVhZGVyczp0aGlzLmhlYWRlckJ1aWxkZXIuYnVpbGQoe3RyYWNlcGFyZW50OnQsaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjppfSksYm9keTpKU09OLnN0cmluZ2lmeShyKSxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0sbik7YS5va3x8R24oXCJncmFwaHFsIHJlc3BvbnNlIHN0YXR1c1wiLGEuc3RhdHVzKSxhd2FpdCB0aGlzLmhhbmRsZUVycm9yKGF3YWl0IEx0KGEsdGhpcy5jbGllbnRWZXJzaW9uKSk7bGV0IGw9YXdhaXQgYS5qc29uKCk7aWYobC5leHRlbnNpb25zJiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyhsLmV4dGVuc2lvbnMpLFwiZXJyb3JzXCJpbiBsKXRocm93IHRoaXMuY29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihsLmVycm9ycyk7cmV0dXJuXCJiYXRjaFJlc3VsdFwiaW4gbD9sLmJhdGNoUmVzdWx0Omx9fSl9YXN5bmMgdHJhbnNhY3Rpb24ocix0LG4pe2xldCBpPXtzdGFydDpcInN0YXJ0aW5nXCIsY29tbWl0OlwiY29tbWl0dGluZ1wiLHJvbGxiYWNrOlwicm9sbGluZyBiYWNrXCJ9O3JldHVybiB0aGlzLndpdGhSZXRyeSh7YWN0aW9uR2VydW5kOmAke2lbcl19IHRyYW5zYWN0aW9uYCxjYWxsYmFjazphc3luYyh7bG9nSHR0cENhbGw6b30pPT57aWYocj09PVwic3RhcnRcIil7bGV0IHM9SlNPTi5zdHJpbmdpZnkoe21heF93YWl0Om4ubWF4V2FpdCx0aW1lb3V0Om4udGltZW91dCxpc29sYXRpb25fbGV2ZWw6bi5pc29sYXRpb25MZXZlbH0pLGE9YXdhaXQgdGhpcy51cmwoXCJ0cmFuc2FjdGlvbi9zdGFydFwiKTtvKGEpO2xldCBsPWF3YWl0IHByKGEse21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnRoaXMuaGVhZGVyQnVpbGRlci5idWlsZCh7dHJhY2VwYXJlbnQ6dC50cmFjZXBhcmVudH0pLGJvZHk6cyxjbGllbnRWZXJzaW9uOnRoaXMuY2xpZW50VmVyc2lvbn0pO2F3YWl0IHRoaXMuaGFuZGxlRXJyb3IoYXdhaXQgTHQobCx0aGlzLmNsaWVudFZlcnNpb24pKTtsZXQgdT1hd2FpdCBsLmpzb24oKSx7ZXh0ZW5zaW9uczpjfT11O2MmJnRoaXMucHJvcGFnYXRlUmVzcG9uc2VFeHRlbnNpb25zKGMpO2xldCBwPXUuaWQsZD11W1wiZGF0YS1wcm94eVwiXS5lbmRwb2ludDtyZXR1cm57aWQ6cCxwYXlsb2FkOntlbmRwb2ludDpkfX19ZWxzZXtsZXQgcz1gJHtuLnBheWxvYWQuZW5kcG9pbnR9LyR7cn1gO28ocyk7bGV0IGE9YXdhaXQgcHIocyx7bWV0aG9kOlwiUE9TVFwiLGhlYWRlcnM6dGhpcy5oZWFkZXJCdWlsZGVyLmJ1aWxkKHt0cmFjZXBhcmVudDp0LnRyYWNlcGFyZW50fSksY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudFZlcnNpb259KTthd2FpdCB0aGlzLmhhbmRsZUVycm9yKGF3YWl0IEx0KGEsdGhpcy5jbGllbnRWZXJzaW9uKSk7bGV0IGw9YXdhaXQgYS5qc29uKCkse2V4dGVuc2lvbnM6dX09bDt1JiZ0aGlzLnByb3BhZ2F0ZVJlc3BvbnNlRXh0ZW5zaW9ucyh1KTtyZXR1cm59fX0pfWV4dHJhY3RIb3N0QW5kQXBpS2V5KCl7bGV0IHI9e2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSx0PU9iamVjdC5rZXlzKHRoaXMuaW5saW5lRGF0YXNvdXJjZXMpWzBdLG49anIoe2lubGluZURhdGFzb3VyY2VzOnRoaXMuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczp0aGlzLmNvbmZpZy5vdmVycmlkZURhdGFzb3VyY2VzLGNsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9uLGVudjp0aGlzLmVudn0pLGk7dHJ5e2k9bmV3IFVSTChuKX1jYXRjaHt0aHJvdyBuZXcgbHIoYEVycm9yIHZhbGlkYXRpbmcgZGF0YXNvdXJjZSBcXGAke3R9XFxgOiB0aGUgVVJMIG11c3Qgc3RhcnQgd2l0aCB0aGUgcHJvdG9jb2wgXFxgcHJpc21hOi8vXFxgYCxyKX1sZXR7cHJvdG9jb2w6byxob3N0OnMsc2VhcmNoUGFyYW1zOmF9PWk7aWYobyE9PVwicHJpc21hOlwiJiZvIT09ZW4pdGhyb3cgbmV3IGxyKGBFcnJvciB2YWxpZGF0aW5nIGRhdGFzb3VyY2UgXFxgJHt0fVxcYDogdGhlIFVSTCBtdXN0IHN0YXJ0IHdpdGggdGhlIHByb3RvY29sIFxcYHByaXNtYTovL1xcYGAscik7bGV0IGw9YS5nZXQoXCJhcGlfa2V5XCIpO2lmKGw9PT1udWxsfHxsLmxlbmd0aDwxKXRocm93IG5ldyBscihgRXJyb3IgdmFsaWRhdGluZyBkYXRhc291cmNlIFxcYCR7dH1cXGA6IHRoZSBVUkwgbXVzdCBjb250YWluIGEgdmFsaWQgQVBJIGtleWAscik7cmV0dXJuW3MsbF19bWV0cmljcygpe3Rocm93IG5ldyB1cihcIk1ldHJpY3MgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGZvciBBY2NlbGVyYXRlXCIse2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9ufSl9YXN5bmMgd2l0aFJldHJ5KHIpe2ZvcihsZXQgdD0wOzt0Kyspe2xldCBuPWk9Pnt0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcImluZm9cIix7bWVzc2FnZTpgQ2FsbGluZyAke2l9IChuPSR7dH0pYCx0aW1lc3RhbXA6bmV3IERhdGUsdGFyZ2V0OlwiXCJ9KX07dHJ5e3JldHVybiBhd2FpdCByLmNhbGxiYWNrKHtsb2dIdHRwQ2FsbDpufSl9Y2F0Y2goaSl7aWYoIShpIGluc3RhbmNlb2Ygc2UpfHwhaS5pc1JldHJ5YWJsZSl0aHJvdyBpO2lmKHQ+PWtsKXRocm93IGkgaW5zdGFuY2VvZiBWcj9pLmNhdXNlOmk7dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YEF0dGVtcHQgJHt0KzF9LyR7a2x9IGZhaWxlZCBmb3IgJHtyLmFjdGlvbkdlcnVuZH06ICR7aS5tZXNzYWdlPz9cIih1bmtub3duKVwifWAsdGltZXN0YW1wOm5ldyBEYXRlLHRhcmdldDpcIlwifSk7bGV0IG89YXdhaXQgVGwodCk7dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJ3YXJuXCIse21lc3NhZ2U6YFJldHJ5aW5nIGFmdGVyICR7b31tc2AsdGltZXN0YW1wOm5ldyBEYXRlLHRhcmdldDpcIlwifSl9fX1hc3luYyBoYW5kbGVFcnJvcihyKXtpZihyIGluc3RhbmNlb2YgY3IpdGhyb3cgYXdhaXQgdGhpcy51cGxvYWRTY2hlbWEoKSxuZXcgVnIoe2NsaWVudFZlcnNpb246dGhpcy5jbGllbnRWZXJzaW9uLGNhdXNlOnJ9KTtpZihyKXRocm93IHJ9Y29udmVydFByb3RvY29sRXJyb3JzVG9DbGllbnRFcnJvcihyKXtyZXR1cm4gci5sZW5ndGg9PT0xPyRyKHJbMF0sdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbix0aGlzLmNvbmZpZy5hY3RpdmVQcm92aWRlcik6bmV3IGooSlNPTi5zdHJpbmdpZnkocikse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pfWFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX19O2Z1bmN0aW9uIGJvKGUpe3JldHVybiBlLm5hbWU9PT1cIkRyaXZlckFkYXB0ZXJFcnJvclwiJiZ0eXBlb2YgZS5jYXVzZT09XCJvYmplY3RcIn1mdW5jdGlvbiBRbihlKXtyZXR1cm57b2s6ITAsdmFsdWU6ZSxtYXAocil7cmV0dXJuIFFuKHIoZSkpfSxmbGF0TWFwKHIpe3JldHVybiByKGUpfX19ZnVuY3Rpb24gZHIoZSl7cmV0dXJue29rOiExLGVycm9yOmUsbWFwKCl7cmV0dXJuIGRyKGUpfSxmbGF0TWFwKCl7cmV0dXJuIGRyKGUpfX19dmFyIE9sPU4oXCJkcml2ZXItYWRhcHRlci11dGlsc1wiKSxFbz1jbGFzc3tyZWdpc3RlcmVkRXJyb3JzPVtdO2NvbnN1bWVFcnJvcihyKXtyZXR1cm4gdGhpcy5yZWdpc3RlcmVkRXJyb3JzW3JdfXJlZ2lzdGVyTmV3RXJyb3Iocil7bGV0IHQ9MDtmb3IoO3RoaXMucmVnaXN0ZXJlZEVycm9yc1t0XSE9PXZvaWQgMDspdCsrO3JldHVybiB0aGlzLnJlZ2lzdGVyZWRFcnJvcnNbdF09e2Vycm9yOnJ9LHR9fTt2YXIgd289KGUscj1uZXcgRW8pPT57bGV0IHQ9e2FkYXB0ZXJOYW1lOmUuYWRhcHRlck5hbWUsZXJyb3JSZWdpc3RyeTpyLHF1ZXJ5UmF3OiRlKHIsZS5xdWVyeVJhdy5iaW5kKGUpKSxleGVjdXRlUmF3OiRlKHIsZS5leGVjdXRlUmF3LmJpbmQoZSkpLGV4ZWN1dGVTY3JpcHQ6JGUocixlLmV4ZWN1dGVTY3JpcHQuYmluZChlKSksZGlzcG9zZTokZShyLGUuZGlzcG9zZS5iaW5kKGUpKSxwcm92aWRlcjplLnByb3ZpZGVyLHN0YXJ0VHJhbnNhY3Rpb246YXN5bmMoLi4ubik9Pihhd2FpdCAkZShyLGUuc3RhcnRUcmFuc2FjdGlvbi5iaW5kKGUpKSguLi5uKSkubWFwKG89PnBmKHIsbykpfTtyZXR1cm4gZS5nZXRDb25uZWN0aW9uSW5mbyYmKHQuZ2V0Q29ubmVjdGlvbkluZm89ZGYocixlLmdldENvbm5lY3Rpb25JbmZvLmJpbmQoZSkpKSx0fSxwZj0oZSxyKT0+KHthZGFwdGVyTmFtZTpyLmFkYXB0ZXJOYW1lLHByb3ZpZGVyOnIucHJvdmlkZXIsb3B0aW9uczpyLm9wdGlvbnMscXVlcnlSYXc6JGUoZSxyLnF1ZXJ5UmF3LmJpbmQocikpLGV4ZWN1dGVSYXc6JGUoZSxyLmV4ZWN1dGVSYXcuYmluZChyKSksY29tbWl0OiRlKGUsci5jb21taXQuYmluZChyKSkscm9sbGJhY2s6JGUoZSxyLnJvbGxiYWNrLmJpbmQocikpfSk7ZnVuY3Rpb24gJGUoZSxyKXtyZXR1cm4gYXN5bmMoLi4udCk9Pnt0cnl7cmV0dXJuIFFuKGF3YWl0IHIoLi4udCkpfWNhdGNoKG4pe2lmKE9sKFwiW2Vycm9yQHdyYXBBc3luY11cIixuKSxibyhuKSlyZXR1cm4gZHIobi5jYXVzZSk7bGV0IGk9ZS5yZWdpc3Rlck5ld0Vycm9yKG4pO3JldHVybiBkcih7a2luZDpcIkdlbmVyaWNKc1wiLGlkOml9KX19fWZ1bmN0aW9uIGRmKGUscil7cmV0dXJuKC4uLnQpPT57dHJ5e3JldHVybiBRbihyKC4uLnQpKX1jYXRjaChuKXtpZihPbChcIltlcnJvckB3cmFwU3luY11cIixuKSxibyhuKSlyZXR1cm4gZHIobi5jYXVzZSk7bGV0IGk9ZS5yZWdpc3Rlck5ld0Vycm9yKG4pO3JldHVybiBkcih7a2luZDpcIkdlbmVyaWNKc1wiLGlkOml9KX19fWZ1bmN0aW9uIERsKGUpe2lmKGU/LmtpbmQ9PT1cIml0eFwiKXJldHVybiBlLm9wdGlvbnMuaWR9dmFyIHZvPWsocmVxdWlyZShcIm5vZGU6b3NcIikpLF9sPWsocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7dmFyIHhvPVN5bWJvbChcIlByaXNtYUxpYnJhcnlFbmdpbmVDYWNoZVwiKTtmdW5jdGlvbiBtZigpe2xldCBlPWdsb2JhbFRoaXM7cmV0dXJuIGVbeG9dPT09dm9pZCAwJiYoZVt4b109e30pLGVbeG9dfWZ1bmN0aW9uIGZmKGUpe2xldCByPW1mKCk7aWYocltlXSE9PXZvaWQgMClyZXR1cm4gcltlXTtsZXQgdD1fbC5kZWZhdWx0LnRvTmFtZXNwYWNlZFBhdGgoZSksbj17ZXhwb3J0czp7fX0saT0wO3JldHVybiBwcm9jZXNzLnBsYXRmb3JtIT09XCJ3aW4zMlwiJiYoaT12by5kZWZhdWx0LmNvbnN0YW50cy5kbG9wZW4uUlRMRF9MQVpZfHZvLmRlZmF1bHQuY29uc3RhbnRzLmRsb3Blbi5SVExEX0RFRVBCSU5EKSxwcm9jZXNzLmRsb3BlbihuLHQsaSkscltlXT1uLmV4cG9ydHMsbi5leHBvcnRzfXZhciBObD17YXN5bmMgbG9hZExpYnJhcnkoZSl7bGV0IHI9YXdhaXQgcGkoKSx0PWF3YWl0IHlsKFwibGlicmFyeVwiLGUpO3RyeXtyZXR1cm4gZS50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKHtuYW1lOlwibG9hZExpYnJhcnlcIixpbnRlcm5hbDohMH0sKCk9PmZmKHQpKX1jYXRjaChuKXtsZXQgaT1QaSh7ZTpuLHBsYXRmb3JtSW5mbzpyLGlkOnR9KTt0aHJvdyBuZXcgVChpLGUuY2xpZW50VmVyc2lvbil9fX07dmFyIFBvLExsPXthc3luYyBsb2FkTGlicmFyeShlKXtsZXR7Y2xpZW50VmVyc2lvbjpyLGFkYXB0ZXI6dCxlbmdpbmVXYXNtOm59PWU7aWYodD09PXZvaWQgMCl0aHJvdyBuZXcgVChgVGhlIFxcYGFkYXB0ZXJcXGAgb3B0aW9uIGZvciBcXGBQcmlzbWFDbGllbnRcXGAgaXMgcmVxdWlyZWQgaW4gdGhpcyBjb250ZXh0ICgke3FuKCkucHJldHR5TmFtZX0pYCxyKTtpZihuPT09dm9pZCAwKXRocm93IG5ldyBUKFwiV0FTTSBlbmdpbmUgd2FzIHVuZXhwZWN0ZWRseSBgdW5kZWZpbmVkYFwiLHIpO1BvPT09dm9pZCAwJiYoUG89KGFzeW5jKCk9PntsZXQgbz1hd2FpdCBuLmdldFJ1bnRpbWUoKSxzPWF3YWl0IG4uZ2V0UXVlcnlFbmdpbmVXYXNtTW9kdWxlKCk7aWYocz09bnVsbCl0aHJvdyBuZXcgVChcIlRoZSBsb2FkZWQgd2FzbSBtb2R1bGUgd2FzIHVuZXhwZWN0ZWRseSBgdW5kZWZpbmVkYCBvciBgbnVsbGAgb25jZSBsb2FkZWRcIixyKTtsZXQgYT17XCIuL3F1ZXJ5X2VuZ2luZV9iZy5qc1wiOm99LGw9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKHMsYSksdT1sLmV4cG9ydHMuX193YmluZGdlbl9zdGFydDtyZXR1cm4gby5fX3diZ19zZXRfd2FzbShsLmV4cG9ydHMpLHUoKSxvLlF1ZXJ5RW5naW5lfSkoKSk7bGV0IGk9YXdhaXQgUG87cmV0dXJue2RlYnVnUGFuaWMoKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJ7fVwiKX0sZG1tZigpe3JldHVybiBQcm9taXNlLnJlc29sdmUoXCJ7fVwiKX0sdmVyc2lvbigpe3JldHVybntjb21taXQ6XCJ1bmtub3duXCIsdmVyc2lvbjpcInVua25vd25cIn19LFF1ZXJ5RW5naW5lOml9fX07dmFyIGdmPVwiUDIwMzZcIixDZT1OKFwicHJpc21hOmNsaWVudDpsaWJyYXJ5RW5naW5lXCIpO2Z1bmN0aW9uIGhmKGUpe3JldHVybiBlLml0ZW1fdHlwZT09PVwicXVlcnlcIiYmXCJxdWVyeVwiaW4gZX1mdW5jdGlvbiB5ZihlKXtyZXR1cm5cImxldmVsXCJpbiBlP2UubGV2ZWw9PT1cImVycm9yXCImJmUubWVzc2FnZT09PVwiUEFOSUNcIjohMX12YXIgRmw9Wy4uLm9pLFwibmF0aXZlXCJdLGJmPTB4ZmZmZmZmZmZmZmZmZmZmZm4sVG89MW47ZnVuY3Rpb24gRWYoKXtsZXQgZT1UbysrO3JldHVybiBUbz5iZiYmKFRvPTFuKSxlfXZhciBHcj1jbGFzc3tuYW1lPVwiTGlicmFyeUVuZ2luZVwiO2VuZ2luZTtsaWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2U7bGlicmFyeVN0YXJ0aW5nUHJvbWlzZTtsaWJyYXJ5U3RvcHBpbmdQcm9taXNlO2xpYnJhcnlTdGFydGVkO2V4ZWN1dGluZ1F1ZXJ5UHJvbWlzZTtjb25maWc7UXVlcnlFbmdpbmVDb25zdHJ1Y3RvcjtsaWJyYXJ5TG9hZGVyO2xpYnJhcnk7bG9nRW1pdHRlcjtsaWJRdWVyeUVuZ2luZVBhdGg7YmluYXJ5VGFyZ2V0O2RhdGFzb3VyY2VPdmVycmlkZXM7ZGF0YW1vZGVsO2xvZ1F1ZXJpZXM7bG9nTGV2ZWw7bGFzdFF1ZXJ5O2xvZ2dlclJ1c3RQYW5pYzt0cmFjaW5nSGVscGVyO2FkYXB0ZXJQcm9taXNlO3ZlcnNpb25JbmZvO2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5saWJyYXJ5TG9hZGVyPXQ/P05sLHIuZW5naW5lV2FzbSE9PXZvaWQgMCYmKHRoaXMubGlicmFyeUxvYWRlcj10Pz9MbCksdGhpcy5jb25maWc9cix0aGlzLmxpYnJhcnlTdGFydGVkPSExLHRoaXMubG9nUXVlcmllcz1yLmxvZ1F1ZXJpZXM/PyExLHRoaXMubG9nTGV2ZWw9ci5sb2dMZXZlbD8/XCJlcnJvclwiLHRoaXMubG9nRW1pdHRlcj1yLmxvZ0VtaXR0ZXIsdGhpcy5kYXRhbW9kZWw9ci5pbmxpbmVTY2hlbWEsdGhpcy50cmFjaW5nSGVscGVyPXIudHJhY2luZ0hlbHBlcixyLmVuYWJsZURlYnVnTG9ncyYmKHRoaXMubG9nTGV2ZWw9XCJkZWJ1Z1wiKTtsZXQgbj1PYmplY3Qua2V5cyhyLm92ZXJyaWRlRGF0YXNvdXJjZXMpWzBdLGk9ci5vdmVycmlkZURhdGFzb3VyY2VzW25dPy51cmw7biE9PXZvaWQgMCYmaSE9PXZvaWQgMCYmKHRoaXMuZGF0YXNvdXJjZU92ZXJyaWRlcz17W25dOml9KSx0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZT10aGlzLmluc3RhbnRpYXRlTGlicmFyeSgpfXdyYXBFbmdpbmUocil7cmV0dXJue2FwcGx5UGVuZGluZ01pZ3JhdGlvbnM6ci5hcHBseVBlbmRpbmdNaWdyYXRpb25zPy5iaW5kKHIpLGNvbW1pdFRyYW5zYWN0aW9uOnRoaXMud2l0aFJlcXVlc3RJZChyLmNvbW1pdFRyYW5zYWN0aW9uLmJpbmQocikpLGNvbm5lY3Q6dGhpcy53aXRoUmVxdWVzdElkKHIuY29ubmVjdC5iaW5kKHIpKSxkaXNjb25uZWN0OnRoaXMud2l0aFJlcXVlc3RJZChyLmRpc2Nvbm5lY3QuYmluZChyKSksbWV0cmljczpyLm1ldHJpY3M/LmJpbmQocikscXVlcnk6dGhpcy53aXRoUmVxdWVzdElkKHIucXVlcnkuYmluZChyKSkscm9sbGJhY2tUcmFuc2FjdGlvbjp0aGlzLndpdGhSZXF1ZXN0SWQoci5yb2xsYmFja1RyYW5zYWN0aW9uLmJpbmQocikpLHNkbFNjaGVtYTpyLnNkbFNjaGVtYT8uYmluZChyKSxzdGFydFRyYW5zYWN0aW9uOnRoaXMud2l0aFJlcXVlc3RJZChyLnN0YXJ0VHJhbnNhY3Rpb24uYmluZChyKSksdHJhY2U6ci50cmFjZS5iaW5kKHIpfX13aXRoUmVxdWVzdElkKHIpe3JldHVybiBhc3luYyguLi50KT0+e2xldCBuPUVmKCkudG9TdHJpbmcoKTt0cnl7cmV0dXJuIGF3YWl0IHIoLi4udCxuKX1maW5hbGx5e2lmKHRoaXMudHJhY2luZ0hlbHBlci5pc0VuYWJsZWQoKSl7bGV0IGk9YXdhaXQgdGhpcy5lbmdpbmU/LnRyYWNlKG4pO2lmKGkpe2xldCBvPUpTT04ucGFyc2UoaSk7dGhpcy50cmFjaW5nSGVscGVyLmRpc3BhdGNoRW5naW5lU3BhbnMoby5zcGFucyl9fX19fWFzeW5jIGFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2FsbCB0aGlzIG1ldGhvZCBmcm9tIHRoaXMgdHlwZSBvZiBlbmdpbmUgaW5zdGFuY2VcIil9YXN5bmMgdHJhbnNhY3Rpb24ocix0LG4pe2F3YWl0IHRoaXMuc3RhcnQoKTtsZXQgaT1hd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlLG89SlNPTi5zdHJpbmdpZnkodCkscztpZihyPT09XCJzdGFydFwiKXtsZXQgbD1KU09OLnN0cmluZ2lmeSh7bWF4X3dhaXQ6bi5tYXhXYWl0LHRpbWVvdXQ6bi50aW1lb3V0LGlzb2xhdGlvbl9sZXZlbDpuLmlzb2xhdGlvbkxldmVsfSk7cz1hd2FpdCB0aGlzLmVuZ2luZT8uc3RhcnRUcmFuc2FjdGlvbihsLG8pfWVsc2Ugcj09PVwiY29tbWl0XCI/cz1hd2FpdCB0aGlzLmVuZ2luZT8uY29tbWl0VHJhbnNhY3Rpb24obi5pZCxvKTpyPT09XCJyb2xsYmFja1wiJiYocz1hd2FpdCB0aGlzLmVuZ2luZT8ucm9sbGJhY2tUcmFuc2FjdGlvbihuLmlkLG8pKTtsZXQgYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocyk7aWYod2YoYSkpe2xldCBsPXRoaXMuZ2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3IoYSxpPy5lcnJvclJlZ2lzdHJ5KTt0aHJvdyBsP2wuZXJyb3I6bmV3IHooYS5tZXNzYWdlLHtjb2RlOmEuZXJyb3JfY29kZSxjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sbWV0YTphLm1ldGF9KX1lbHNlIGlmKHR5cGVvZiBhLm1lc3NhZ2U9PVwic3RyaW5nXCIpdGhyb3cgbmV3IGooYS5tZXNzYWdlLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtyZXR1cm4gYX1hc3luYyBpbnN0YW50aWF0ZUxpYnJhcnkoKXtpZihDZShcImludGVybmFsU2V0dXBcIiksdGhpcy5saWJyYXJ5SW5zdGFudGlhdGlvblByb21pc2UpcmV0dXJuIHRoaXMubGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlO2lpKCksdGhpcy5iaW5hcnlUYXJnZXQ9YXdhaXQgdGhpcy5nZXRDdXJyZW50QmluYXJ5VGFyZ2V0KCksYXdhaXQgdGhpcy50cmFjaW5nSGVscGVyLnJ1bkluQ2hpbGRTcGFuKFwibG9hZF9lbmdpbmVcIiwoKT0+dGhpcy5sb2FkRW5naW5lKCkpLHRoaXMudmVyc2lvbigpfWFzeW5jIGdldEN1cnJlbnRCaW5hcnlUYXJnZXQoKXt7aWYodGhpcy5iaW5hcnlUYXJnZXQpcmV0dXJuIHRoaXMuYmluYXJ5VGFyZ2V0O2xldCByPWF3YWl0IHRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImRldGVjdF9wbGF0Zm9ybVwiLCgpPT5pcigpKTtpZighRmwuaW5jbHVkZXMocikpdGhyb3cgbmV3IFQoYFVua25vd24gJHtjZShcIlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWVwiKX0gJHtjZShXKHIpKX0uIFBvc3NpYmxlIGJpbmFyeVRhcmdldHM6ICR7cWUoRmwuam9pbihcIiwgXCIpKX0gb3IgYSBwYXRoIHRvIHRoZSBxdWVyeSBlbmdpbmUgbGlicmFyeS5cbllvdSBtYXkgaGF2ZSB0byBydW4gJHtxZShcInByaXNtYSBnZW5lcmF0ZVwiKX0gZm9yIHlvdXIgY2hhbmdlcyB0byB0YWtlIGVmZmVjdC5gLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO3JldHVybiByfX1wYXJzZUVuZ2luZVJlc3BvbnNlKHIpe2lmKCFyKXRocm93IG5ldyBqKFwiUmVzcG9uc2UgZnJvbSB0aGUgRW5naW5lIHdhcyBlbXB0eVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7dGhyb3cgbmV3IGooXCJVbmFibGUgdG8gSlNPTi5wYXJzZSByZXNwb25zZSBmcm9tIGVuZ2luZVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX19YXN5bmMgbG9hZEVuZ2luZSgpe2lmKCF0aGlzLmVuZ2luZSl7dGhpcy5RdWVyeUVuZ2luZUNvbnN0cnVjdG9yfHwodGhpcy5saWJyYXJ5PWF3YWl0IHRoaXMubGlicmFyeUxvYWRlci5sb2FkTGlicmFyeSh0aGlzLmNvbmZpZyksdGhpcy5RdWVyeUVuZ2luZUNvbnN0cnVjdG9yPXRoaXMubGlicmFyeS5RdWVyeUVuZ2luZSk7dHJ5e2xldCByPW5ldyBXZWFrUmVmKHRoaXMpO3RoaXMuYWRhcHRlclByb21pc2V8fCh0aGlzLmFkYXB0ZXJQcm9taXNlPXRoaXMuY29uZmlnLmFkYXB0ZXI/LmNvbm5lY3QoKT8udGhlbih3bykpO2xldCB0PWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dCYmQ2UoXCJVc2luZyBkcml2ZXIgYWRhcHRlcjogJU9cIix0KSx0aGlzLmVuZ2luZT10aGlzLndyYXBFbmdpbmUobmV3IHRoaXMuUXVlcnlFbmdpbmVDb25zdHJ1Y3Rvcih7ZGF0YW1vZGVsOnRoaXMuZGF0YW1vZGVsLGVudjpwcm9jZXNzLmVudixsb2dRdWVyaWVzOnRoaXMuY29uZmlnLmxvZ1F1ZXJpZXM/PyExLGlnbm9yZUVudlZhckVycm9yczohMCxkYXRhc291cmNlT3ZlcnJpZGVzOnRoaXMuZGF0YXNvdXJjZU92ZXJyaWRlcz8/e30sbG9nTGV2ZWw6dGhpcy5sb2dMZXZlbCxjb25maWdEaXI6dGhpcy5jb25maWcuY3dkLGVuZ2luZVByb3RvY29sOlwianNvblwiLGVuYWJsZVRyYWNpbmc6dGhpcy50cmFjaW5nSGVscGVyLmlzRW5hYmxlZCgpfSxuPT57ci5kZXJlZigpPy5sb2dnZXIobil9LHQpKX1jYXRjaChyKXtsZXQgdD1yLG49dGhpcy5wYXJzZUluaXRFcnJvcih0Lm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBuPT1cInN0cmluZ1wiP3Q6bmV3IFQobi5tZXNzYWdlLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sbi5lcnJvcl9jb2RlKX19fWxvZ2dlcihyKXtsZXQgdD10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocik7dCYmKHQubGV2ZWw9dD8ubGV2ZWwudG9Mb3dlckNhc2UoKT8/XCJ1bmtub3duXCIsaGYodCk/dGhpcy5sb2dFbWl0dGVyLmVtaXQoXCJxdWVyeVwiLHt0aW1lc3RhbXA6bmV3IERhdGUscXVlcnk6dC5xdWVyeSxwYXJhbXM6dC5wYXJhbXMsZHVyYXRpb246TnVtYmVyKHQuZHVyYXRpb25fbXMpLHRhcmdldDp0Lm1vZHVsZV9wYXRofSk6eWYodCk/dGhpcy5sb2dnZXJSdXN0UGFuaWM9bmV3IGxlKFNvKHRoaXMsYCR7dC5tZXNzYWdlfTogJHt0LnJlYXNvbn0gaW4gJHt0LmZpbGV9OiR7dC5saW5lfToke3QuY29sdW1ufWApLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pOnRoaXMubG9nRW1pdHRlci5lbWl0KHQubGV2ZWwse3RpbWVzdGFtcDpuZXcgRGF0ZSxtZXNzYWdlOnQubWVzc2FnZSx0YXJnZXQ6dC5tb2R1bGVfcGF0aH0pKX1wYXJzZUluaXRFcnJvcihyKXt0cnl7cmV0dXJuIEpTT04ucGFyc2Uocil9Y2F0Y2h7fXJldHVybiByfXBhcnNlUmVxdWVzdEVycm9yKHIpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShyKX1jYXRjaHt9cmV0dXJuIHJ9b25CZWZvcmVFeGl0KCl7dGhyb3cgbmV3IEVycm9yKCdcImJlZm9yZUV4aXRcIiBob29rIGlzIG5vdCBhcHBsaWNhYmxlIHRvIHRoZSBsaWJyYXJ5IGVuZ2luZSBzaW5jZSBQcmlzbWEgNS4wLjAsIGl0IGlzIG9ubHkgcmVsZXZhbnQgYW5kIGltcGxlbWVudGVkIGZvciB0aGUgYmluYXJ5IGVuZ2luZS4gUGxlYXNlIGFkZCB5b3VyIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBgcHJvY2Vzc2Agb2JqZWN0IGRpcmVjdGx5IGluc3RlYWQuJyl9YXN5bmMgc3RhcnQoKXtpZihhd2FpdCB0aGlzLmxpYnJhcnlJbnN0YW50aWF0aW9uUHJvbWlzZSxhd2FpdCB0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2UsdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlKXJldHVybiBDZShgbGlicmFyeSBhbHJlYWR5IHN0YXJ0aW5nLCB0aGlzLmxpYnJhcnlTdGFydGVkOiAke3RoaXMubGlicmFyeVN0YXJ0ZWR9YCksdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlO2lmKHRoaXMubGlicmFyeVN0YXJ0ZWQpcmV0dXJuO2xldCByPWFzeW5jKCk9PntDZShcImxpYnJhcnkgc3RhcnRpbmdcIik7dHJ5e2xldCB0PXt0cmFjZXBhcmVudDp0aGlzLnRyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKX07YXdhaXQgdGhpcy5lbmdpbmU/LmNvbm5lY3QoSlNPTi5zdHJpbmdpZnkodCkpLHRoaXMubGlicmFyeVN0YXJ0ZWQ9ITAsQ2UoXCJsaWJyYXJ5IHN0YXJ0ZWRcIil9Y2F0Y2godCl7bGV0IG49dGhpcy5wYXJzZUluaXRFcnJvcih0Lm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBuPT1cInN0cmluZ1wiP3Q6bmV3IFQobi5tZXNzYWdlLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24sbi5lcnJvcl9jb2RlKX1maW5hbGx5e3RoaXMubGlicmFyeVN0YXJ0aW5nUHJvbWlzZT12b2lkIDB9fTtyZXR1cm4gdGhpcy5saWJyYXJ5U3RhcnRpbmdQcm9taXNlPXRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImNvbm5lY3RcIixyKSx0aGlzLmxpYnJhcnlTdGFydGluZ1Byb21pc2V9YXN5bmMgc3RvcCgpe2lmKGF3YWl0IHRoaXMubGlicmFyeVN0YXJ0aW5nUHJvbWlzZSxhd2FpdCB0aGlzLmV4ZWN1dGluZ1F1ZXJ5UHJvbWlzZSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2UpcmV0dXJuIENlKFwibGlicmFyeSBpcyBhbHJlYWR5IHN0b3BwaW5nXCIpLHRoaXMubGlicmFyeVN0b3BwaW5nUHJvbWlzZTtpZighdGhpcy5saWJyYXJ5U3RhcnRlZClyZXR1cm47bGV0IHI9YXN5bmMoKT0+e2F3YWl0IG5ldyBQcm9taXNlKG49PnNldFRpbWVvdXQobiw1KSksQ2UoXCJsaWJyYXJ5IHN0b3BwaW5nXCIpO2xldCB0PXt0cmFjZXBhcmVudDp0aGlzLnRyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKX07YXdhaXQgdGhpcy5lbmdpbmU/LmRpc2Nvbm5lY3QoSlNPTi5zdHJpbmdpZnkodCkpLHRoaXMubGlicmFyeVN0YXJ0ZWQ9ITEsdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlPXZvaWQgMCxhd2FpdChhd2FpdCB0aGlzLmFkYXB0ZXJQcm9taXNlKT8uZGlzcG9zZSgpLHRoaXMuYWRhcHRlclByb21pc2U9dm9pZCAwLENlKFwibGlicmFyeSBzdG9wcGVkXCIpfTtyZXR1cm4gdGhpcy5saWJyYXJ5U3RvcHBpbmdQcm9taXNlPXRoaXMudHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihcImRpc2Nvbm5lY3RcIixyKSx0aGlzLmxpYnJhcnlTdG9wcGluZ1Byb21pc2V9dmVyc2lvbigpe3JldHVybiB0aGlzLnZlcnNpb25JbmZvPXRoaXMubGlicmFyeT8udmVyc2lvbigpLHRoaXMudmVyc2lvbkluZm8/LnZlcnNpb24/P1widW5rbm93blwifWRlYnVnUGFuaWMocil7cmV0dXJuIHRoaXMubGlicmFyeT8uZGVidWdQYW5pYyhyKX1hc3luYyByZXF1ZXN0KHIse3RyYWNlcGFyZW50OnQsaW50ZXJhY3RpdmVUcmFuc2FjdGlvbjpufSl7Q2UoYHNlbmRpbmcgcmVxdWVzdCwgdGhpcy5saWJyYXJ5U3RhcnRlZDogJHt0aGlzLmxpYnJhcnlTdGFydGVkfWApO2xldCBpPUpTT04uc3RyaW5naWZ5KHt0cmFjZXBhcmVudDp0fSksbz1KU09OLnN0cmluZ2lmeShyKTt0cnl7YXdhaXQgdGhpcy5zdGFydCgpO2xldCBzPWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2U9dGhpcy5lbmdpbmU/LnF1ZXJ5KG8saSxuPy5pZCksdGhpcy5sYXN0UXVlcnk9bztsZXQgYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2UoYXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UpO2lmKGEuZXJyb3JzKXRocm93IGEuZXJyb3JzLmxlbmd0aD09PTE/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYS5lcnJvcnNbMF0scz8uZXJyb3JSZWdpc3RyeSk6bmV3IGooSlNPTi5zdHJpbmdpZnkoYS5lcnJvcnMpLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KTtpZih0aGlzLmxvZ2dlclJ1c3RQYW5pYyl0aHJvdyB0aGlzLmxvZ2dlclJ1c3RQYW5pYztyZXR1cm57ZGF0YTphfX1jYXRjaChzKXtpZihzIGluc3RhbmNlb2YgVCl0aHJvdyBzO2lmKHMuY29kZT09PVwiR2VuZXJpY0ZhaWx1cmVcIiYmcy5tZXNzYWdlPy5zdGFydHNXaXRoKFwiUEFOSUM6XCIpKXRocm93IG5ldyBsZShTbyh0aGlzLHMubWVzc2FnZSksdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbik7bGV0IGE9dGhpcy5wYXJzZVJlcXVlc3RFcnJvcihzLm1lc3NhZ2UpO3Rocm93IHR5cGVvZiBhPT1cInN0cmluZ1wiP3M6bmV3IGooYCR7YS5tZXNzYWdlfVxuJHthLmJhY2t0cmFjZX1gLHtjbGllbnRWZXJzaW9uOnRoaXMuY29uZmlnLmNsaWVudFZlcnNpb259KX19YXN5bmMgcmVxdWVzdEJhdGNoKHIse3RyYW5zYWN0aW9uOnQsdHJhY2VwYXJlbnQ6bn0pe0NlKFwicmVxdWVzdEJhdGNoXCIpO2xldCBpPU1yKHIsdCk7YXdhaXQgdGhpcy5zdGFydCgpO2xldCBvPWF3YWl0IHRoaXMuYWRhcHRlclByb21pc2U7dGhpcy5sYXN0UXVlcnk9SlNPTi5zdHJpbmdpZnkoaSksdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2U9dGhpcy5lbmdpbmUucXVlcnkodGhpcy5sYXN0UXVlcnksSlNPTi5zdHJpbmdpZnkoe3RyYWNlcGFyZW50Om59KSxEbCh0KSk7bGV0IHM9YXdhaXQgdGhpcy5leGVjdXRpbmdRdWVyeVByb21pc2UsYT10aGlzLnBhcnNlRW5naW5lUmVzcG9uc2Uocyk7aWYoYS5lcnJvcnMpdGhyb3cgYS5lcnJvcnMubGVuZ3RoPT09MT90aGlzLmJ1aWxkUXVlcnlFcnJvcihhLmVycm9yc1swXSxvPy5lcnJvclJlZ2lzdHJ5KTpuZXcgaihKU09OLnN0cmluZ2lmeShhLmVycm9ycykse2NsaWVudFZlcnNpb246dGhpcy5jb25maWcuY2xpZW50VmVyc2lvbn0pO2xldHtiYXRjaFJlc3VsdDpsLGVycm9yczp1fT1hO2lmKEFycmF5LmlzQXJyYXkobCkpcmV0dXJuIGwubWFwKGM9PmMuZXJyb3JzJiZjLmVycm9ycy5sZW5ndGg+MD90aGlzLmxvZ2dlclJ1c3RQYW5pYz8/dGhpcy5idWlsZFF1ZXJ5RXJyb3IoYy5lcnJvcnNbMF0sbz8uZXJyb3JSZWdpc3RyeSk6e2RhdGE6Y30pO3Rocm93IHUmJnUubGVuZ3RoPT09MT9uZXcgRXJyb3IodVswXS5lcnJvcik6bmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGEpKX1idWlsZFF1ZXJ5RXJyb3Iocix0KXtpZihyLnVzZXJfZmFjaW5nX2Vycm9yLmlzX3BhbmljKXJldHVybiBuZXcgbGUoU28odGhpcyxyLnVzZXJfZmFjaW5nX2Vycm9yLm1lc3NhZ2UpLHRoaXMuY29uZmlnLmNsaWVudFZlcnNpb24pO2xldCBuPXRoaXMuZ2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3Ioci51c2VyX2ZhY2luZ19lcnJvcix0KTtyZXR1cm4gbj9uLmVycm9yOiRyKHIsdGhpcy5jb25maWcuY2xpZW50VmVyc2lvbix0aGlzLmNvbmZpZy5hY3RpdmVQcm92aWRlcil9Z2V0RXh0ZXJuYWxBZGFwdGVyRXJyb3Iocix0KXtpZihyLmVycm9yX2NvZGU9PT1nZiYmdCl7bGV0IG49ci5tZXRhPy5pZDtybih0eXBlb2Ygbj09XCJudW1iZXJcIixcIk1hbGZvcm1lZCBleHRlcm5hbCBKUyBlcnJvciByZWNlaXZlZCBmcm9tIHRoZSBlbmdpbmVcIik7bGV0IGk9dC5jb25zdW1lRXJyb3Iobik7cmV0dXJuIHJuKGksXCJFeHRlcm5hbCBlcnJvciB3aXRoIHJlcG9ydGVkIGlkIHdhcyBub3QgcmVnaXN0ZXJlZFwiKSxpfX1hc3luYyBtZXRyaWNzKHIpe2F3YWl0IHRoaXMuc3RhcnQoKTtsZXQgdD1hd2FpdCB0aGlzLmVuZ2luZS5tZXRyaWNzKEpTT04uc3RyaW5naWZ5KHIpKTtyZXR1cm4gci5mb3JtYXQ9PT1cInByb21ldGhldXNcIj90OnRoaXMucGFyc2VFbmdpbmVSZXNwb25zZSh0KX19O2Z1bmN0aW9uIHdmKGUpe3JldHVybiB0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGwmJmUuZXJyb3JfY29kZSE9PXZvaWQgMH1mdW5jdGlvbiBTbyhlLHIpe3JldHVybiBQbCh7YmluYXJ5VGFyZ2V0OmUuYmluYXJ5VGFyZ2V0LHRpdGxlOnIsdmVyc2lvbjplLmNvbmZpZy5jbGllbnRWZXJzaW9uLGVuZ2luZVZlcnNpb246ZS52ZXJzaW9uSW5mbz8uY29tbWl0LGRhdGFiYXNlOmUuY29uZmlnLmFjdGl2ZVByb3ZpZGVyLHF1ZXJ5OmUubGFzdFF1ZXJ5fSl9ZnVuY3Rpb24gTWwoe2NvcHlFbmdpbmU6ZT0hMH0scil7bGV0IHQ7dHJ5e3Q9anIoe2lubGluZURhdGFzb3VyY2VzOnIuaW5saW5lRGF0YXNvdXJjZXMsb3ZlcnJpZGVEYXRhc291cmNlczpyLm92ZXJyaWRlRGF0YXNvdXJjZXMsZW52OnsuLi5yLmVudiwuLi5wcm9jZXNzLmVudn0sY2xpZW50VmVyc2lvbjpyLmNsaWVudFZlcnNpb259KX1jYXRjaHt9bGV0IG49ISEodD8uc3RhcnRzV2l0aChcInByaXNtYTovL1wiKXx8U2kodCkpO2UmJm4mJm90KFwicmVjb21tZW5kLS1uby1lbmdpbmVcIixcIkluIHByb2R1Y3Rpb24sIHdlIHJlY29tbWVuZCB1c2luZyBgcHJpc21hIGdlbmVyYXRlIC0tbm8tZW5naW5lYCAoU2VlOiBgcHJpc21hIGdlbmVyYXRlIC0taGVscGApXCIpO2xldCBpPUVyKHIuZ2VuZXJhdG9yKSxvPW58fCFlLHM9ISFyLmFkYXB0ZXIsYT1pPT09XCJsaWJyYXJ5XCIsbD1pPT09XCJiaW5hcnlcIix1PWk9PT1cImNsaWVudFwiO2lmKG8mJnN8fHMmJiExKXtsZXQgYzt0aHJvdyBlP3Q/LnN0YXJ0c1dpdGgoXCJwcmlzbWE6Ly9cIik/Yz1bXCJQcmlzbWEgQ2xpZW50IHdhcyBjb25maWd1cmVkIHRvIHVzZSB0aGUgYGFkYXB0ZXJgIG9wdGlvbiBidXQgdGhlIFVSTCB3YXMgYSBgcHJpc21hOi8vYCBVUkwuXCIsXCJQbGVhc2UgZWl0aGVyIHVzZSB0aGUgYHByaXNtYTovL2AgVVJMIG9yIHJlbW92ZSB0aGUgYGFkYXB0ZXJgIGZyb20gdGhlIFByaXNtYSBDbGllbnQgY29uc3RydWN0b3IuXCJdOmM9W1wiUHJpc21hIENsaWVudCB3YXMgY29uZmlndXJlZCB0byB1c2UgYm90aCB0aGUgYGFkYXB0ZXJgIGFuZCBBY2NlbGVyYXRlLCBwbGVhc2UgY2hvc2Ugb25lLlwiXTpjPVtcIlByaXNtYSBDbGllbnQgd2FzIGNvbmZpZ3VyZWQgdG8gdXNlIHRoZSBgYWRhcHRlcmAgb3B0aW9uIGJ1dCBgcHJpc21hIGdlbmVyYXRlYCB3YXMgcnVuIHdpdGggYC0tbm8tZW5naW5lYC5cIixcIlBsZWFzZSBydW4gYHByaXNtYSBnZW5lcmF0ZWAgd2l0aG91dCBgLS1uby1lbmdpbmVgIHRvIGJlIGFibGUgdG8gdXNlIFByaXNtYSBDbGllbnQgd2l0aCB0aGUgYWRhcHRlci5cIl0sbmV3IFooYy5qb2luKGBcbmApLHtjbGllbnRWZXJzaW9uOnIuY2xpZW50VmVyc2lvbn0pfXJldHVybiBvP25ldyBNdChyKTphP25ldyBHcihyKTpuZXcgR3Iocil9ZnVuY3Rpb24gV24oe2dlbmVyYXRvcjplfSl7cmV0dXJuIGU/LnByZXZpZXdGZWF0dXJlcz8/W119dmFyICRsPWU9Pih7Y29tbWFuZDplfSk7dmFyIHFsPWU9PmUuc3RyaW5ncy5yZWR1Y2UoKHIsdCxuKT0+YCR7cn1AUCR7bn0ke3R9YCk7ZnVuY3Rpb24gUXIoZSl7dHJ5e3JldHVybiBqbChlLFwiZmFzdFwiKX1jYXRjaHtyZXR1cm4gamwoZSxcInNsb3dcIil9fWZ1bmN0aW9uIGpsKGUscil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUubWFwKHQ9PkJsKHQscikpKX1mdW5jdGlvbiBCbChlLHIpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGUubWFwKHQ9PkJsKHQscikpO2lmKHR5cGVvZiBlPT1cImJpZ2ludFwiKXJldHVybntwcmlzbWFfX3R5cGU6XCJiaWdpbnRcIixwcmlzbWFfX3ZhbHVlOmUudG9TdHJpbmcoKX07aWYoU3IoZSkpcmV0dXJue3ByaXNtYV9fdHlwZTpcImRhdGVcIixwcmlzbWFfX3ZhbHVlOmUudG9KU09OKCl9O2lmKHZlLmlzRGVjaW1hbChlKSlyZXR1cm57cHJpc21hX190eXBlOlwiZGVjaW1hbFwiLHByaXNtYV9fdmFsdWU6ZS50b0pTT04oKX07aWYoQnVmZmVyLmlzQnVmZmVyKGUpKXJldHVybntwcmlzbWFfX3R5cGU6XCJieXRlc1wiLHByaXNtYV9fdmFsdWU6ZS50b1N0cmluZyhcImJhc2U2NFwiKX07aWYoeGYoZSkpcmV0dXJue3ByaXNtYV9fdHlwZTpcImJ5dGVzXCIscHJpc21hX192YWx1ZTpCdWZmZXIuZnJvbShlKS50b1N0cmluZyhcImJhc2U2NFwiKX07aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXtsZXR7YnVmZmVyOnQsYnl0ZU9mZnNldDpuLGJ5dGVMZW5ndGg6aX09ZTtyZXR1cm57cHJpc21hX190eXBlOlwiYnl0ZXNcIixwcmlzbWFfX3ZhbHVlOkJ1ZmZlci5mcm9tKHQsbixpKS50b1N0cmluZyhcImJhc2U2NFwiKX19cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwiJiZyPT09XCJzbG93XCI/VWwoZSk6ZX1mdW5jdGlvbiB4ZihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXI/ITA6dHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsP2VbU3ltYm9sLnRvU3RyaW5nVGFnXT09PVwiQXJyYXlCdWZmZXJcInx8ZVtTeW1ib2wudG9TdHJpbmdUYWddPT09XCJTaGFyZWRBcnJheUJ1ZmZlclwiOiExfWZ1bmN0aW9uIFVsKGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxlPT09bnVsbClyZXR1cm4gZTtpZih0eXBlb2YgZS50b0pTT049PVwiZnVuY3Rpb25cIilyZXR1cm4gZS50b0pTT04oKTtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLm1hcChWbCk7bGV0IHI9e307Zm9yKGxldCB0IG9mIE9iamVjdC5rZXlzKGUpKXJbdF09VmwoZVt0XSk7cmV0dXJuIHJ9ZnVuY3Rpb24gVmwoZSl7cmV0dXJuIHR5cGVvZiBlPT1cImJpZ2ludFwiP2UudG9TdHJpbmcoKTpVbChlKX12YXIgdmY9L14oXFxzKmFsdGVyXFxzKS9pLEdsPU4oXCJwcmlzbWE6Y2xpZW50XCIpO2Z1bmN0aW9uIFJvKGUscix0LG4pe2lmKCEoZSE9PVwicG9zdGdyZXNxbFwiJiZlIT09XCJjb2Nrcm9hY2hkYlwiKSYmdC5sZW5ndGg+MCYmdmYuZXhlYyhyKSl0aHJvdyBuZXcgRXJyb3IoYFJ1bm5pbmcgQUxURVIgdXNpbmcgJHtufSBpcyBub3Qgc3VwcG9ydGVkXG5Vc2luZyB0aGUgZXhhbXBsZSBiZWxvdyB5b3UgY2FuIHN0aWxsIGV4ZWN1dGUgeW91ciBxdWVyeSB3aXRoIFByaXNtYSwgYnV0IHBsZWFzZSBub3RlIHRoYXQgaXQgaXMgdnVsbmVyYWJsZSB0byBTUUwgaW5qZWN0aW9uIGF0dGFja3MgYW5kIHJlcXVpcmVzIHlvdSB0byB0YWtlIGNhcmUgb2YgaW5wdXQgc2FuaXRpemF0aW9uLlxuXG5FeGFtcGxlOlxuICBhd2FpdCBwcmlzbWEuJGV4ZWN1dGVSYXdVbnNhZmUoXFxgQUxURVIgVVNFUiBwcmlzbWEgV0lUSCBQQVNTV09SRCAnXFwke3Bhc3N3b3JkfSdcXGApXG5cbk1vcmUgSW5mb3JtYXRpb246IGh0dHBzOi8vcHJpcy5seS9kL2V4ZWN1dGUtcmF3XG5gKX12YXIgQ289KHtjbGllbnRNZXRob2Q6ZSxhY3RpdmVQcm92aWRlcjpyfSk9PnQ9PntsZXQgbj1cIlwiLGk7aWYoTm4odCkpbj10LnNxbCxpPXt2YWx1ZXM6UXIodC52YWx1ZXMpLF9fcHJpc21hUmF3UGFyYW1ldGVyc19fOiEwfTtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpe2xldFtvLC4uLnNdPXQ7bj1vLGk9e3ZhbHVlczpRcihzfHxbXSksX19wcmlzbWFSYXdQYXJhbWV0ZXJzX186ITB9fWVsc2Ugc3dpdGNoKHIpe2Nhc2VcInNxbGl0ZVwiOmNhc2VcIm15c3FsXCI6e249dC5zcWwsaT17dmFsdWVzOlFyKHQudmFsdWVzKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH07YnJlYWt9Y2FzZVwiY29ja3JvYWNoZGJcIjpjYXNlXCJwb3N0Z3Jlc3FsXCI6Y2FzZVwicG9zdGdyZXNcIjp7bj10LnRleHQsaT17dmFsdWVzOlFyKHQudmFsdWVzKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH07YnJlYWt9Y2FzZVwic3Fsc2VydmVyXCI6e249cWwodCksaT17dmFsdWVzOlFyKHQudmFsdWVzKSxfX3ByaXNtYVJhd1BhcmFtZXRlcnNfXzohMH07YnJlYWt9ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoYFRoZSAke3J9IHByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgJHtlfWApfXJldHVybiBpPy52YWx1ZXM/R2woYHByaXNtYS4ke2V9KCR7bn0sICR7aS52YWx1ZXN9KWApOkdsKGBwcmlzbWEuJHtlfSgke259KWApLHtxdWVyeTpuLHBhcmFtZXRlcnM6aX19LFFsPXtyZXF1ZXN0QXJnc1RvTWlkZGxld2FyZUFyZ3MoZSl7cmV0dXJuW2Uuc3RyaW5ncywuLi5lLnZhbHVlc119LG1pZGRsZXdhcmVBcmdzVG9SZXF1ZXN0QXJncyhlKXtsZXRbciwuLi50XT1lO3JldHVybiBuZXcgb2Uocix0KX19LFdsPXtyZXF1ZXN0QXJnc1RvTWlkZGxld2FyZUFyZ3MoZSl7cmV0dXJuW2VdfSxtaWRkbGV3YXJlQXJnc1RvUmVxdWVzdEFyZ3MoZSl7cmV0dXJuIGVbMF19fTtmdW5jdGlvbiBBbyhlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtsZXQgaSxvPShzPWUpPT57dHJ5e3JldHVybiBzPT09dm9pZCAwfHxzPy5raW5kPT09XCJpdHhcIj9pPz89SmwodChzKSk6SmwodChzKSl9Y2F0Y2goYSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGEpfX07cmV0dXJue2dldCBzcGVjKCl7cmV0dXJuIG59LHRoZW4ocyxhKXtyZXR1cm4gbygpLnRoZW4ocyxhKX0sY2F0Y2gocyl7cmV0dXJuIG8oKS5jYXRjaChzKX0sZmluYWxseShzKXtyZXR1cm4gbygpLmZpbmFsbHkocyl9LHJlcXVlc3RUcmFuc2FjdGlvbihzKXtsZXQgYT1vKHMpO3JldHVybiBhLnJlcXVlc3RUcmFuc2FjdGlvbj9hLnJlcXVlc3RUcmFuc2FjdGlvbihzKTphfSxbU3ltYm9sLnRvU3RyaW5nVGFnXTpcIlByaXNtYVByb21pc2VcIn19fWZ1bmN0aW9uIEpsKGUpe3JldHVybiB0eXBlb2YgZS50aGVuPT1cImZ1bmN0aW9uXCI/ZTpQcm9taXNlLnJlc29sdmUoZSl9dmFyIFBmPWJpLnNwbGl0KFwiLlwiKVswXSxUZj17aXNFbmFibGVkKCl7cmV0dXJuITF9LGdldFRyYWNlUGFyZW50KCl7cmV0dXJuXCIwMC0xMC0xMC0wMFwifSxkaXNwYXRjaEVuZ2luZVNwYW5zKCl7fSxnZXRBY3RpdmVDb250ZXh0KCl7fSxydW5JbkNoaWxkU3BhbihlLHIpe3JldHVybiByKCl9fSxJbz1jbGFzc3tpc0VuYWJsZWQoKXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkuaXNFbmFibGVkKCl9Z2V0VHJhY2VQYXJlbnQocil7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLmdldFRyYWNlUGFyZW50KHIpfWRpc3BhdGNoRW5naW5lU3BhbnMocil7cmV0dXJuIHRoaXMuZ2V0R2xvYmFsVHJhY2luZ0hlbHBlcigpLmRpc3BhdGNoRW5naW5lU3BhbnMocil9Z2V0QWN0aXZlQ29udGV4dCgpe3JldHVybiB0aGlzLmdldEdsb2JhbFRyYWNpbmdIZWxwZXIoKS5nZXRBY3RpdmVDb250ZXh0KCl9cnVuSW5DaGlsZFNwYW4ocix0KXtyZXR1cm4gdGhpcy5nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCkucnVuSW5DaGlsZFNwYW4ocix0KX1nZXRHbG9iYWxUcmFjaW5nSGVscGVyKCl7bGV0IHI9Z2xvYmFsVGhpc1tgViR7UGZ9X1BSSVNNQV9JTlNUUlVNRU5UQVRJT05gXSx0PWdsb2JhbFRoaXMuUFJJU01BX0lOU1RSVU1FTlRBVElPTjtyZXR1cm4gcj8uaGVscGVyPz90Py5oZWxwZXI/P1RmfX07ZnVuY3Rpb24gSGwoKXtyZXR1cm4gbmV3IElvfWZ1bmN0aW9uIEtsKGUscj0oKT0+e30pe2xldCB0LG49bmV3IFByb21pc2UoaT0+dD1pKTtyZXR1cm57dGhlbihpKXtyZXR1cm4tLWU9PT0wJiZ0KHIoKSksaT8uKG4pfX19ZnVuY3Rpb24gWWwoZSl7cmV0dXJuIHR5cGVvZiBlPT1cInN0cmluZ1wiP2U6ZS5yZWR1Y2UoKHIsdCk9PntsZXQgbj10eXBlb2YgdD09XCJzdHJpbmdcIj90OnQubGV2ZWw7cmV0dXJuIG49PT1cInF1ZXJ5XCI/cjpyJiYodD09PVwiaW5mb1wifHxyPT09XCJpbmZvXCIpP1wiaW5mb1wiOm59LHZvaWQgMCl9dmFyIEpuPWNsYXNze19taWRkbGV3YXJlcz1bXTt1c2Uocil7dGhpcy5fbWlkZGxld2FyZXMucHVzaChyKX1nZXQocil7cmV0dXJuIHRoaXMuX21pZGRsZXdhcmVzW3JdfWhhcyhyKXtyZXR1cm4hIXRoaXMuX21pZGRsZXdhcmVzW3JdfWxlbmd0aCgpe3JldHVybiB0aGlzLl9taWRkbGV3YXJlcy5sZW5ndGh9fTt2YXIgWmw9ayhraSgpKTtmdW5jdGlvbiBIbihlKXtyZXR1cm4gdHlwZW9mIGUuYmF0Y2hSZXF1ZXN0SWR4PT1cIm51bWJlclwifWZ1bmN0aW9uIHpsKGUpe2lmKGUuYWN0aW9uIT09XCJmaW5kVW5pcXVlXCImJmUuYWN0aW9uIT09XCJmaW5kVW5pcXVlT3JUaHJvd1wiKXJldHVybjtsZXQgcj1bXTtyZXR1cm4gZS5tb2RlbE5hbWUmJnIucHVzaChlLm1vZGVsTmFtZSksZS5xdWVyeS5hcmd1bWVudHMmJnIucHVzaChrbyhlLnF1ZXJ5LmFyZ3VtZW50cykpLHIucHVzaChrbyhlLnF1ZXJ5LnNlbGVjdGlvbikpLHIuam9pbihcIlwiKX1mdW5jdGlvbiBrbyhlKXtyZXR1cm5gKCR7T2JqZWN0LmtleXMoZSkuc29ydCgpLm1hcCh0PT57bGV0IG49ZVt0XTtyZXR1cm4gdHlwZW9mIG49PVwib2JqZWN0XCImJm4hPT1udWxsP2AoJHt0fSAke2tvKG4pfSlgOnR9KS5qb2luKFwiIFwiKX0pYH12YXIgU2Y9e2FnZ3JlZ2F0ZTohMSxhZ2dyZWdhdGVSYXc6ITEsY3JlYXRlTWFueTohMCxjcmVhdGVNYW55QW5kUmV0dXJuOiEwLGNyZWF0ZU9uZTohMCxkZWxldGVNYW55OiEwLGRlbGV0ZU9uZTohMCxleGVjdXRlUmF3OiEwLGZpbmRGaXJzdDohMSxmaW5kRmlyc3RPclRocm93OiExLGZpbmRNYW55OiExLGZpbmRSYXc6ITEsZmluZFVuaXF1ZTohMSxmaW5kVW5pcXVlT3JUaHJvdzohMSxncm91cEJ5OiExLHF1ZXJ5UmF3OiExLHJ1bkNvbW1hbmRSYXc6ITAsdXBkYXRlTWFueTohMCx1cGRhdGVNYW55QW5kUmV0dXJuOiEwLHVwZGF0ZU9uZTohMCx1cHNlcnRPbmU6ITB9O2Z1bmN0aW9uIE9vKGUpe3JldHVybiBTZltlXX12YXIgS249Y2xhc3N7Y29uc3RydWN0b3Iocil7dGhpcy5vcHRpb25zPXI7dGhpcy5iYXRjaGVzPXt9fWJhdGNoZXM7dGlja0FjdGl2ZT0hMTtyZXF1ZXN0KHIpe2xldCB0PXRoaXMub3B0aW9ucy5iYXRjaEJ5KHIpO3JldHVybiB0Pyh0aGlzLmJhdGNoZXNbdF18fCh0aGlzLmJhdGNoZXNbdF09W10sdGhpcy50aWNrQWN0aXZlfHwodGhpcy50aWNrQWN0aXZlPSEwLHByb2Nlc3MubmV4dFRpY2soKCk9Pnt0aGlzLmRpc3BhdGNoQmF0Y2hlcygpLHRoaXMudGlja0FjdGl2ZT0hMX0pKSksbmV3IFByb21pc2UoKG4saSk9Pnt0aGlzLmJhdGNoZXNbdF0ucHVzaCh7cmVxdWVzdDpyLHJlc29sdmU6bixyZWplY3Q6aX0pfSkpOnRoaXMub3B0aW9ucy5zaW5nbGVMb2FkZXIocil9ZGlzcGF0Y2hCYXRjaGVzKCl7Zm9yKGxldCByIGluIHRoaXMuYmF0Y2hlcyl7bGV0IHQ9dGhpcy5iYXRjaGVzW3JdO2RlbGV0ZSB0aGlzLmJhdGNoZXNbcl0sdC5sZW5ndGg9PT0xP3RoaXMub3B0aW9ucy5zaW5nbGVMb2FkZXIodFswXS5yZXF1ZXN0KS50aGVuKG49PntuIGluc3RhbmNlb2YgRXJyb3I/dFswXS5yZWplY3Qobik6dFswXS5yZXNvbHZlKG4pfSkuY2F0Y2gobj0+e3RbMF0ucmVqZWN0KG4pfSk6KHQuc29ydCgobixpKT0+dGhpcy5vcHRpb25zLmJhdGNoT3JkZXIobi5yZXF1ZXN0LGkucmVxdWVzdCkpLHRoaXMub3B0aW9ucy5iYXRjaExvYWRlcih0Lm1hcChuPT5uLnJlcXVlc3QpKS50aGVuKG49PntpZihuIGluc3RhbmNlb2YgRXJyb3IpZm9yKGxldCBpPTA7aTx0Lmxlbmd0aDtpKyspdFtpXS5yZWplY3Qobik7ZWxzZSBmb3IobGV0IGk9MDtpPHQubGVuZ3RoO2krKyl7bGV0IG89bltpXTtvIGluc3RhbmNlb2YgRXJyb3I/dFtpXS5yZWplY3Qobyk6dFtpXS5yZXNvbHZlKG8pfX0pLmNhdGNoKG49Pntmb3IobGV0IGk9MDtpPHQubGVuZ3RoO2krKyl0W2ldLnJlamVjdChuKX0pKX19Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIkRhdGFMb2FkZXJcIn19O2Z1bmN0aW9uIG1yKGUscil7aWYocj09PW51bGwpcmV0dXJuIHI7c3dpdGNoKGUpe2Nhc2VcImJpZ2ludFwiOnJldHVybiBCaWdJbnQocik7Y2FzZVwiYnl0ZXNcIjp7bGV0e2J1ZmZlcjp0LGJ5dGVPZmZzZXQ6bixieXRlTGVuZ3RoOml9PUJ1ZmZlci5mcm9tKHIsXCJiYXNlNjRcIik7cmV0dXJuIG5ldyBVaW50OEFycmF5KHQsbixpKX1jYXNlXCJkZWNpbWFsXCI6cmV0dXJuIG5ldyB2ZShyKTtjYXNlXCJkYXRldGltZVwiOmNhc2VcImRhdGVcIjpyZXR1cm4gbmV3IERhdGUocik7Y2FzZVwidGltZVwiOnJldHVybiBuZXcgRGF0ZShgMTk3MC0wMS0wMVQke3J9WmApO2Nhc2VcImJpZ2ludC1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcImJpZ2ludFwiLHQpKTtjYXNlXCJieXRlcy1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcImJ5dGVzXCIsdCkpO2Nhc2VcImRlY2ltYWwtYXJyYXlcIjpyZXR1cm4gci5tYXAodD0+bXIoXCJkZWNpbWFsXCIsdCkpO2Nhc2VcImRhdGV0aW1lLWFycmF5XCI6cmV0dXJuIHIubWFwKHQ9Pm1yKFwiZGF0ZXRpbWVcIix0KSk7Y2FzZVwiZGF0ZS1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcImRhdGVcIix0KSk7Y2FzZVwidGltZS1hcnJheVwiOnJldHVybiByLm1hcCh0PT5tcihcInRpbWVcIix0KSk7ZGVmYXVsdDpyZXR1cm4gcn19ZnVuY3Rpb24gWW4oZSl7bGV0IHI9W10sdD1SZihlKTtmb3IobGV0IG49MDtuPGUucm93cy5sZW5ndGg7bisrKXtsZXQgaT1lLnJvd3Nbbl0sbz17Li4udH07Zm9yKGxldCBzPTA7czxpLmxlbmd0aDtzKyspb1tlLmNvbHVtbnNbc11dPW1yKGUudHlwZXNbc10saVtzXSk7ci5wdXNoKG8pfXJldHVybiByfWZ1bmN0aW9uIFJmKGUpe2xldCByPXt9O2ZvcihsZXQgdD0wO3Q8ZS5jb2x1bW5zLmxlbmd0aDt0KyspcltlLmNvbHVtbnNbdF1dPW51bGw7cmV0dXJuIHJ9dmFyIENmPU4oXCJwcmlzbWE6Y2xpZW50OnJlcXVlc3RfaGFuZGxlclwiKSx6bj1jbGFzc3tjbGllbnQ7ZGF0YWxvYWRlcjtsb2dFbWl0dGVyO2NvbnN0cnVjdG9yKHIsdCl7dGhpcy5sb2dFbWl0dGVyPXQsdGhpcy5jbGllbnQ9cix0aGlzLmRhdGFsb2FkZXI9bmV3IEtuKHtiYXRjaExvYWRlcjpvbChhc3luYyh7cmVxdWVzdHM6bixjdXN0b21EYXRhUHJveHlGZXRjaDppfSk9PntsZXR7dHJhbnNhY3Rpb246byxvdGVsUGFyZW50Q3R4OnN9PW5bMF0sYT1uLm1hcChwPT5wLnByb3RvY29sUXVlcnkpLGw9dGhpcy5jbGllbnQuX3RyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQocyksdT1uLnNvbWUocD0+T28ocC5wcm90b2NvbFF1ZXJ5LmFjdGlvbikpO3JldHVybihhd2FpdCB0aGlzLmNsaWVudC5fZW5naW5lLnJlcXVlc3RCYXRjaChhLHt0cmFjZXBhcmVudDpsLHRyYW5zYWN0aW9uOkFmKG8pLGNvbnRhaW5zV3JpdGU6dSxjdXN0b21EYXRhUHJveHlGZXRjaDppfSkpLm1hcCgocCxkKT0+e2lmKHAgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gcDt0cnl7cmV0dXJuIHRoaXMubWFwUXVlcnlFbmdpbmVSZXN1bHQobltkXSxwKX1jYXRjaChmKXtyZXR1cm4gZn19KX0pLHNpbmdsZUxvYWRlcjphc3luYyBuPT57bGV0IGk9bi50cmFuc2FjdGlvbj8ua2luZD09PVwiaXR4XCI/WGwobi50cmFuc2FjdGlvbik6dm9pZCAwLG89YXdhaXQgdGhpcy5jbGllbnQuX2VuZ2luZS5yZXF1ZXN0KG4ucHJvdG9jb2xRdWVyeSx7dHJhY2VwYXJlbnQ6dGhpcy5jbGllbnQuX3RyYWNpbmdIZWxwZXIuZ2V0VHJhY2VQYXJlbnQoKSxpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uOmksaXNXcml0ZTpPbyhuLnByb3RvY29sUXVlcnkuYWN0aW9uKSxjdXN0b21EYXRhUHJveHlGZXRjaDpuLmN1c3RvbURhdGFQcm94eUZldGNofSk7cmV0dXJuIHRoaXMubWFwUXVlcnlFbmdpbmVSZXN1bHQobixvKX0sYmF0Y2hCeTpuPT5uLnRyYW5zYWN0aW9uPy5pZD9gdHJhbnNhY3Rpb24tJHtuLnRyYW5zYWN0aW9uLmlkfWA6emwobi5wcm90b2NvbFF1ZXJ5KSxiYXRjaE9yZGVyKG4saSl7cmV0dXJuIG4udHJhbnNhY3Rpb24/LmtpbmQ9PT1cImJhdGNoXCImJmkudHJhbnNhY3Rpb24/LmtpbmQ9PT1cImJhdGNoXCI/bi50cmFuc2FjdGlvbi5pbmRleC1pLnRyYW5zYWN0aW9uLmluZGV4OjB9fSl9YXN5bmMgcmVxdWVzdChyKXt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZGF0YWxvYWRlci5yZXF1ZXN0KHIpfWNhdGNoKHQpe2xldHtjbGllbnRNZXRob2Q6bixjYWxsc2l0ZTppLHRyYW5zYWN0aW9uOm8sYXJnczpzLG1vZGVsTmFtZTphfT1yO3RoaXMuaGFuZGxlQW5kTG9nUmVxdWVzdEVycm9yKHtlcnJvcjp0LGNsaWVudE1ldGhvZDpuLGNhbGxzaXRlOmksdHJhbnNhY3Rpb246byxhcmdzOnMsbW9kZWxOYW1lOmEsZ2xvYmFsT21pdDpyLmdsb2JhbE9taXR9KX19bWFwUXVlcnlFbmdpbmVSZXN1bHQoe2RhdGFQYXRoOnIsdW5wYWNrZXI6dH0sbil7bGV0IGk9bj8uZGF0YSxvPXRoaXMudW5wYWNrKGkscix0KTtyZXR1cm4gcHJvY2Vzcy5lbnYuUFJJU01BX0NMSUVOVF9HRVRfVElNRT97ZGF0YTpvfTpvfWhhbmRsZUFuZExvZ1JlcXVlc3RFcnJvcihyKXt0cnl7dGhpcy5oYW5kbGVSZXF1ZXN0RXJyb3Iocil9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dFbWl0dGVyJiZ0aGlzLmxvZ0VtaXR0ZXIuZW1pdChcImVycm9yXCIse21lc3NhZ2U6dC5tZXNzYWdlLHRhcmdldDpyLmNsaWVudE1ldGhvZCx0aW1lc3RhbXA6bmV3IERhdGV9KSx0fX1oYW5kbGVSZXF1ZXN0RXJyb3Ioe2Vycm9yOnIsY2xpZW50TWV0aG9kOnQsY2FsbHNpdGU6bix0cmFuc2FjdGlvbjppLGFyZ3M6byxtb2RlbE5hbWU6cyxnbG9iYWxPbWl0OmF9KXtpZihDZihyKSxJZihyLGkpKXRocm93IHI7aWYociBpbnN0YW5jZW9mIHomJmtmKHIpKXtsZXQgdT1ldShyLm1ldGEpO0FuKHthcmdzOm8sZXJyb3JzOlt1XSxjYWxsc2l0ZTpuLGVycm9yRm9ybWF0OnRoaXMuY2xpZW50Ll9lcnJvckZvcm1hdCxvcmlnaW5hbE1ldGhvZDp0LGNsaWVudFZlcnNpb246dGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24sZ2xvYmFsT21pdDphfSl9bGV0IGw9ci5tZXNzYWdlO2lmKG4mJihsPWJuKHtjYWxsc2l0ZTpuLG9yaWdpbmFsTWV0aG9kOnQsaXNQYW5pYzpyLmlzUGFuaWMsc2hvd0NvbG9yczp0aGlzLmNsaWVudC5fZXJyb3JGb3JtYXQ9PT1cInByZXR0eVwiLG1lc3NhZ2U6bH0pKSxsPXRoaXMuc2FuaXRpemVNZXNzYWdlKGwpLHIuY29kZSl7bGV0IHU9cz97bW9kZWxOYW1lOnMsLi4uci5tZXRhfTpyLm1ldGE7dGhyb3cgbmV3IHoobCx7Y29kZTpyLmNvZGUsY2xpZW50VmVyc2lvbjp0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbixtZXRhOnUsYmF0Y2hSZXF1ZXN0SWR4OnIuYmF0Y2hSZXF1ZXN0SWR4fSl9ZWxzZXtpZihyLmlzUGFuaWMpdGhyb3cgbmV3IGxlKGwsdGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24pO2lmKHIgaW5zdGFuY2VvZiBqKXRocm93IG5ldyBqKGwse2NsaWVudFZlcnNpb246dGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24sYmF0Y2hSZXF1ZXN0SWR4OnIuYmF0Y2hSZXF1ZXN0SWR4fSk7aWYociBpbnN0YW5jZW9mIFQpdGhyb3cgbmV3IFQobCx0aGlzLmNsaWVudC5fY2xpZW50VmVyc2lvbik7aWYociBpbnN0YW5jZW9mIGxlKXRocm93IG5ldyBsZShsLHRoaXMuY2xpZW50Ll9jbGllbnRWZXJzaW9uKX10aHJvdyByLmNsaWVudFZlcnNpb249dGhpcy5jbGllbnQuX2NsaWVudFZlcnNpb24scn1zYW5pdGl6ZU1lc3NhZ2Uocil7cmV0dXJuIHRoaXMuY2xpZW50Ll9lcnJvckZvcm1hdCYmdGhpcy5jbGllbnQuX2Vycm9yRm9ybWF0IT09XCJwcmV0dHlcIj8oMCxabC5kZWZhdWx0KShyKTpyfXVucGFjayhyLHQsbil7aWYoIXJ8fChyLmRhdGEmJihyPXIuZGF0YSksIXIpKXJldHVybiByO2xldCBpPU9iamVjdC5rZXlzKHIpWzBdLG89T2JqZWN0LnZhbHVlcyhyKVswXSxzPXQuZmlsdGVyKHU9PnUhPT1cInNlbGVjdFwiJiZ1IT09XCJpbmNsdWRlXCIpLGE9aW8obyxzKSxsPWk9PT1cInF1ZXJ5UmF3XCI/WW4oYSk6VHIoYSk7cmV0dXJuIG4/bihsKTpsfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJSZXF1ZXN0SGFuZGxlclwifX07ZnVuY3Rpb24gQWYoZSl7aWYoZSl7aWYoZS5raW5kPT09XCJiYXRjaFwiKXJldHVybntraW5kOlwiYmF0Y2hcIixvcHRpb25zOntpc29sYXRpb25MZXZlbDplLmlzb2xhdGlvbkxldmVsfX07aWYoZS5raW5kPT09XCJpdHhcIilyZXR1cm57a2luZDpcIml0eFwiLG9wdGlvbnM6WGwoZSl9O19lKGUsXCJVbmtub3duIHRyYW5zYWN0aW9uIGtpbmRcIil9fWZ1bmN0aW9uIFhsKGUpe3JldHVybntpZDplLmlkLHBheWxvYWQ6ZS5wYXlsb2FkfX1mdW5jdGlvbiBJZihlLHIpe3JldHVybiBIbihlKSYmcj8ua2luZD09PVwiYmF0Y2hcIiYmZS5iYXRjaFJlcXVlc3RJZHghPT1yLmluZGV4fWZ1bmN0aW9uIGtmKGUpe3JldHVybiBlLmNvZGU9PT1cIlAyMDA5XCJ8fGUuY29kZT09PVwiUDIwMTJcIn1mdW5jdGlvbiBldShlKXtpZihlLmtpbmQ9PT1cIlVuaW9uXCIpcmV0dXJue2tpbmQ6XCJVbmlvblwiLGVycm9yczplLmVycm9ycy5tYXAoZXUpfTtpZihBcnJheS5pc0FycmF5KGUuc2VsZWN0aW9uUGF0aCkpe2xldFssLi4ucl09ZS5zZWxlY3Rpb25QYXRoO3JldHVybnsuLi5lLHNlbGVjdGlvblBhdGg6cn19cmV0dXJuIGV9dmFyIHJ1PVwiNi42LjBcIjt2YXIgdHU9cnU7dmFyIGF1PWsoUWkoKSk7dmFyIEQ9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihyKXtzdXBlcihyK2BcblJlYWQgbW9yZSBhdCBodHRwczovL3ByaXMubHkvZC9jbGllbnQtY29uc3RydWN0b3JgKSx0aGlzLm5hbWU9XCJQcmlzbWFDbGllbnRDb25zdHJ1Y3RvclZhbGlkYXRpb25FcnJvclwifWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJQcmlzbWFDbGllbnRDb25zdHJ1Y3RvclZhbGlkYXRpb25FcnJvclwifX07eChELFwiUHJpc21hQ2xpZW50Q29uc3RydWN0b3JWYWxpZGF0aW9uRXJyb3JcIik7dmFyIG51PVtcImRhdGFzb3VyY2VzXCIsXCJkYXRhc291cmNlVXJsXCIsXCJlcnJvckZvcm1hdFwiLFwiYWRhcHRlclwiLFwibG9nXCIsXCJ0cmFuc2FjdGlvbk9wdGlvbnNcIixcIm9taXRcIixcIl9faW50ZXJuYWxcIl0saXU9W1wicHJldHR5XCIsXCJjb2xvcmxlc3NcIixcIm1pbmltYWxcIl0sb3U9W1wiaW5mb1wiLFwicXVlcnlcIixcIndhcm5cIixcImVycm9yXCJdLERmPXtkYXRhc291cmNlczooZSx7ZGF0YXNvdXJjZU5hbWVzOnJ9KT0+e2lmKGUpe2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBEKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBcImRhdGFzb3VyY2VzXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yYCk7Zm9yKGxldFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpe2lmKCFyLmluY2x1ZGVzKHQpKXtsZXQgaT1Xcih0LHIpfHxgIEF2YWlsYWJsZSBkYXRhc291cmNlczogJHtyLmpvaW4oXCIsIFwiKX1gO3Rocm93IG5ldyBEKGBVbmtub3duIGRhdGFzb3VyY2UgJHt0fSBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtpfWApfWlmKHR5cGVvZiBuIT1cIm9iamVjdFwifHxBcnJheS5pc0FycmF5KG4pKXRocm93IG5ldyBEKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBkYXRhc291cmNlIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkl0IHNob3VsZCBoYXZlIHRoaXMgZm9ybTogeyB1cmw6IFwiQ09OTkVDVElPTl9TVFJJTkdcIiB9YCk7aWYobiYmdHlwZW9mIG49PVwib2JqZWN0XCIpZm9yKGxldFtpLG9db2YgT2JqZWN0LmVudHJpZXMobikpe2lmKGkhPT1cInVybFwiKXRocm93IG5ldyBEKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBkYXRhc291cmNlIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci5cbkl0IHNob3VsZCBoYXZlIHRoaXMgZm9ybTogeyB1cmw6IFwiQ09OTkVDVElPTl9TVFJJTkdcIiB9YCk7aWYodHlwZW9mIG8hPVwic3RyaW5nXCIpdGhyb3cgbmV3IEQoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShvKX0gZm9yIGRhdGFzb3VyY2UgXCIke3R9XCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLlxuSXQgc2hvdWxkIGhhdmUgdGhpcyBmb3JtOiB7IHVybDogXCJDT05ORUNUSU9OX1NUUklOR1wiIH1gKX19fX0sYWRhcHRlcjooZSxyKT0+e2lmKCFlJiZFcihyLmdlbmVyYXRvcik9PT1cImNsaWVudFwiKXRocm93IG5ldyBEKCdVc2luZyBlbmdpbmUgdHlwZSBcImNsaWVudFwiIHJlcXVpcmVzIGEgZHJpdmVyIGFkYXB0ZXIgdG8gYmUgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLicpO2lmKGU9PT1udWxsKXJldHVybjtpZihlPT09dm9pZCAwKXRocm93IG5ldyBEKCdcImFkYXB0ZXJcIiBwcm9wZXJ0eSBtdXN0IG5vdCBiZSB1bmRlZmluZWQsIHVzZSBudWxsIHRvIGNvbmRpdGlvbmFsbHkgZGlzYWJsZSBkcml2ZXIgYWRhcHRlcnMuJyk7aWYoIVduKHIpLmluY2x1ZGVzKFwiZHJpdmVyQWRhcHRlcnNcIikpdGhyb3cgbmV3IEQoJ1wiYWRhcHRlclwiIHByb3BlcnR5IGNhbiBvbmx5IGJlIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3RvciB3aGVuIFwiZHJpdmVyQWRhcHRlcnNcIiBwcmV2aWV3IGZlYXR1cmUgaXMgZW5hYmxlZC4nKTtpZihFcihyLmdlbmVyYXRvcik9PT1cImJpbmFyeVwiKXRocm93IG5ldyBEKCdDYW5ub3QgdXNlIGEgZHJpdmVyIGFkYXB0ZXIgd2l0aCB0aGUgXCJiaW5hcnlcIiBRdWVyeSBFbmdpbmUuIFBsZWFzZSB1c2UgdGhlIFwibGlicmFyeVwiIFF1ZXJ5IEVuZ2luZS4nKX0sZGF0YXNvdXJjZVVybDplPT57aWYodHlwZW9mIGU8XCJ1XCImJnR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBEKGBJbnZhbGlkIHZhbHVlICR7SlNPTi5zdHJpbmdpZnkoZSl9IGZvciBcImRhdGFzb3VyY2VVcmxcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuXG5FeHBlY3RlZCBzdHJpbmcgb3IgdW5kZWZpbmVkLmApfSxlcnJvckZvcm1hdDplPT57aWYoZSl7aWYodHlwZW9mIGUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IEQoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwiZXJyb3JGb3JtYXRcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuYCk7aWYoIWl1LmluY2x1ZGVzKGUpKXtsZXQgcj1XcihlLGl1KTt0aHJvdyBuZXcgRChgSW52YWxpZCBlcnJvckZvcm1hdCAke2V9IHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke3J9YCl9fX0sbG9nOmU9PntpZighZSlyZXR1cm47aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEQoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShlKX0gZm9yIFwibG9nXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLmApO2Z1bmN0aW9uIHIodCl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCImJiFvdS5pbmNsdWRlcyh0KSl7bGV0IG49V3IodCxvdSk7dGhyb3cgbmV3IEQoYEludmFsaWQgbG9nIGxldmVsIFwiJHt0fVwiIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke259YCl9fWZvcihsZXQgdCBvZiBlKXtyKHQpO2xldCBuPXtsZXZlbDpyLGVtaXQ6aT0+e2xldCBvPVtcInN0ZG91dFwiLFwiZXZlbnRcIl07aWYoIW8uaW5jbHVkZXMoaSkpe2xldCBzPVdyKGksbyk7dGhyb3cgbmV3IEQoYEludmFsaWQgdmFsdWUgJHtKU09OLnN0cmluZ2lmeShpKX0gZm9yIFwiZW1pdFwiIGluIGxvZ0xldmVsIHByb3ZpZGVkIHRvIFByaXNtYUNsaWVudCBjb25zdHJ1Y3Rvci4ke3N9YCl9fX07aWYodCYmdHlwZW9mIHQ9PVwib2JqZWN0XCIpZm9yKGxldFtpLG9db2YgT2JqZWN0LmVudHJpZXModCkpaWYobltpXSluW2ldKG8pO2Vsc2UgdGhyb3cgbmV3IEQoYEludmFsaWQgcHJvcGVydHkgJHtpfSBmb3IgXCJsb2dcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3JgKX19LHRyYW5zYWN0aW9uT3B0aW9uczplPT57aWYoIWUpcmV0dXJuO2xldCByPWUubWF4V2FpdDtpZihyIT1udWxsJiZyPD0wKXRocm93IG5ldyBEKGBJbnZhbGlkIHZhbHVlICR7cn0gZm9yIG1heFdhaXQgaW4gXCJ0cmFuc2FjdGlvbk9wdGlvbnNcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuIG1heFdhaXQgbmVlZHMgdG8gYmUgZ3JlYXRlciB0aGFuIDBgKTtsZXQgdD1lLnRpbWVvdXQ7aWYodCE9bnVsbCYmdDw9MCl0aHJvdyBuZXcgRChgSW52YWxpZCB2YWx1ZSAke3R9IGZvciB0aW1lb3V0IGluIFwidHJhbnNhY3Rpb25PcHRpb25zXCIgcHJvdmlkZWQgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yLiB0aW1lb3V0IG5lZWRzIHRvIGJlIGdyZWF0ZXIgdGhhbiAwYCl9LG9taXQ6KGUscik9PntpZih0eXBlb2YgZSE9XCJvYmplY3RcIil0aHJvdyBuZXcgRCgnXCJvbWl0XCIgb3B0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIGFuIG9iamVjdC4nKTtpZihlPT09bnVsbCl0aHJvdyBuZXcgRCgnXCJvbWl0XCIgb3B0aW9uIGNhbiBub3QgYmUgYG51bGxgJyk7bGV0IHQ9W107Zm9yKGxldFtuLGldb2YgT2JqZWN0LmVudHJpZXMoZSkpe2xldCBvPU5mKG4sci5ydW50aW1lRGF0YU1vZGVsKTtpZighbyl7dC5wdXNoKHtraW5kOlwiVW5rbm93bk1vZGVsXCIsbW9kZWxLZXk6bn0pO2NvbnRpbnVlfWZvcihsZXRbcyxhXW9mIE9iamVjdC5lbnRyaWVzKGkpKXtsZXQgbD1vLmZpZWxkcy5maW5kKHU9PnUubmFtZT09PXMpO2lmKCFsKXt0LnB1c2goe2tpbmQ6XCJVbmtub3duRmllbGRcIixtb2RlbEtleTpuLGZpZWxkTmFtZTpzfSk7Y29udGludWV9aWYobC5yZWxhdGlvbk5hbWUpe3QucHVzaCh7a2luZDpcIlJlbGF0aW9uSW5PbWl0XCIsbW9kZWxLZXk6bixmaWVsZE5hbWU6c30pO2NvbnRpbnVlfXR5cGVvZiBhIT1cImJvb2xlYW5cIiYmdC5wdXNoKHtraW5kOlwiSW52YWxpZEZpZWxkVmFsdWVcIixtb2RlbEtleTpuLGZpZWxkTmFtZTpzfSl9fWlmKHQubGVuZ3RoPjApdGhyb3cgbmV3IEQoTGYoZSx0KSl9LF9faW50ZXJuYWw6ZT0+e2lmKCFlKXJldHVybjtsZXQgcj1bXCJkZWJ1Z1wiLFwiZW5naW5lXCIsXCJjb25maWdPdmVycmlkZVwiXTtpZih0eXBlb2YgZSE9XCJvYmplY3RcIil0aHJvdyBuZXcgRChgSW52YWxpZCB2YWx1ZSAke0pTT04uc3RyaW5naWZ5KGUpfSBmb3IgXCJfX2ludGVybmFsXCIgdG8gUHJpc21hQ2xpZW50IGNvbnN0cnVjdG9yYCk7Zm9yKGxldFt0XW9mIE9iamVjdC5lbnRyaWVzKGUpKWlmKCFyLmluY2x1ZGVzKHQpKXtsZXQgbj1Xcih0LHIpO3Rocm93IG5ldyBEKGBJbnZhbGlkIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkodCl9IGZvciBcIl9faW50ZXJuYWxcIiBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtufWApfX19O2Z1bmN0aW9uIGx1KGUscil7Zm9yKGxldFt0LG5db2YgT2JqZWN0LmVudHJpZXMoZSkpe2lmKCFudS5pbmNsdWRlcyh0KSl7bGV0IGk9V3IodCxudSk7dGhyb3cgbmV3IEQoYFVua25vd24gcHJvcGVydHkgJHt0fSBwcm92aWRlZCB0byBQcmlzbWFDbGllbnQgY29uc3RydWN0b3IuJHtpfWApfURmW3RdKG4scil9aWYoZS5kYXRhc291cmNlVXJsJiZlLmRhdGFzb3VyY2VzKXRocm93IG5ldyBEKCdDYW4gbm90IHVzZSBcImRhdGFzb3VyY2VVcmxcIiBhbmQgXCJkYXRhc291cmNlc1wiIG9wdGlvbnMgYXQgdGhlIHNhbWUgdGltZS4gUGljayBvbmUgb2YgdGhlbScpfWZ1bmN0aW9uIFdyKGUscil7aWYoci5sZW5ndGg9PT0wfHx0eXBlb2YgZSE9XCJzdHJpbmdcIilyZXR1cm5cIlwiO2xldCB0PV9mKGUscik7cmV0dXJuIHQ/YCBEaWQgeW91IG1lYW4gXCIke3R9XCI/YDpcIlwifWZ1bmN0aW9uIF9mKGUscil7aWYoci5sZW5ndGg9PT0wKXJldHVybiBudWxsO2xldCB0PXIubWFwKGk9Pih7dmFsdWU6aSxkaXN0YW5jZTooMCxhdS5kZWZhdWx0KShlLGkpfSkpO3Quc29ydCgoaSxvKT0+aS5kaXN0YW5jZTxvLmRpc3RhbmNlPy0xOjEpO2xldCBuPXRbMF07cmV0dXJuIG4uZGlzdGFuY2U8Mz9uLnZhbHVlOm51bGx9ZnVuY3Rpb24gTmYoZSxyKXtyZXR1cm4gc3Uoci5tb2RlbHMsZSk/P3N1KHIudHlwZXMsZSl9ZnVuY3Rpb24gc3UoZSxyKXtsZXQgdD1PYmplY3Qua2V5cyhlKS5maW5kKG49PlllKG4pPT09cik7aWYodClyZXR1cm4gZVt0XX1mdW5jdGlvbiBMZihlLHIpe2xldCB0PV9yKGUpO2ZvcihsZXQgbyBvZiByKXN3aXRjaChvLmtpbmQpe2Nhc2VcIlVua25vd25Nb2RlbFwiOnQuYXJndW1lbnRzLmdldEZpZWxkKG8ubW9kZWxLZXkpPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT5gVW5rbm93biBtb2RlbCBuYW1lOiAke28ubW9kZWxLZXl9LmApO2JyZWFrO2Nhc2VcIlVua25vd25GaWVsZFwiOnQuYXJndW1lbnRzLmdldERlZXBGaWVsZChbby5tb2RlbEtleSxvLmZpZWxkTmFtZV0pPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT5gTW9kZWwgXCIke28ubW9kZWxLZXl9XCIgZG9lcyBub3QgaGF2ZSBhIGZpZWxkIG5hbWVkIFwiJHtvLmZpZWxkTmFtZX1cIi5gKTticmVhaztjYXNlXCJSZWxhdGlvbkluT21pdFwiOnQuYXJndW1lbnRzLmdldERlZXBGaWVsZChbby5tb2RlbEtleSxvLmZpZWxkTmFtZV0pPy5tYXJrQXNFcnJvcigpLHQuYWRkRXJyb3JNZXNzYWdlKCgpPT4nUmVsYXRpb25zIGFyZSBhbHJlYWR5IGV4Y2x1ZGVkIGJ5IGRlZmF1bHQgYW5kIGNhbiBub3QgYmUgc3BlY2lmaWVkIGluIFwib21pdFwiLicpO2JyZWFrO2Nhc2VcIkludmFsaWRGaWVsZFZhbHVlXCI6dC5hcmd1bWVudHMuZ2V0RGVlcEZpZWxkVmFsdWUoW28ubW9kZWxLZXksby5maWVsZE5hbWVdKT8ubWFya0FzRXJyb3IoKSx0LmFkZEVycm9yTWVzc2FnZSgoKT0+XCJPbWl0IGZpZWxkIG9wdGlvbiB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbi5cIik7YnJlYWt9bGV0e21lc3NhZ2U6bixhcmdzOml9PUNuKHQsXCJjb2xvcmxlc3NcIik7cmV0dXJuYEVycm9yIHZhbGlkYXRpbmcgXCJvbWl0XCIgb3B0aW9uOlxuXG4ke2l9XG5cbiR7bn1gfWZ1bmN0aW9uIHV1KGUpe3JldHVybiBlLmxlbmd0aD09PTA/UHJvbWlzZS5yZXNvbHZlKFtdKTpuZXcgUHJvbWlzZSgocix0KT0+e2xldCBuPW5ldyBBcnJheShlLmxlbmd0aCksaT1udWxsLG89ITEscz0wLGE9KCk9PntvfHwocysrLHM9PT1lLmxlbmd0aCYmKG89ITAsaT90KGkpOnIobikpKX0sbD11PT57b3x8KG89ITAsdCh1KSl9O2ZvcihsZXQgdT0wO3U8ZS5sZW5ndGg7dSsrKWVbdV0udGhlbihjPT57blt1XT1jLGEoKX0sYz0+e2lmKCFIbihjKSl7bChjKTtyZXR1cm59Yy5iYXRjaFJlcXVlc3RJZHg9PT11P2woYyk6KGl8fChpPWMpLGEoKSl9KX0pfXZhciBycj1OKFwicHJpc21hOmNsaWVudFwiKTt0eXBlb2YgZ2xvYmFsVGhpcz09XCJvYmplY3RcIiYmKGdsb2JhbFRoaXMuTk9ERV9DTElFTlQ9ITApO3ZhciBGZj17cmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzOmU9PmUsbWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzOmU9PmV9LE1mPVN5bWJvbC5mb3IoXCJwcmlzbWEuY2xpZW50LnRyYW5zYWN0aW9uLmlkXCIpLCRmPXtpZDowLG5leHRJZCgpe3JldHVybisrdGhpcy5pZH19O2Z1bmN0aW9uIGd1KGUpe2NsYXNzIHJ7X29yaWdpbmFsQ2xpZW50PXRoaXM7X3J1bnRpbWVEYXRhTW9kZWw7X3JlcXVlc3RIYW5kbGVyO19jb25uZWN0aW9uUHJvbWlzZTtfZGlzY29ubmVjdGlvblByb21pc2U7X2VuZ2luZUNvbmZpZztfYWNjZWxlcmF0ZUVuZ2luZUNvbmZpZztfY2xpZW50VmVyc2lvbjtfZXJyb3JGb3JtYXQ7X3RyYWNpbmdIZWxwZXI7X21pZGRsZXdhcmVzPW5ldyBKbjtfcHJldmlld0ZlYXR1cmVzO19hY3RpdmVQcm92aWRlcjtfZ2xvYmFsT21pdDtfZXh0ZW5zaW9ucztfZW5naW5lO19hcHBsaWVkUGFyZW50O19jcmVhdGVQcmlzbWFQcm9taXNlPUFvKCk7Y29uc3RydWN0b3Iobil7ZT1uPy5fX2ludGVybmFsPy5jb25maWdPdmVycmlkZT8uKGUpPz9lLGNsKGUpLG4mJmx1KG4sZSk7bGV0IGk9bmV3IG11LkV2ZW50RW1pdHRlcigpLm9uKFwiZXJyb3JcIiwoKT0+e30pO3RoaXMuX2V4dGVuc2lvbnM9TnIuZW1wdHkoKSx0aGlzLl9wcmV2aWV3RmVhdHVyZXM9V24oZSksdGhpcy5fY2xpZW50VmVyc2lvbj1lLmNsaWVudFZlcnNpb24/P3R1LHRoaXMuX2FjdGl2ZVByb3ZpZGVyPWUuYWN0aXZlUHJvdmlkZXIsdGhpcy5fZ2xvYmFsT21pdD1uPy5vbWl0LHRoaXMuX3RyYWNpbmdIZWxwZXI9SGwoKTtsZXQgbz1lLnJlbGF0aXZlRW52UGF0aHMmJntyb290RW52UGF0aDplLnJlbGF0aXZlRW52UGF0aHMucm9vdEVudlBhdGgmJlpuLmRlZmF1bHQucmVzb2x2ZShlLmRpcm5hbWUsZS5yZWxhdGl2ZUVudlBhdGhzLnJvb3RFbnZQYXRoKSxzY2hlbWFFbnZQYXRoOmUucmVsYXRpdmVFbnZQYXRocy5zY2hlbWFFbnZQYXRoJiZabi5kZWZhdWx0LnJlc29sdmUoZS5kaXJuYW1lLGUucmVsYXRpdmVFbnZQYXRocy5zY2hlbWFFbnZQYXRoKX0scztpZihuPy5hZGFwdGVyKXtzPW4uYWRhcHRlcjtsZXQgbD1lLmFjdGl2ZVByb3ZpZGVyPT09XCJwb3N0Z3Jlc3FsXCI/XCJwb3N0Z3Jlc1wiOmUuYWN0aXZlUHJvdmlkZXI7aWYocy5wcm92aWRlciE9PWwpdGhyb3cgbmV3IFQoYFRoZSBEcml2ZXIgQWRhcHRlciBcXGAke3MuYWRhcHRlck5hbWV9XFxgLCBiYXNlZCBvbiBcXGAke3MucHJvdmlkZXJ9XFxgLCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBwcm92aWRlciBcXGAke2x9XFxgIHNwZWNpZmllZCBpbiB0aGUgUHJpc21hIHNjaGVtYS5gLHRoaXMuX2NsaWVudFZlcnNpb24pO2lmKG4uZGF0YXNvdXJjZXN8fG4uZGF0YXNvdXJjZVVybCE9PXZvaWQgMCl0aHJvdyBuZXcgVChcIkN1c3RvbSBkYXRhc291cmNlIGNvbmZpZ3VyYXRpb24gaXMgbm90IGNvbXBhdGlibGUgd2l0aCBQcmlzbWEgRHJpdmVyIEFkYXB0ZXJzLiBQbGVhc2UgZGVmaW5lIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIHN0cmluZyBkaXJlY3RseSBpbiB0aGUgRHJpdmVyIEFkYXB0ZXIgY29uZmlndXJhdGlvbi5cIix0aGlzLl9jbGllbnRWZXJzaW9uKX1sZXQgYT0hcyYmbyYmaXQobyx7Y29uZmxpY3RDaGVjazpcIm5vbmVcIn0pfHxlLmluamVjdGFibGVFZGdlRW52Py4oKTt0cnl7bGV0IGw9bj8/e30sdT1sLl9faW50ZXJuYWw/P3t9LGM9dS5kZWJ1Zz09PSEwO2MmJk4uZW5hYmxlKFwicHJpc21hOmNsaWVudFwiKTtsZXQgcD1abi5kZWZhdWx0LnJlc29sdmUoZS5kaXJuYW1lLGUucmVsYXRpdmVQYXRoKTtmdS5kZWZhdWx0LmV4aXN0c1N5bmMocCl8fChwPWUuZGlybmFtZSkscnIoXCJkaXJuYW1lXCIsZS5kaXJuYW1lKSxycihcInJlbGF0aXZlUGF0aFwiLGUucmVsYXRpdmVQYXRoKSxycihcImN3ZFwiLHApO2xldCBkPXUuZW5naW5lfHx7fTtpZihsLmVycm9yRm9ybWF0P3RoaXMuX2Vycm9yRm9ybWF0PWwuZXJyb3JGb3JtYXQ6cHJvY2Vzcy5lbnYuTk9ERV9FTlY9PT1cInByb2R1Y3Rpb25cIj90aGlzLl9lcnJvckZvcm1hdD1cIm1pbmltYWxcIjpwcm9jZXNzLmVudi5OT19DT0xPUj90aGlzLl9lcnJvckZvcm1hdD1cImNvbG9ybGVzc1wiOnRoaXMuX2Vycm9yRm9ybWF0PVwiY29sb3JsZXNzXCIsdGhpcy5fcnVudGltZURhdGFNb2RlbD1lLnJ1bnRpbWVEYXRhTW9kZWwsdGhpcy5fZW5naW5lQ29uZmlnPXtjd2Q6cCxkaXJuYW1lOmUuZGlybmFtZSxlbmFibGVEZWJ1Z0xvZ3M6YyxhbGxvd1RyaWdnZXJQYW5pYzpkLmFsbG93VHJpZ2dlclBhbmljLHByaXNtYVBhdGg6ZC5iaW5hcnlQYXRoPz92b2lkIDAsZW5naW5lRW5kcG9pbnQ6ZC5lbmRwb2ludCxnZW5lcmF0b3I6ZS5nZW5lcmF0b3Isc2hvd0NvbG9yczp0aGlzLl9lcnJvckZvcm1hdD09PVwicHJldHR5XCIsbG9nTGV2ZWw6bC5sb2cmJllsKGwubG9nKSxsb2dRdWVyaWVzOmwubG9nJiYhISh0eXBlb2YgbC5sb2c9PVwic3RyaW5nXCI/bC5sb2c9PT1cInF1ZXJ5XCI6bC5sb2cuZmluZChmPT50eXBlb2YgZj09XCJzdHJpbmdcIj9mPT09XCJxdWVyeVwiOmYubGV2ZWw9PT1cInF1ZXJ5XCIpKSxlbnY6YT8ucGFyc2VkPz97fSxmbGFnczpbXSxlbmdpbmVXYXNtOmUuZW5naW5lV2FzbSxjb21waWxlcldhc206ZS5jb21waWxlcldhc20sY2xpZW50VmVyc2lvbjplLmNsaWVudFZlcnNpb24sZW5naW5lVmVyc2lvbjplLmVuZ2luZVZlcnNpb24scHJldmlld0ZlYXR1cmVzOnRoaXMuX3ByZXZpZXdGZWF0dXJlcyxhY3RpdmVQcm92aWRlcjplLmFjdGl2ZVByb3ZpZGVyLGlubGluZVNjaGVtYTplLmlubGluZVNjaGVtYSxvdmVycmlkZURhdGFzb3VyY2VzOnBsKGwsZS5kYXRhc291cmNlTmFtZXMpLGlubGluZURhdGFzb3VyY2VzOmUuaW5saW5lRGF0YXNvdXJjZXMsaW5saW5lU2NoZW1hSGFzaDplLmlubGluZVNjaGVtYUhhc2gsdHJhY2luZ0hlbHBlcjp0aGlzLl90cmFjaW5nSGVscGVyLHRyYW5zYWN0aW9uT3B0aW9uczp7bWF4V2FpdDpsLnRyYW5zYWN0aW9uT3B0aW9ucz8ubWF4V2FpdD8/MmUzLHRpbWVvdXQ6bC50cmFuc2FjdGlvbk9wdGlvbnM/LnRpbWVvdXQ/PzVlMyxpc29sYXRpb25MZXZlbDpsLnRyYW5zYWN0aW9uT3B0aW9ucz8uaXNvbGF0aW9uTGV2ZWx9LGxvZ0VtaXR0ZXI6aSxpc0J1bmRsZWQ6ZS5pc0J1bmRsZWQsYWRhcHRlcjpzfSx0aGlzLl9hY2NlbGVyYXRlRW5naW5lQ29uZmlnPXsuLi50aGlzLl9lbmdpbmVDb25maWcsYWNjZWxlcmF0ZVV0aWxzOntyZXNvbHZlRGF0YXNvdXJjZVVybDpqcixnZXRCYXRjaFJlcXVlc3RQYXlsb2FkOk1yLHByaXNtYUdyYXBoUUxUb0pTRXJyb3I6JHIsUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvcjpqLFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3I6VCxQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvcjp6LGRlYnVnOk4oXCJwcmlzbWE6Y2xpZW50OmFjY2VsZXJhdGVFbmdpbmVcIiksZW5naW5lVmVyc2lvbjpwdS52ZXJzaW9uLGNsaWVudFZlcnNpb246ZS5jbGllbnRWZXJzaW9ufX0scnIoXCJjbGllbnRWZXJzaW9uXCIsZS5jbGllbnRWZXJzaW9uKSx0aGlzLl9lbmdpbmU9TWwoZSx0aGlzLl9lbmdpbmVDb25maWcpLHRoaXMuX3JlcXVlc3RIYW5kbGVyPW5ldyB6bih0aGlzLGkpLGwubG9nKWZvcihsZXQgZiBvZiBsLmxvZyl7bGV0IGc9dHlwZW9mIGY9PVwic3RyaW5nXCI/ZjpmLmVtaXQ9PT1cInN0ZG91dFwiP2YubGV2ZWw6bnVsbDtnJiZ0aGlzLiRvbihnLGg9Pnt0dC5sb2coYCR7dHQudGFnc1tnXT8/XCJcIn1gLGgubWVzc2FnZXx8aC5xdWVyeSl9KX19Y2F0Y2gobCl7dGhyb3cgbC5jbGllbnRWZXJzaW9uPXRoaXMuX2NsaWVudFZlcnNpb24sbH1yZXR1cm4gdGhpcy5fYXBwbGllZFBhcmVudD12dCh0aGlzKX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUHJpc21hQ2xpZW50XCJ9JHVzZShuKXt0aGlzLl9taWRkbGV3YXJlcy51c2Uobil9JG9uKG4saSl7cmV0dXJuIG49PT1cImJlZm9yZUV4aXRcIj90aGlzLl9lbmdpbmUub25CZWZvcmVFeGl0KGkpOm4mJnRoaXMuX2VuZ2luZUNvbmZpZy5sb2dFbWl0dGVyLm9uKG4saSksdGhpc30kY29ubmVjdCgpe3RyeXtyZXR1cm4gdGhpcy5fZW5naW5lLnN0YXJ0KCl9Y2F0Y2gobil7dGhyb3cgbi5jbGllbnRWZXJzaW9uPXRoaXMuX2NsaWVudFZlcnNpb24sbn19YXN5bmMgJGRpc2Nvbm5lY3QoKXt0cnl7YXdhaXQgdGhpcy5fZW5naW5lLnN0b3AoKX1jYXRjaChuKXt0aHJvdyBuLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixufWZpbmFsbHl7UW8oKX19JGV4ZWN1dGVSYXdJbnRlcm5hbChuLGksbyxzKXtsZXQgYT10aGlzLl9hY3RpdmVQcm92aWRlcjtyZXR1cm4gdGhpcy5fcmVxdWVzdCh7YWN0aW9uOlwiZXhlY3V0ZVJhd1wiLGFyZ3M6byx0cmFuc2FjdGlvbjpuLGNsaWVudE1ldGhvZDppLGFyZ3NNYXBwZXI6Q28oe2NsaWVudE1ldGhvZDppLGFjdGl2ZVByb3ZpZGVyOmF9KSxjYWxsc2l0ZTpaZSh0aGlzLl9lcnJvckZvcm1hdCksZGF0YVBhdGg6W10sbWlkZGxld2FyZUFyZ3NNYXBwZXI6c30pfSRleGVjdXRlUmF3KG4sLi4uaSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVByaXNtYVByb21pc2Uobz0+e2lmKG4ucmF3IT09dm9pZCAwfHxuLnNxbCE9PXZvaWQgMCl7bGV0W3MsYV09Y3UobixpKTtyZXR1cm4gUm8odGhpcy5fYWN0aXZlUHJvdmlkZXIscy50ZXh0LHMudmFsdWVzLEFycmF5LmlzQXJyYXkobik/XCJwcmlzbWEuJGV4ZWN1dGVSYXdgPFNRTD5gXCI6XCJwcmlzbWEuJGV4ZWN1dGVSYXcoc3FsYDxTUUw+YClcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1wiLHMsYSl9dGhyb3cgbmV3IFooXCJgJGV4ZWN1dGVSYXdgIGlzIGEgdGFnIGZ1bmN0aW9uLCBwbGVhc2UgdXNlIGl0IGxpa2UgdGhlIGZvbGxvd2luZzpcXG5gYGBcXG5jb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuJGV4ZWN1dGVSYXdgVVBEQVRFIFVzZXIgU0VUIGNvb2wgPSAke3RydWV9IFdIRVJFIGVtYWlsID0gJHsndXNlckBlbWFpbC5jb20nfTtgXFxuYGBgXFxuXFxuT3IgcmVhZCBvdXIgZG9jcyBhdCBodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvcmF3LWRhdGFiYXNlLWFjY2VzcyNleGVjdXRlcmF3XFxuXCIse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pfSl9JGV4ZWN1dGVSYXdVbnNhZmUobiwuLi5pKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShvPT4oUm8odGhpcy5fYWN0aXZlUHJvdmlkZXIsbixpLFwicHJpc21hLiRleGVjdXRlUmF3VW5zYWZlKDxTUUw+LCBbLi4udmFsdWVzXSlcIiksdGhpcy4kZXhlY3V0ZVJhd0ludGVybmFsKG8sXCIkZXhlY3V0ZVJhd1Vuc2FmZVwiLFtuLC4uLmldKSkpfSRydW5Db21tYW5kUmF3KG4pe2lmKGUuYWN0aXZlUHJvdmlkZXIhPT1cIm1vbmdvZGJcIil0aHJvdyBuZXcgWihgVGhlICR7ZS5hY3RpdmVQcm92aWRlcn0gcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAkcnVuQ29tbWFuZFJhdy4gVXNlIHRoZSBtb25nb2RiIHByb3ZpZGVyLmAse2NsaWVudFZlcnNpb246dGhpcy5fY2xpZW50VmVyc2lvbn0pO3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKGk9PnRoaXMuX3JlcXVlc3Qoe2FyZ3M6bixjbGllbnRNZXRob2Q6XCIkcnVuQ29tbWFuZFJhd1wiLGRhdGFQYXRoOltdLGFjdGlvbjpcInJ1bkNvbW1hbmRSYXdcIixhcmdzTWFwcGVyOiRsLGNhbGxzaXRlOlplKHRoaXMuX2Vycm9yRm9ybWF0KSx0cmFuc2FjdGlvbjppfSkpfWFzeW5jICRxdWVyeVJhd0ludGVybmFsKG4saSxvLHMpe2xldCBhPXRoaXMuX2FjdGl2ZVByb3ZpZGVyO3JldHVybiB0aGlzLl9yZXF1ZXN0KHthY3Rpb246XCJxdWVyeVJhd1wiLGFyZ3M6byx0cmFuc2FjdGlvbjpuLGNsaWVudE1ldGhvZDppLGFyZ3NNYXBwZXI6Q28oe2NsaWVudE1ldGhvZDppLGFjdGl2ZVByb3ZpZGVyOmF9KSxjYWxsc2l0ZTpaZSh0aGlzLl9lcnJvckZvcm1hdCksZGF0YVBhdGg6W10sbWlkZGxld2FyZUFyZ3NNYXBwZXI6c30pfSRxdWVyeVJhdyhuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PntpZihuLnJhdyE9PXZvaWQgMHx8bi5zcWwhPT12b2lkIDApcmV0dXJuIHRoaXMuJHF1ZXJ5UmF3SW50ZXJuYWwobyxcIiRxdWVyeVJhd1wiLC4uLmN1KG4saSkpO3Rocm93IG5ldyBaKFwiYCRxdWVyeVJhd2AgaXMgYSB0YWcgZnVuY3Rpb24sIHBsZWFzZSB1c2UgaXQgbGlrZSB0aGUgZm9sbG93aW5nOlxcbmBgYFxcbmNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kcXVlcnlSYXdgU0VMRUNUICogRlJPTSBVc2VyIFdIRVJFIGlkID0gJHsxfSBPUiBlbWFpbCA9ICR7J3VzZXJAZW1haWwuY29tJ307YFxcbmBgYFxcblxcbk9yIHJlYWQgb3VyIGRvY3MgYXQgaHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvY29uY2VwdHMvY29tcG9uZW50cy9wcmlzbWEtY2xpZW50L3Jhdy1kYXRhYmFzZS1hY2Nlc3MjcXVlcnlyYXdcXG5cIix7Y2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9ufSl9KX0kcXVlcnlSYXdUeXBlZChuKXtyZXR1cm4gdGhpcy5fY3JlYXRlUHJpc21hUHJvbWlzZShpPT57aWYoIXRoaXMuX2hhc1ByZXZpZXdGbGFnKFwidHlwZWRTcWxcIikpdGhyb3cgbmV3IFooXCJgdHlwZWRTcWxgIHByZXZpZXcgZmVhdHVyZSBtdXN0IGJlIGVuYWJsZWQgaW4gb3JkZXIgdG8gYWNjZXNzICRxdWVyeVJhd1R5cGVkIEFQSVwiLHtjbGllbnRWZXJzaW9uOnRoaXMuX2NsaWVudFZlcnNpb259KTtyZXR1cm4gdGhpcy4kcXVlcnlSYXdJbnRlcm5hbChpLFwiJHF1ZXJ5UmF3VHlwZWRcIixuKX0pfSRxdWVyeVJhd1Vuc2FmZShuLC4uLmkpe3JldHVybiB0aGlzLl9jcmVhdGVQcmlzbWFQcm9taXNlKG89PnRoaXMuJHF1ZXJ5UmF3SW50ZXJuYWwobyxcIiRxdWVyeVJhd1Vuc2FmZVwiLFtuLC4uLmldKSl9X3RyYW5zYWN0aW9uV2l0aEFycmF5KHtwcm9taXNlczpuLG9wdGlvbnM6aX0pe2xldCBvPSRmLm5leHRJZCgpLHM9S2wobi5sZW5ndGgpLGE9bi5tYXAoKGwsdSk9PntpZihsPy5bU3ltYm9sLnRvU3RyaW5nVGFnXSE9PVwiUHJpc21hUHJvbWlzZVwiKXRocm93IG5ldyBFcnJvcihcIkFsbCBlbGVtZW50cyBvZiB0aGUgYXJyYXkgbmVlZCB0byBiZSBQcmlzbWEgQ2xpZW50IHByb21pc2VzLiBIaW50OiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgbm90IGF3YWl0aW5nIHRoZSBQcmlzbWEgY2xpZW50IGNhbGxzIHlvdSBpbnRlbmRlZCB0byBwYXNzIGluIHRoZSAkdHJhbnNhY3Rpb24gZnVuY3Rpb24uXCIpO2xldCBjPWk/Lmlzb2xhdGlvbkxldmVsPz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLmlzb2xhdGlvbkxldmVsLHA9e2tpbmQ6XCJiYXRjaFwiLGlkOm8saW5kZXg6dSxpc29sYXRpb25MZXZlbDpjLGxvY2s6c307cmV0dXJuIGwucmVxdWVzdFRyYW5zYWN0aW9uPy4ocCk/P2x9KTtyZXR1cm4gdXUoYSl9YXN5bmMgX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrKHtjYWxsYmFjazpuLG9wdGlvbnM6aX0pe2xldCBvPXt0cmFjZXBhcmVudDp0aGlzLl90cmFjaW5nSGVscGVyLmdldFRyYWNlUGFyZW50KCl9LHM9e21heFdhaXQ6aT8ubWF4V2FpdD8/dGhpcy5fZW5naW5lQ29uZmlnLnRyYW5zYWN0aW9uT3B0aW9ucy5tYXhXYWl0LHRpbWVvdXQ6aT8udGltZW91dD8/dGhpcy5fZW5naW5lQ29uZmlnLnRyYW5zYWN0aW9uT3B0aW9ucy50aW1lb3V0LGlzb2xhdGlvbkxldmVsOmk/Lmlzb2xhdGlvbkxldmVsPz90aGlzLl9lbmdpbmVDb25maWcudHJhbnNhY3Rpb25PcHRpb25zLmlzb2xhdGlvbkxldmVsfSxhPWF3YWl0IHRoaXMuX2VuZ2luZS50cmFuc2FjdGlvbihcInN0YXJ0XCIsbyxzKSxsO3RyeXtsZXQgdT17a2luZDpcIml0eFwiLC4uLmF9O2w9YXdhaXQgbih0aGlzLl9jcmVhdGVJdHhDbGllbnQodSkpLGF3YWl0IHRoaXMuX2VuZ2luZS50cmFuc2FjdGlvbihcImNvbW1pdFwiLG8sYSl9Y2F0Y2godSl7dGhyb3cgYXdhaXQgdGhpcy5fZW5naW5lLnRyYW5zYWN0aW9uKFwicm9sbGJhY2tcIixvLGEpLmNhdGNoKCgpPT57fSksdX1yZXR1cm4gbH1fY3JlYXRlSXR4Q2xpZW50KG4pe3JldHVybiBoZSh2dChoZShLYSh0aGlzKSxbcmUoXCJfYXBwbGllZFBhcmVudFwiLCgpPT50aGlzLl9hcHBsaWVkUGFyZW50Ll9jcmVhdGVJdHhDbGllbnQobikpLHJlKFwiX2NyZWF0ZVByaXNtYVByb21pc2VcIiwoKT0+QW8obikpLHJlKE1mLCgpPT5uLmlkKV0pKSxbRnIoZWwpXSl9JHRyYW5zYWN0aW9uKG4saSl7bGV0IG87dHlwZW9mIG49PVwiZnVuY3Rpb25cIj90aGlzLl9lbmdpbmVDb25maWcuYWRhcHRlcj8uYWRhcHRlck5hbWU9PT1cIkBwcmlzbWEvYWRhcHRlci1kMVwiP289KCk9Pnt0aHJvdyBuZXcgRXJyb3IoXCJDbG91ZGZsYXJlIEQxIGRvZXMgbm90IHN1cHBvcnQgaW50ZXJhY3RpdmUgdHJhbnNhY3Rpb25zLiBXZSByZWNvbW1lbmQgeW91IHRvIHJlZmFjdG9yIHlvdXIgcXVlcmllcyB3aXRoIHRoYXQgbGltaXRhdGlvbiBpbiBtaW5kLCBhbmQgdXNlIGJhdGNoIHRyYW5zYWN0aW9ucyB3aXRoIGBwcmlzbWEuJHRyYW5zYWN0aW9ucyhbXSlgIHdoZXJlIGFwcGxpY2FibGUuXCIpfTpvPSgpPT50aGlzLl90cmFuc2FjdGlvbldpdGhDYWxsYmFjayh7Y2FsbGJhY2s6bixvcHRpb25zOml9KTpvPSgpPT50aGlzLl90cmFuc2FjdGlvbldpdGhBcnJheSh7cHJvbWlzZXM6bixvcHRpb25zOml9KTtsZXQgcz17bmFtZTpcInRyYW5zYWN0aW9uXCIsYXR0cmlidXRlczp7bWV0aG9kOlwiJHRyYW5zYWN0aW9uXCJ9fTtyZXR1cm4gdGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihzLG8pfV9yZXF1ZXN0KG4pe24ub3RlbFBhcmVudEN0eD10aGlzLl90cmFjaW5nSGVscGVyLmdldEFjdGl2ZUNvbnRleHQoKTtsZXQgaT1uLm1pZGRsZXdhcmVBcmdzTWFwcGVyPz9GZixvPXthcmdzOmkucmVxdWVzdEFyZ3NUb01pZGRsZXdhcmVBcmdzKG4uYXJncyksZGF0YVBhdGg6bi5kYXRhUGF0aCxydW5JblRyYW5zYWN0aW9uOiEhbi50cmFuc2FjdGlvbixhY3Rpb246bi5hY3Rpb24sbW9kZWw6bi5tb2RlbH0scz17bWlkZGxld2FyZTp7bmFtZTpcIm1pZGRsZXdhcmVcIixtaWRkbGV3YXJlOiEwLGF0dHJpYnV0ZXM6e21ldGhvZDpcIiR1c2VcIn0sYWN0aXZlOiExfSxvcGVyYXRpb246e25hbWU6XCJvcGVyYXRpb25cIixhdHRyaWJ1dGVzOnttZXRob2Q6by5hY3Rpb24sbW9kZWw6by5tb2RlbCxuYW1lOm8ubW9kZWw/YCR7by5tb2RlbH0uJHtvLmFjdGlvbn1gOm8uYWN0aW9ufX19LGE9LTEsbD1hc3luYyB1PT57bGV0IGM9dGhpcy5fbWlkZGxld2FyZXMuZ2V0KCsrYSk7aWYoYylyZXR1cm4gdGhpcy5fdHJhY2luZ0hlbHBlci5ydW5JbkNoaWxkU3BhbihzLm1pZGRsZXdhcmUsST0+Yyh1LFA9PihJPy5lbmQoKSxsKFApKSkpO2xldHtydW5JblRyYW5zYWN0aW9uOnAsYXJnczpkLC4uLmZ9PXUsZz17Li4ubiwuLi5mfTtkJiYoZy5hcmdzPWkubWlkZGxld2FyZUFyZ3NUb1JlcXVlc3RBcmdzKGQpKSxuLnRyYW5zYWN0aW9uIT09dm9pZCAwJiZwPT09ITEmJmRlbGV0ZSBnLnRyYW5zYWN0aW9uO2xldCBoPWF3YWl0IGlsKHRoaXMsZyk7cmV0dXJuIGcubW9kZWw/WGEoe3Jlc3VsdDpoLG1vZGVsTmFtZTpnLm1vZGVsLGFyZ3M6Zy5hcmdzLGV4dGVuc2lvbnM6dGhpcy5fZXh0ZW5zaW9ucyxydW50aW1lRGF0YU1vZGVsOnRoaXMuX3J1bnRpbWVEYXRhTW9kZWwsZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0fSk6aH07cmV0dXJuIHRoaXMuX3RyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4ocy5vcGVyYXRpb24sKCk9Pm5ldyBkdS5Bc3luY1Jlc291cmNlKFwicHJpc21hLWNsaWVudC1yZXF1ZXN0XCIpLnJ1bkluQXN5bmNTY29wZSgoKT0+bChvKSkpfWFzeW5jIF9leGVjdXRlUmVxdWVzdCh7YXJnczpuLGNsaWVudE1ldGhvZDppLGRhdGFQYXRoOm8sY2FsbHNpdGU6cyxhY3Rpb246YSxtb2RlbDpsLGFyZ3NNYXBwZXI6dSx0cmFuc2FjdGlvbjpjLHVucGFja2VyOnAsb3RlbFBhcmVudEN0eDpkLGN1c3RvbURhdGFQcm94eUZldGNoOmZ9KXt0cnl7bj11P3Uobik6bjtsZXQgZz17bmFtZTpcInNlcmlhbGl6ZVwifSxoPXRoaXMuX3RyYWNpbmdIZWxwZXIucnVuSW5DaGlsZFNwYW4oZywoKT0+RG4oe21vZGVsTmFtZTpsLHJ1bnRpbWVEYXRhTW9kZWw6dGhpcy5fcnVudGltZURhdGFNb2RlbCxhY3Rpb246YSxhcmdzOm4sY2xpZW50TWV0aG9kOmksY2FsbHNpdGU6cyxleHRlbnNpb25zOnRoaXMuX2V4dGVuc2lvbnMsZXJyb3JGb3JtYXQ6dGhpcy5fZXJyb3JGb3JtYXQsY2xpZW50VmVyc2lvbjp0aGlzLl9jbGllbnRWZXJzaW9uLHByZXZpZXdGZWF0dXJlczp0aGlzLl9wcmV2aWV3RmVhdHVyZXMsZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0fSkpO3JldHVybiBOLmVuYWJsZWQoXCJwcmlzbWE6Y2xpZW50XCIpJiYocnIoXCJQcmlzbWEgQ2xpZW50IGNhbGw6XCIpLHJyKGBwcmlzbWEuJHtpfSgkeyRhKG4pfSlgKSxycihcIkdlbmVyYXRlZCByZXF1ZXN0OlwiKSxycihKU09OLnN0cmluZ2lmeShoLG51bGwsMikrYFxuYCkpLGM/LmtpbmQ9PT1cImJhdGNoXCImJmF3YWl0IGMubG9jayx0aGlzLl9yZXF1ZXN0SGFuZGxlci5yZXF1ZXN0KHtwcm90b2NvbFF1ZXJ5OmgsbW9kZWxOYW1lOmwsYWN0aW9uOmEsY2xpZW50TWV0aG9kOmksZGF0YVBhdGg6byxjYWxsc2l0ZTpzLGFyZ3M6bixleHRlbnNpb25zOnRoaXMuX2V4dGVuc2lvbnMsdHJhbnNhY3Rpb246Yyx1bnBhY2tlcjpwLG90ZWxQYXJlbnRDdHg6ZCxvdGVsQ2hpbGRDdHg6dGhpcy5fdHJhY2luZ0hlbHBlci5nZXRBY3RpdmVDb250ZXh0KCksZ2xvYmFsT21pdDp0aGlzLl9nbG9iYWxPbWl0LGN1c3RvbURhdGFQcm94eUZldGNoOmZ9KX1jYXRjaChnKXt0aHJvdyBnLmNsaWVudFZlcnNpb249dGhpcy5fY2xpZW50VmVyc2lvbixnfX0kbWV0cmljcz1uZXcgTHIodGhpcyk7X2hhc1ByZXZpZXdGbGFnKG4pe3JldHVybiEhdGhpcy5fZW5naW5lQ29uZmlnLnByZXZpZXdGZWF0dXJlcz8uaW5jbHVkZXMobil9JGFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKXtyZXR1cm4gdGhpcy5fZW5naW5lLmFwcGx5UGVuZGluZ01pZ3JhdGlvbnMoKX0kZXh0ZW5kcz1ZYX1yZXR1cm4gcn1mdW5jdGlvbiBjdShlLHIpe3JldHVybiBxZihlKT9bbmV3IG9lKGUsciksUWxdOltlLFdsXX1mdW5jdGlvbiBxZihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKSYmQXJyYXkuaXNBcnJheShlLnJhdyl9dmFyIGpmPW5ldyBTZXQoW1widG9KU09OXCIsXCIkJHR5cGVvZlwiLFwiYXN5bW1ldHJpY01hdGNoXCIsU3ltYm9sLml0ZXJhdG9yLFN5bWJvbC50b1N0cmluZ1RhZyxTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlLFN5bWJvbC50b1ByaW1pdGl2ZV0pO2Z1bmN0aW9uIGh1KGUpe3JldHVybiBuZXcgUHJveHkoZSx7Z2V0KHIsdCl7aWYodCBpbiByKXJldHVybiByW3RdO2lmKCFqZi5oYXModCkpdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBlbnVtIHZhbHVlOiAke1N0cmluZyh0KX1gKX19KX1mdW5jdGlvbiB5dShlKXtpdChlLHtjb25mbGljdENoZWNrOlwid2FyblwifSl9MCYmKG1vZHVsZS5leHBvcnRzPXtETU1GLERlYnVnLERlY2ltYWwsRXh0ZW5zaW9ucyxNZXRyaWNzQ2xpZW50LFByaXNtYUNsaWVudEluaXRpYWxpemF0aW9uRXJyb3IsUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IsUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3IsUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvcixQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IsUHVibGljLFNxbCxjcmVhdGVQYXJhbSxkZWZpbmVEbW1mUHJvcGVydHksZGVzZXJpYWxpemVKc29uUmVzcG9uc2UsZGVzZXJpYWxpemVSYXdSZXN1bHQsZG1tZlRvUnVudGltZURhdGFNb2RlbCxlbXB0eSxnZXRQcmlzbWFDbGllbnQsZ2V0UnVudGltZSxqb2luLG1ha2VTdHJpY3RFbnVtLG1ha2VUeXBlZFF1ZXJ5RmFjdG9yeSxvYmplY3RFbnVtVmFsdWVzLHJhdyxzZXJpYWxpemVKc29uUXVlcnksc2tpcCxzcWx0YWcsd2FybkVudkNvbmZsaWN0cyx3YXJuT25jZX0pO1xuLyohIEJ1bmRsZWQgbGljZW5zZSBpbmZvcm1hdGlvbjpcblxuZGVjaW1hbC5qcy9kZWNpbWFsLm1qczpcbiAgKCohXG4gICAqICBkZWNpbWFsLmpzIHYxMC41LjBcbiAgICogIEFuIGFyYml0cmFyeS1wcmVjaXNpb24gRGVjaW1hbCB0eXBlIGZvciBKYXZhU2NyaXB0LlxuICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qc1xuICAgKiAgQ29weXJpZ2h0IChjKSAyMDI1IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XG4gICAqICBNSVQgTGljZW5jZVxuICAgKilcbiovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWJyYXJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbImJ1IiwiT2JqZWN0IiwiY3JlYXRlIiwicXQiLCJkZWZpbmVQcm9wZXJ0eSIsIkV1IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3UiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwieHUiLCJnZXRQcm90b3R5cGVPZiIsInZ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJEbyIsImUiLCJyIiwibmUiLCJleHBvcnRzIiwidHIiLCJ0IiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9vIiwibiIsImkiLCJjYWxsIiwiayIsIl9fZXNNb2R1bGUiLCJ2YWx1ZSIsIlB1IiwibWkiLCJfZyIsInNzIiwicHJvY2VzcyIsImFyZ3YiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiaW5kZXhPZiIsInVzIiwiTmciLCJscyIsIk1jIiwicmVxdWlyZSIsImFzIiwiZGUiLCJlbnYiLCJHIiwiUWUiLCJGT1JDRV9DT0xPUiIsIk1hdGgiLCJtaW4iLCJwYXJzZUludCIsImZpIiwibGV2ZWwiLCJoYXNCYXNpYyIsImhhczI1NiIsImhhczE2bSIsImdpIiwiVEVSTSIsInBsYXRmb3JtIiwicmVsZWFzZSIsInNwbGl0IiwiTnVtYmVyIiwic29tZSIsIkNJX05BTUUiLCJ0ZXN0IiwiVEVBTUNJVFlfVkVSU0lPTiIsIkNPTE9SVEVSTSIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwiJGMiLCJpc1RUWSIsInN1cHBvcnRzQ29sb3IiLCJzdGRvdXQiLCJpc2F0dHkiLCJzdGRlcnIiLCJkcyIsIkxnIiwicHMiLCJxYyIsImJyIiwiY3MiLCJleGVjIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwibWFwIiwiaGkiLCJDSSIsIkZPUkNFX0hZUEVSTElOSyIsIk5FVExJRlkiLCJvIiwicyIsIlZURV9WRVJTSU9OIiwiYSIsImwiLCJ1Iiwic3VwcG9ydHNIeXBlcmxpbmsiLCJtcyIsIkhnIiwiamMiLCJuYW1lIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwibWFpbiIsInR5cGVzIiwicmVwb3NpdG9yeSIsInR5cGUiLCJ1cmwiLCJkaXJlY3RvcnkiLCJob21lcGFnZSIsImF1dGhvciIsImJ1Z3MiLCJsaWNlbnNlIiwic2NyaXB0cyIsImRldiIsImJ1aWxkIiwicHJlcHVibGlzaE9ubHkiLCJmaWxlcyIsImRldkRlcGVuZGVuY2llcyIsImFyY2hpdmVyIiwiZG90ZW52IiwiZXNidWlsZCIsImV4ZWNhIiwiZ2xvYmJ5IiwiamVzdCIsImtsZXVyIiwib3BlbiIsInJlc29sdmUiLCJ0ZW1weSIsInRtcCIsInR5cGVzY3JpcHQiLCJ5YXJuIiwiZGVwZW5kZW5jaWVzIiwiYXJnIiwicHJvbXB0cyIsInBlZXJEZXBlbmRlbmNpZXMiLCJwZWVyRGVwZW5kZW5jaWVzTWV0YSIsIm9wdGlvbmFsIiwic2lkZUVmZmVjdHMiLCJFaSIsInpnIiwiVWMiLCJwcmlzbWEiLCJlbmdpbmVzVmVyc2lvbiIsIndpIiwiWHQiLCJicyIsImhoIiwieXMiLCJtYXRjaCIsInJlZHVjZSIsIlJpIiwiRWgiLCJ4cyIsImluZGVudCIsImluY2x1ZGVFbXB0eUxpbmVzIiwiVHlwZUVycm9yIiwicmVwbGFjZSIsInJlcGVhdCIsIlNzIiwidmgiLCJUcyIsIm9ubHlGaXJzdCIsImpvaW4iLCJSZWdFeHAiLCJraSIsIlBoIiwiUnMiLCJYYyIsIkNzIiwiQ2giLCJlcCIsImRlZmF1bHQiLCJsaW50IiwicHJldGVzdCIsInByZXJlbGVhc2UiLCJmdW5kaW5nIiwia2V5d29yZHMiLCJyZWFkbWVGaWxlbmFtZSIsImRlY2FjaGUiLCJzaW5vbiIsInN0YW5kYXJkIiwidGFwIiwiZW5naW5lcyIsIm5vZGUiLCJicm93c2VyIiwiZnMiLCJPcyIsIkFoIiwiTmUiLCJEaSIsIl9pIiwicnAiLCJ0cCIsIm5wIiwiTmkiLCJpcCIsIm9wIiwidG9TdHJpbmciLCJ0cmltIiwic3AiLCJrcyIsIkIiLCJjb25maWdEb3RlbnYiLCJwYXRoIiwicGFyc2VkIiwiRXJyb3IiLCJjb2RlIiwiSXMiLCJ1cCIsImRlY3J5cHQiLCJjaXBoZXJ0ZXh0Iiwia2V5IiwicGFyc2UiLCJhcCIsImxwIiwidG4iLCJET1RFTlZfS0VZIiwiVVJMIiwicGFzc3dvcmQiLCJzZWFyY2hQYXJhbXMiLCJ0b1VwcGVyQ2FzZSIsIkFycmF5IiwiaXNBcnJheSIsImV4aXN0c1N5bmMiLCJlbmRzV2l0aCIsImN3ZCIsIkFzIiwiaG9tZWRpciIsInNsaWNlIiwiY3AiLCJfcGFyc2VWYXVsdCIsInByb2Nlc3NFbnYiLCJwb3B1bGF0ZSIsInBwIiwiZGVidWciLCJlbmNvZGluZyIsInB1c2giLCJyZWFkRmlsZVN5bmMiLCJtZXNzYWdlIiwiZXJyb3IiLCJkcCIsIl9jb25maWdWYXVsdCIsIm1wIiwiQnVmZmVyIiwiZnJvbSIsInN1YmFycmF5IiwiY3JlYXRlRGVjaXBoZXJpdiIsInNldEF1dGhUYWciLCJ1cGRhdGUiLCJmaW5hbCIsIlJhbmdlRXJyb3IiLCJjIiwiZnAiLCJvdmVycmlkZSIsImtleXMiLCJjb25maWciLCJMcyIsIk5oIiwib24iLCJyZXBvVXJsIiwidXNlciIsInJlcG8iLCJzZXQiLCJRaSIsInBiIiwiaWEiLCJjaGFyQ29kZUF0IiwicCIsImQiLCJmIiwiZyIsImgiLCJJIiwiUCIsIlMiLCJiIiwiTyIsIm1lIiwidWEiLCJjYSIsIlZmIiwiRE1NRiIsImx0IiwiRGVidWciLCJOIiwiRGVjaW1hbCIsInZlIiwiRXh0ZW5zaW9ucyIsImVpIiwiTWV0cmljc0NsaWVudCIsIkxyIiwiUHJpc21hQ2xpZW50SW5pdGlhbGl6YXRpb25FcnJvciIsIlQiLCJQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvciIsInoiLCJQcmlzbWFDbGllbnRSdXN0UGFuaWNFcnJvciIsImxlIiwiUHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvciIsImoiLCJQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IiLCJaIiwiUHVibGljIiwicmkiLCJTcWwiLCJvZSIsImNyZWF0ZVBhcmFtIiwiUmEiLCJkZWZpbmVEbW1mUHJvcGVydHkiLCJEYSIsImRlc2VyaWFsaXplSnNvblJlc3BvbnNlIiwiVHIiLCJkZXNlcmlhbGl6ZVJhd1Jlc3VsdCIsIlluIiwiZG1tZlRvUnVudGltZURhdGFNb2RlbCIsIlpzIiwiZW1wdHkiLCJMYSIsImdldFByaXNtYUNsaWVudCIsImd1IiwiZ2V0UnVudGltZSIsInFuIiwiTmEiLCJtYWtlU3RyaWN0RW51bSIsImh1IiwibWFrZVR5cGVkUXVlcnlGYWN0b3J5IiwiX2EiLCJvYmplY3RFbnVtVmFsdWVzIiwiU24iLCJyYXciLCJlbyIsInNlcmlhbGl6ZUpzb25RdWVyeSIsIkRuIiwic2tpcCIsIk9uIiwic3FsdGFnIiwicm8iLCJ3YXJuRW52Q29uZmxpY3RzIiwieXUiLCJ3YXJuT25jZSIsIm90IiwibW9kdWxlIiwiZGVmaW5lRXh0ZW5zaW9uIiwiTm8iLCJnZXRFeHRlbnNpb25Db250ZXh0IiwiTG8iLCIkZXh0ZW5kcyIsInZhbGlkYXRvciIsIkZvIiwianQiLCIkIiwiVm8iLCJiZ0JsYWNrIiwiX3UiLCJiZ0JsdWUiLCJNdSIsImJnQ3lhbiIsInF1IiwiYmdHcmVlbiIsIkx1IiwiYmdNYWdlbnRhIiwiJHUiLCJiZ1JlZCIsIk51IiwiYmdXaGl0ZSIsImp1IiwiYmdZZWxsb3ciLCJGdSIsImJsYWNrIiwiSXUiLCJibHVlIiwibnIiLCJib2xkIiwiVyIsImN5YW4iLCJPZSIsImRpbSIsIkllIiwiZ3JheSIsIkhyIiwiZ3JlZW4iLCJxZSIsImdyZXkiLCJEdSIsImhpZGRlbiIsIkN1IiwiaW52ZXJzZSIsIlJ1IiwiaXRhbGljIiwiU3UiLCJtYWdlbnRhIiwia3UiLCJyZWQiLCJjZSIsInJlc2V0IiwiVHUiLCJzdHJpa2V0aHJvdWdoIiwiQXUiLCJ1bmRlcmxpbmUiLCJZIiwid2hpdGUiLCJPdSIsInllbGxvdyIsImtlIiwidGkiLCJNbyIsIiRvIiwicW8iLCJqbyIsIk5PREVfRElTQUJMRV9DT0xPUlMiLCJOT19DT0xPUiIsImVuYWJsZWQiLCJGIiwiVnUiLCJCbyIsIktyIiwiVW8iLCJEYXRlIiwibm93IiwiQnUiLCJuaSIsImdsb2JhbFRoaXMiLCJERUJVRyIsIkRFQlVHX0NPTE9SUyIsIllyIiwiZW5hYmxlIiwiZGlzYWJsZSIsImxvZyIsImNvbnNvbGUiLCJ3YXJuIiwiZm9ybWF0dGVycyIsIlV1IiwiY29sb3IiLCJuYW1lc3BhY2UiLCJleHRlbmQiLCJzaGlmdCIsIkd1IiwiUHJveHkiLCJTZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzIiwiYWRkIiwiR28iLCJRbyIsImdyIiwiV28iLCJpaSIsIlBSSVNNQV9RVUVSWV9FTkdJTkVfTElCUkFSWSIsImFyY2giLCJvaSIsIlZ0IiwiQnQiLCJpbmNsdWRlcyIsIllvIiwiY2kiLCJKdCIsIkRlIiwiU3ltYm9sIiwiZm9yIiwiUXUiLCJHdCIsInNpIiwiVXQiLCJFZSIsIm1hdGNoZWQiLCJzZWxlY3Rpb25zIiwiZm9yRWFjaCIsImV2ZXJ5IiwiUmVmbGVjdCIsIm93bktleXMiLCJtYXRjaGVyVHlwZSIsImlzIiwiR2UiLCJnZXRTZWxlY3Rpb25LZXlzIiwienIiLCJ2YWx1ZXMiLCJjb25jYXQiLCJwZSIsImFzc2lnbiIsIld1IiwiYW5kIiwicSIsIm9yIiwiSnUiLCJzZWxlY3QiLCJKbyIsIkMiLCJ5ZSIsImplIiwiVmUiLCJlZyIsIkJlIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwicmVnZXgiLCJyZyIsImJlIiwiYmV0d2VlbiIsImd0IiwibHRlIiwiZ3RlIiwiaW50IiwiaXNJbnRlZ2VyIiwiZmluaXRlIiwiaXNGaW5pdGUiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwidGciLCJVZSIsIm5nIiwiaWciLCJvZyIsInNnIiwiYWciLCJhaSIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJsaSIsImhyIiwidWkiLCJzdGF0ZSIsIndpdGgiLCJ3aGVuIiwib3RoZXJ3aXNlIiwiZXhoYXVzdGl2ZSIsInJ1biIsInJldHVyblR5cGUiLCJ6byIsIkh1IiwiS3UiLCJQUklTTUFfRElTQUJMRV9XQVJOSU5HUyIsIlF0IiwiWXUiLCJwcm9taXNpZnkiLCJlZSIsInp1IiwiWm8iLCJIdCIsInRhcmdldERpc3RybyIsIlh1IiwiYWMiLCJyYyIsImFyY2hGcm9tVW5hbWUiLCJmYW1pbHlEaXN0cm8iLCJsaWJzc2wiLCJ0YyIsIlp1IiwidG9Mb3dlckNhc2UiLCJpZCIsImlkTGlrZSIsIm9yaWdpbmFsRGlzdHJvIiwicmVhZEZpbGUiLCJlYyIsIlhvIiwiSG8iLCJycyIsIktvIiwic3RyYXRlZ3kiLCJuYyIsInJlYWRkaXIiLCJmaW5kIiwiaXIiLCJiaW5hcnlUYXJnZXQiLCJlcyIsImljIiwicGkiLCJtZW1vaXplZCIsIld0IiwiUHJvbWlzZSIsIm9jIiwic2MiLCJtYWNoaW5lIiwienQiLCJiZWVwIiwiX2MiLCJjbGVhclNjcmVlbiIsIkljIiwiY2xlYXJUZXJtaW5hbCIsImtjIiwiY3Vyc29yQmFja3dhcmQiLCJmYyIsImN1cnNvckRvd24iLCJkYyIsImN1cnNvckZvcndhcmQiLCJtYyIsImN1cnNvckdldFBvc2l0aW9uIiwieWMiLCJjdXJzb3JIaWRlIiwid2MiLCJjdXJzb3JMZWZ0IiwiY3Vyc29yTW92ZSIsInBjIiwiY3Vyc29yTmV4dExpbmUiLCJiYyIsImN1cnNvclByZXZMaW5lIiwiRWMiLCJjdXJzb3JSZXN0b3JlUG9zaXRpb24iLCJoYyIsImN1cnNvclNhdmVQb3NpdGlvbiIsImdjIiwiY3Vyc29yU2hvdyIsInhjIiwiY3Vyc29yVG8iLCJjYyIsImN1cnNvclVwIiwibnMiLCJlbnRlckFsdGVybmF0aXZlU2NyZWVuIiwiT2MiLCJlcmFzZURvd24iLCJTYyIsImVyYXNlRW5kTGluZSIsIlBjIiwiZXJhc2VMaW5lIiwib3MiLCJlcmFzZUxpbmVzIiwidmMiLCJlcmFzZVNjcmVlbiIsImRpIiwiZXJhc2VTdGFydExpbmUiLCJUYyIsImVyYXNlVXAiLCJSYyIsImV4aXRBbHRlcm5hdGl2ZVNjcmVlbiIsIkRjIiwiaVRlcm0iLCJGYyIsImltYWdlIiwiTGMiLCJsaW5rIiwiTmMiLCJzY3JvbGxEb3duIiwiQWMiLCJzY3JvbGxVcCIsIkNjIiwiWXQiLCJLdCIsIndpbmRvdyIsImRvY3VtZW50IiwiZ2ciLCJ2ZXJzaW9ucyIsImhnIiwiYnVuIiwieWciLCJEZW5vIiwiZGVubyIsImJnIiwiZWxlY3Ryb24iLCJFZyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIndnIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJ4ZyIsIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlIiwidmciLCJTaGFyZWRXb3JrZXJHbG9iYWxTY29wZSIsIlBnIiwiU2VydmljZVdvcmtlckdsb2JhbFNjb3BlIiwiWnIiLCJ1c2VyQWdlbnREYXRhIiwiVGciLCJTZyIsIlJnIiwiQ2ciLCJtYXhUb3VjaFBvaW50cyIsIkFnIiwiQSIsImV0IiwieXIiLCJYciIsInRzIiwibGMiLCJ1YyIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInNldEN3ZCIsImFubm90YXRpb24iLCJ4IiwieSIsInJlcGxhY2VBbGwiLCJpc0hpZGRlbiIsIlp0IiwidGFyZ2V0IiwiZmFsbGJhY2siLCJpc1N1cHBvcnRlZCIsInlpIiwiVmMiLCJiaSIsIkVyIiwiQmMiLCJlbmdpbmVUeXBlIiwiUFJJU01BX0NMSUVOVF9FTkdJTkVfVFlQRSIsIkdjIiwiTSIsIlFjIiwiYWgiLCJncyIsIl9fZGlybmFtZSIsImxoIiwieGkiLCJocyIsInZpIiwic3RhdFN5bmMiLCJtb2RlIiwiY2htb2RTeW5jIiwiUGkiLCJwbGF0Zm9ybUluZm8iLCJFcyIsIlRpIiwid3MiLCJlbiIsIlNpIiwidnMiLCJBaSIsIlN0cmluZyIsIkNpIiwicHJvdmlkZXIiLCJmcm9tRW52VmFyIiwiYmluYXJ5VGFyZ2V0cyIsIldjIiwiSmMiLCJuYXRpdmUiLCJtYXgiLCJlbnRyaWVzIiwicGFkRW5kIiwiSGMiLCJ0dCIsInpjIiwiaW5mbyIsIlljIiwiS2MiLCJxdWVyeSIsIlpjIiwic2hvdWxkIiwiUHMiLCJ0YWdzIiwicnQiLCJJaSIsInJuIiwiX2UiLCJudCIsIk9pIiwic2VwIiwicG9zaXgiLCJGaSIsIm5uIiwid3IiLCJEcyIsImlnbm9yZVByb2Nlc3NFbnYiLCJzdWJzdHJpbmciLCJMaSIsIml0Iiwicm9vdEVudlBhdGgiLCJzY2hlbWFFbnZQYXRoIiwiY29uZmxpY3RDaGVjayIsIl9zIiwiZ3AiLCJOcyIsImRvdGVudlJlc3VsdCIsImZpbHRlciIsIkJvb2xlYW4iLCJyZWxhdGl2ZSIsImhwIiwiRE9URU5WX0NPTkZJR19ERUJVRyIsIk1pIiwieHIiLCIkaSIsImNvbmZpZ3VyYWJsZSIsIkZzIiwiY2xpZW50VmVyc2lvbiIsImVycm9yQ29kZSIsImNhcHR1cmVTdGFja1RyYWNlIiwidG9TdHJpbmdUYWciLCJtZXRhIiwiYmF0Y2hSZXF1ZXN0SWR4Iiwid3JpdGFibGUiLCJ2ciIsIktlIiwicWkiLCJ1biIsImNuIiwiamkiLCJwcmVjaXNpb24iLCJyb3VuZGluZyIsIm1vZHVsbyIsInRvRXhwTmVnIiwidG9FeHBQb3MiLCJtaW5FIiwibWF4RSIsImNyeXB0byIsImpzIiwiTGUiLCJ3IiwiZG4iLCJIZSIsIlZzIiwiQnMiLCJVcyIsIlgiLCJmbG9vciIsIlUiLCJwb3ciLCJ5cCIsImJwIiwiRXAiLCJHcyIsImZlIiwiRSIsIndwIiwieHAiLCJWaSIsIm0iLCJhYnNvbHV0ZVZhbHVlIiwiYWJzIiwiY2VpbCIsImNsYW1wZWRUbyIsImNsYW1wIiwiTmFOIiwiY21wIiwiY29tcGFyZWRUbyIsImNvc2luZSIsImNvcyIsInNkIiwidnAiLCJLcyIsIm5lZyIsImN1YmVSb290IiwiY2JydCIsImlzWmVybyIsIkoiLCJ0b0V4cG9uZW50aWFsIiwidGltZXMiLCJwbHVzIiwiTCIsImVxIiwiY2hhckF0IiwiZGVjaW1hbFBsYWNlcyIsImRpdmlkZWRCeSIsImRpdiIsImRpdmlkZWRUb0ludGVnZXJCeSIsImRpdlRvSW50IiwiZXF1YWxzIiwiZ3JlYXRlclRoYW4iLCJncmVhdGVyVGhhbk9yRXF1YWxUbyIsImh5cGVyYm9saWNDb3NpbmUiLCJjb3NoIiwiZm4iLCJQciIsIm1pbnVzIiwiaHlwZXJib2xpY1NpbmUiLCJzaW5oIiwic3FydCIsImh5cGVyYm9saWNUYW5nZW50IiwidGFuaCIsImludmVyc2VDb3NpbmUiLCJhY29zIiwiaXNOZWciLCJ3ZSIsImF0YW4iLCJpbnZlcnNlSHlwZXJib2xpY0Nvc2luZSIsImFjb3NoIiwibG4iLCJpbnZlcnNlSHlwZXJib2xpY1NpbmUiLCJhc2luaCIsImludmVyc2VIeXBlcmJvbGljVGFuZ2VudCIsImF0YW5oIiwiaW52ZXJzZVNpbmUiLCJhc2luIiwiaW52ZXJzZVRhbmdlbnQiLCJpc0ludCIsImlzTmFOIiwiaXNOZWdhdGl2ZSIsImlzUG9zaXRpdmUiLCJpc1BvcyIsImxlc3NUaGFuIiwibGVzc1RoYW5PckVxdWFsVG8iLCJsb2dhcml0aG0iLCJKZSIsInBuIiwic3QiLCJzdWIiLCJyZXZlcnNlIiwicG9wIiwibW4iLCJtb2QiLCJuYXR1cmFsRXhwb25lbnRpYWwiLCJleHAiLCJCaSIsIm5hdHVyYWxMb2dhcml0aG0iLCJuZWdhdGVkIiwidW5zaGlmdCIsIlFzIiwicm91bmQiLCJzaW5lIiwic2luIiwiVHAiLCJzcXVhcmVSb290IiwidGFuZ2VudCIsInRhbiIsIm11bCIsInRvQmluYXJ5IiwiVWkiLCJ0b0RlY2ltYWxQbGFjZXMiLCJ0b0RQIiwiaWUiLCJ4ZSIsInRvRml4ZWQiLCJ0b0ZyYWN0aW9uIiwidG9IZXhhZGVjaW1hbCIsInRvSGV4IiwidG9OZWFyZXN0IiwidG9OdW1iZXIiLCJ0b09jdGFsIiwidG9Qb3dlciIsIldzIiwiTE4xMCIsInRvUHJlY2lzaW9uIiwidG9TaWduaWZpY2FudERpZ2l0cyIsInRvU0QiLCJ0cnVuY2F0ZWQiLCJ0cnVuYyIsInZhbHVlT2YiLCJ0b0pTT04iLCJXZSIsImFuIiwiYWUiLCJKciIsIlYiLCJ0ZSIsIkFlIiwiSCIsImZyIiwiJHQiLCJYbiIsIksiLCJfIiwiSHMiLCIkcyIsIk1zIiwiSnMiLCJzZWFyY2giLCJQcCIsInNyIiwiU3AiLCJScCIsIkNwIiwiQXAiLCJJcCIsImtwIiwiT3AiLCJEcCIsIl9wIiwiTnAiLCJMcCIsIkZwIiwiTXAiLCJkZWZhdWx0cyIsImdldFJhbmRvbVZhbHVlcyIsInJhbmRvbUJ5dGVzIiwiJHAiLCJxcCIsIllzIiwicXMiLCJST1VORF9VUCIsIlJPVU5EX0RPV04iLCJST1VORF9DRUlMIiwiUk9VTkRfRkxPT1IiLCJST1VORF9IQUxGX1VQIiwiUk9VTkRfSEFMRl9ET1dOIiwiUk9VTkRfSEFMRl9FVkVOIiwiUk9VTkRfSEFMRl9DRUlMIiwiUk9VTkRfSEFMRl9GTE9PUiIsIkVVQ0xJRCIsImNsb25lIiwiaXNEZWNpbWFsIiwiYXRhbjIiLCJqcCIsIlZwIiwiQnAiLCJoeXBvdCIsIlVwIiwiR3AiLCJRcCIsImxvZzEwIiwiSnAiLCJsb2cyIiwiV3AiLCJIcCIsIktwIiwiWXAiLCJ6cCIsIlpwIiwicmFuZG9tIiwiWHAiLCJlZCIsInNpZ24iLCJyZCIsInRkIiwibmQiLCJvZCIsInN1bSIsImFkIiwibGQiLCJ1ZCIsImFyZ3VtZW50cyIsIlVpbnQzMkFycmF5IiwiY29weSIsImNkIiwicGQiLCIkdHlwZSIsIkJpZ0ludCIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIlBlIiwiX21hcCIsImdldE9yQ3JlYXRlIiwiTWFwIiwiWWUiLCJ6cyIsImF0IiwibW9kZWxzIiwiR2kiLCJlbnVtcyIsIlNyIiwiZ24iLCJSciIsIk1vZGVsQWN0aW9uIiwiQ3IiLCJkYXRhbW9kZWxFbnVtVG9TY2hlbWFFbnVtIiwiZGQiLCJmaW5kVW5pcXVlIiwiZmluZFVuaXF1ZU9yVGhyb3ciLCJmaW5kRmlyc3QiLCJmaW5kRmlyc3RPclRocm93IiwiZmluZE1hbnkiLCJjcmVhdGVNYW55IiwiY3JlYXRlTWFueUFuZFJldHVybiIsInVwZGF0ZU1hbnkiLCJ1cGRhdGVNYW55QW5kUmV0dXJuIiwidXBzZXJ0IiwiZGVsZXRlIiwiZGVsZXRlTWFueSIsImdyb3VwQnkiLCJjb3VudCIsImFnZ3JlZ2F0ZSIsImZpbmRSYXciLCJhZ2dyZWdhdGVSYXciLCJuYSIsInRhIiwiWHMiLCJrZXl3b3JkIiwiZW50aXR5IiwicHVuY3R1YXRpb24iLCJkaXJlY3RpdmUiLCJmdW5jdGlvbiIsInZhcmlhYmxlIiwic3RyaW5nIiwiYm9vbGVhbiIsIm51bWJlciIsImNvbW1lbnQiLCJtZCIsImhuIiwiZmQiLCJ2IiwibWFudWFsIiwiUHJpc20iLCJkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ1dGlsIiwiZW5jb2RlIiwiZ2UiLCJjb250ZW50IiwiYWxpYXMiLCJvYmpJZCIsIl9faWQiLCJsYW5ndWFnZXMiLCJpbnNlcnRCZWZvcmUiLCJERlMiLCJwbHVnaW5zIiwiaGlnaGxpZ2h0IiwiZ3JhbW1hciIsImxhbmd1YWdlIiwiaG9va3MiLCJ0b2tlbnMiLCJ0b2tlbml6ZSIsIm1hdGNoR3JhbW1hciIsImluc2lkZSIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJwYXR0ZXJuIiwiZ2xvYmFsIiwic291cmNlIiwibGFzdEluZGV4IiwiaW5kZXgiLCJzcGxpY2UiLCJhcHBseSIsInJlc3QiLCJhbGwiLCJUb2tlbiIsImNsaWtlIiwib3BlcmF0b3IiLCJqYXZhc2NyaXB0IiwicGFyYW1ldGVyIiwiY29uc3RhbnQiLCJtYXJrdXAiLCJ0YWciLCJhZGRJbmxpbmVkIiwiYnVpbHRpbiIsImdkIiwiZWEiLCJoZCIsInJhIiwieW4iLCJyZWFkIiwiZnJvbUNvbnRlbnQiLCJmaXJzdExpbmVOdW1iZXIiLCJsaW5lcyIsImxhc3RMaW5lTnVtYmVyIiwibWFwTGluZUF0IiwibWFwTGluZXMiLCJsaW5lQXQiLCJwcmVwZW5kU3ltYm9sQXQiLCJ5ZCIsImhpZ2hsaWdodFNvdXJjZSIsImJkIiwiRWQiLCJvcmlnaW5hbE1ldGhvZCIsImlzUGFuaWMiLCJjYWxsQXJndW1lbnRzIiwiZnVuY3Rpb25OYW1lIiwid2QiLCJjYWxsc2l0ZSIsImdldExvY2F0aW9uIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImZpbGVOYW1lIiwidmQiLCJ4ZCIsImxvY2F0aW9uIiwib3BlbmluZ0JyYWNlSW5kZXgiLCJjb250ZXh0TGluZXMiLCJwYWRTdGFydCIsImxhc3RJbmRleE9mIiwiUGQiLCJUZCIsImJuIiwic2hvd0NvbG9ycyIsImRhIiwiYWEiLCJsYSIsIlNkIiwiQ2QiLCJFbiIsImFkZEVycm9yTWVzc2FnZSIsImVycm9ycyIsImZsYXRNYXAiLCJraW5kIiwic2VsZWN0aW9uUGF0aCIsImFyZ3VtZW50UGF0aCIsImFyZ3VtZW50IiwidHlwZU5hbWVzIiwiUmQiLCJvYSIsInNhIiwidWUiLCJpc1JlcXVpcmVkIiwibWFrZVJlcXVpcmVkIiwid3JpdGUiLCJjb2xvcnMiLCJjb250ZXh0IiwiYWRkTWFyZ2luU3ltYm9sIiwiQXIiLCJjdXJyZW50TGluZSIsImN1cnJlbnRJbmRlbnQiLCJ3cml0ZUpvaW5lZCIsIndyaXRlTGluZSIsIm5ld0xpbmUiLCJpbmRlbnRlZEN1cnJlbnRMaW5lIiwibWFyZ2luU3ltYm9sIiwiYWZ0ZXJOZXh0TmV3TGluZUNhbGxiYWNrIiwid2l0aEluZGVudCIsInVuaW5kZW50IiwiYWZ0ZXJOZXh0TmV3bGluZSIsImdldEN1cnJlbnRMaW5lTGVuZ3RoIiwid24iLCJtYXJrQXNFcnJvciIsInhuIiwidm4iLCJwYSIsIklyIiwiVGUiLCJpc1VuZGVybGluZWQiLCJjb250ZW50cyIsInNldENvbG9yIiwiemUiLCJoYXNFcnJvciIsImtyIiwiYWRkSXRlbSIsIml0ZW1zIiwiZ2V0RmllbGQiLCJnZXRQcmludFdpZHRoIiwid3JpdGVFbXB0eSIsIndyaXRlV2l0aEl0ZW1zIiwiYXNPYmplY3QiLCJPciIsImFkZEZpZWxkIiwiZmllbGRzIiwiYWRkU3VnZ2VzdGlvbiIsInN1Z2dlc3Rpb25zIiwiZ2V0RGVlcEZpZWxkIiwiZ2V0RGVlcEZpZWxkVmFsdWUiLCJoYXNGaWVsZCIsInJlbW92ZUFsbEZpZWxkcyIsInJlbW92ZUZpZWxkIiwiZ2V0RmllbGRzIiwiaXNFbXB0eSIsImdldEZpZWxkVmFsdWUiLCJnZXREZWVwU3ViU2VsZWN0aW9uVmFsdWUiLCJnZXRTdWJTZWxlY3Rpb25WYWx1ZSIsImdldERlZXBTZWxlY3Rpb25QYXJlbnQiLCJnZXRTZWxlY3Rpb25QYXJlbnQiLCJ3cml0ZVdpdGhDb250ZW50cyIsIlEiLCJ0ZXh0IiwidXQiLCJBZCIsIklkIiwia2QiLCJOZCIsIkxkIiwiRmQiLCJNZCIsIiRkIiwicWQiLCJqZCIsIlZkIiwiQmQiLCJVZCIsImZpcnN0RmllbGQiLCJzZWNvbmRGaWVsZCIsImN0Iiwib3V0cHV0VHlwZSIsImlzUmVsYXRpb24iLCJwdCIsIk9kIiwiRGQiLCJfZCIsImdhIiwiaGEiLCJwYXJlbnRLaW5kIiwiZmllbGQiLCJwYXJlbnQiLCJHZCIsIlFkIiwiZmllbGROYW1lIiwidW5kZXJseWluZ0Vycm9yIiwiV2QiLCJtYSIsInlhIiwiaW5wdXRUeXBlIiwiSGQiLCJpbnB1dFR5cGVzIiwiZmEiLCJlbGVtZW50VHlwZSIsIlBuIiwiaW5mZXJyZWRUeXBlIiwiY29uc3RyYWludHMiLCJtaW5GaWVsZENvdW50IiwicmVxdWlyZWRGaWVsZHMiLCJtYXhGaWVsZENvdW50IiwiSmQiLCJkdCIsIm1vZGVsTmFtZSIsInR5cGVOYW1lIiwiaXNMaXN0IiwiaXNFbnVtIiwiX3RvR3JhcGhRTElucHV0VHlwZSIsIkRyIiwiVG4iLCJKaSIsIldlYWtNYXAiLCJGZSIsIl9nZXROYW1lIiwiX2dldE5hbWVzcGFjZSIsIm10IiwiZnQiLCJIaSIsImh0IiwiY2xhc3NlcyIsIkRiTnVsbCIsIkpzb25OdWxsIiwiQW55TnVsbCIsImluc3RhbmNlcyIsImJhIiwiUm4iLCJLaSIsImVycm9yTWVzc2FnZXMiLCJyZW5kZXJBbGxNZXNzYWdlcyIsIl9yIiwiRWEiLCJ3YSIsImlzQnVmZmVyIiwidG9JU09TdHJpbmciLCJLZCIsIkNuIiwiYXJncyIsIkFuIiwiZXJyb3JGb3JtYXQiLCJnbG9iYWxPbWl0IiwiU2UiLCJ2YSIsInJlc3VsdCIsIiRhbGxNb2RlbHMiLCJZZCIsInhhIiwibmVlZHMiLCJjb21wdXRlIiwiemQiLCJQYSIsIlRhIiwiSW4iLCJjb21wdXRlZEZpZWxkc0NhY2hlIiwibW9kZWxFeHRlbnNpb25zQ2FjaGUiLCJxdWVyeUNhbGxiYWNrc0NhY2hlIiwiY2xpZW50RXh0ZW5zaW9ucyIsImV4dGVuc2lvbiIsImNsaWVudCIsInByZXZpb3VzIiwiZ2V0QWxsQ2xpZW50RXh0ZW5zaW9ucyIsImJhdGNoQ2FsbGJhY2tzIiwiZ2V0QWxsQmF0Y2hRdWVyeUNhbGxiYWNrcyIsIiRfX2ludGVybmFsQmF0Y2giLCJnZXRBbGxDb21wdXRlZEZpZWxkcyIsImdldEFsbE1vZGVsRXh0ZW5zaW9ucyIsIm1vZGVsIiwiZ2V0QWxsUXVlcnlDYWxsYmFja3MiLCIkYWxsT3BlcmF0aW9ucyIsIk5yIiwiaGVhZCIsInNpbmdsZSIsImFwcGVuZCIsImtuIiwiU2EiLCJDYSIsInl0IiwiaWZVbmRlZmluZWQiLCJSZSIsIlpkIiwiZXhlY3V0ZVJhdyIsInF1ZXJ5UmF3IiwicnVuQ29tbWFuZFJhdyIsIkFhIiwiYWN0aW9uIiwicnVudGltZURhdGFNb2RlbCIsImV4dGVuc2lvbnMiLCJjbGllbnRNZXRob2QiLCJwcmV2aWV3RmVhdHVyZXMiLCJZaSIsInJvb3RBcmdzIiwiYnQiLCJpbmNsdWRlIiwib21pdCIsImthIiwic2VsZWN0aW9uIiwiWGQiLCJ0aHJvd1ZhbGlkYXRpb25FcnJvciIsImdldFNlbGVjdGlvblBhdGgiLCJubSIsImVtIiwibW9kZWxPclR5cGUiLCJpc1Jhd0FjdGlvbiIsIiRjb21wb3NpdGVzIiwiJHNjYWxhcnMiLCJybSIsInRtIiwibmVzdFNlbGVjdGlvbiIsInppIiwiZmluZEZpZWxkIiwiZ2V0T3V0cHV0VHlwZURlc2NyaXB0aW9uIiwiZ2V0Q29tcHV0ZWRGaWVsZHMiLCJnZXRHbG9iYWxPbWl0IiwiSWEiLCJnZXRBcmd1bWVudFBhdGgiLCJnZXRBcmd1bWVudE5hbWUiLCJfcmVmIiwiX2NvbnRhaW5lciIsImltIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJvbSIsInNtIiwibmVzdEFyZ3VtZW50IiwiaXNQcmV2aWV3RmVhdHVyZU9uIiwiX19wcmlzbWFSYXdQYXJhbWV0ZXJzX18iLCJwYXJhbXMiLCJzaG91bGRBcHBseUdsb2JhbE9taXQiLCJPYSIsIl9oYXNQcmV2aWV3RmxhZyIsIl9jbGllbnRWZXJzaW9uIiwiX2NsaWVudCIsInByb21ldGhldXMiLCJfZW5naW5lIiwibWV0cmljcyIsImZvcm1hdCIsImpzb24iLCJhbSIsImRhdGFtb2RlbCIsIlppIiwiWGkiLCJfbiIsIkV0Iiwic3FsIiwiTm4iLCJwdSIsImR1IiwibXUiLCJmdSIsIlpuIiwic3RyaW5ncyIsInN0YXRlbWVudCIsImluc3BlY3QiLCJmaWxsIiwid3QiLCJnZXRLZXlzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlIiwiYXIiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJMbiIsIkZuIiwiRmEiLCJoZSIsImxtIiwiTWEiLCJGciIsIk1yIiwiYmF0Y2giLCJ0cmFuc2FjdGlvbiIsImlzb2xhdGlvbkxldmVsIiwib3B0aW9ucyIsIiRhIiwidW0iLCIkciIsInVzZXJfZmFjaW5nX2Vycm9yIiwiZXJyb3JfY29kZSIsImNtIiwiYmF0Y2hfcmVxdWVzdF9pZHgiLCJ4dCIsInFhIiwibW0iLCJnbSIsImJtIiwidm0iLCJ3bSIsInBtIiwiZG0iLCJmaWxlIiwibWV0aG9kTmFtZSIsImNvbHVtbiIsImZtIiwiaG0iLCJ5bSIsIkVtIiwieG0iLCJ0byIsIm5vIiwiX2Vycm9yIiwic3RhY2siLCJaZSIsIiRFbmFibGVkQ2FsbFNpdGUiLCJqYSIsIl9hdmciLCJfY291bnQiLCJfc3VtIiwiX21pbiIsIl9tYXgiLCJxciIsIlRtIiwiX2FsbCIsIk1uIiwiVmEiLCJ1bnBhY2tlciIsImFyZ3NNYXBwZXIiLCJTbSIsIlJtIiwiQmEiLCJDbSIsImJ5IiwiQW0iLCJVYSIsIkdhIiwiUWEiLCJyZWxhdGlvbk5hbWUiLCJXYSIsImlvIiwiSmEiLCJyZWR1Y2VSaWdodCIsIkltIiwia20iLCJvbyIsIl9ydW50aW1lRGF0YU1vZGVsIiwiX2Vycm9yRm9ybWF0IiwiZGF0YVBhdGgiLCJPbSIsIkRtIiwiX20iLCJzbyIsIl9leHRlbnNpb25zIiwiTm0iLCJGbSIsIl9hcHBsaWVkUGFyZW50IiwiX2NyZWF0ZVByaXNtYVByb21pc2UiLCJqc01vZGVsTmFtZSIsIl9yZXF1ZXN0IiwiTG0iLCJIYSIsImFvIiwidnQiLCJNbSIsIiRtIiwiX29yaWdpbmFsQ2xpZW50IiwiS2EiLCJZYSIsIl9fQWNjZWxlcmF0ZUVuZ2luZSIsIl9hY2NlbGVyYXRlRW5naW5lQ29uZmlnIiwiJHVzZSIsIiRvbiIsInphIiwicW0iLCJqbSIsIiRuIiwidmlzaXRvciIsIlphIiwiaW5jbHVkZU9yU2VsZWN0IiwicGFyZW50TW9kZWxOYW1lIiwiWGEiLCJWbSIsImVsIiwicmwiLCJCbSIsIlVtIiwiUHQiLCJubCIsImN1c3RvbURhdGFQcm94eUZldGNoIiwibG9jayIsInRoZW4iLCJfZXhlY3V0ZVJlcXVlc3QiLCJvcGVyYXRpb24iLCJfX2ludGVybmFsUGFyYW1zIiwiYWwiLCJpbCIsIm9sIiwicmVxdWVzdHMiLCJzbCIsInF1ZXJpZXMiLCJ0bCIsImxsIiwidWwiLCJWZXJjZWwiLCJjbCIsInBvc3RpbnN0YWxsIiwiY2lOYW1lIiwicGwiLCJkYXRhc291cmNlcyIsImRhdGFzb3VyY2VVcmwiLCJHbSIsIlFtIiwiQnVuIiwiV20iLCJKbSIsIk5ldGxpZnkiLCJIbSIsIkVkZ2VSdW50aW1lIiwiS20iLCJZbSIsInptIiwid29ya2VyZCIsIm5ldGxpZnkiLCJwcmV0dHlOYW1lIiwiaXNFZGdlIiwiaGwiLCJUdCIsImpuIiwicnVudGltZUJpbmFyeVRhcmdldCIsIlptIiwiZ2VuZXJhdG9yIiwiZ2VuZXJhdG9yQmluYXJ5VGFyZ2V0cyIsIlhlIiwiZXIiLCJzZWFyY2hlZExvY2F0aW9ucyIsImRsIiwiVm4iLCJCbiIsImVycm9yU3RhY2siLCJtbCIsInF1ZXJ5RW5naW5lTmFtZSIsImV4cGVjdGVkTG9jYXRpb24iLCJmbCIsImdsIiwiWG0iLCJlZiIsInlsIiwiYmluYXJ5IiwiUFJJU01BX1FVRVJZX0VOR0lORV9CSU5BUlkiLCJsaWJyYXJ5IiwicHJpc21hUGF0aCIsImVuZ2luZVBhdGgiLCJyZiIsIl9fZmlsZW5hbWUiLCJibCIsImRpcm5hbWUiLCJldmFsIiwic2VhcmNoTG9jYXRpb25zIiwib3V0cHV0IiwibG8iLCJFbCIsIndsIiwieGwiLCJ2bCIsInRpdGxlIiwidGVtcGxhdGUiLCJib2R5IiwiUGwiLCJlbmdpbmVWZXJzaW9uIiwiZGF0YWJhc2UiLCJqciIsImlubGluZURhdGFzb3VyY2VzIiwib3ZlcnJpZGVEYXRhc291cmNlcyIsIlVuIiwiY2F1c2UiLCJzZSIsImlzUmV0cnlhYmxlIiwiUiIsIlZyIiwibHIiLCJ1ciIsInJlc3BvbnNlIiwiaGVhZGVycyIsImNyIiwidW8iLCJTdCIsIlJ0IiwibG9ncyIsIkN0IiwiQXQiLCJjbyIsIkl0IiwidGYiLCJrdCIsIm5mIiwiT3QiLCJwbyIsIkR0IiwibW8iLCJCciIsImZvIiwiX3QiLCJnbyIsIk50Iiwib2YiLCJyZWFzb24iLCJMdCIsIm9rIiwiRW5naW5lTm90U3RhcnRlZCIsIm1zZyIsIkVuZ2luZVN0YXJ0dXBFcnJvciIsIktub3duRW5naW5lU3RhcnR1cEVycm9yIiwiSGVhbHRoY2hlY2tUaW1lb3V0IiwiSURQYXJzZUVycm9yIiwiTm9RdWVyeUVuZ2luZUZvdW5kRXJyb3IiLCJUcmFuc2FjdGlvblN0YXJ0RXJyb3IiLCJJbnRlcmFjdGl2ZVRyYW5zYWN0aW9uTWlzcm91dGVkIiwiSW52YWxpZFJlcXVlc3RFcnJvciIsInN0YXR1cyIsIlVyIiwiVGwiLCJzZXRUaW1lb3V0IiwiTWUiLCJTbCIsIlRleHRFbmNvZGVyIiwiUmwiLCJzZiIsImhvIiwiQ2wiLCJGdCIsInByIiwiZmV0Y2giLCJsZiIsIkFsIiwidWYiLCJQUklTTUFfQ0xJRU5UX0RBVEFfUFJPWFlfQ0xJRU5UX1ZFUlNJT04iLCJjZiIsInN0YXR1c1RleHQiLCJJbCIsImVuY29kZVVSSSIsImtsIiwiR24iLCJ5byIsImFwaUtleSIsInRyYWNpbmdIZWxwZXIiLCJsb2dMZXZlbCIsImxvZ1F1ZXJpZXMiLCJlbmdpbmVIYXNoIiwidHJhY2VwYXJlbnQiLCJpbnRlcmFjdGl2ZVRyYW5zYWN0aW9uIiwiQXV0aG9yaXphdGlvbiIsImlzRW5hYmxlZCIsImdldFRyYWNlUGFyZW50IiwiYnVpbGRDYXB0dXJlU2V0dGluZ3MiLCJNdCIsImlubGluZVNjaGVtYSIsImlubGluZVNjaGVtYUhhc2giLCJsb2dFbWl0dGVyIiwiaGVhZGVyQnVpbGRlciIsInN0YXJ0Iiwic3RhcnRQcm9taXNlIiwiZXh0cmFjdEhvc3RBbmRBcGlLZXkiLCJob3N0IiwicmVtb3RlQ2xpZW50VmVyc2lvbiIsInN0b3AiLCJwcm9wYWdhdGVSZXNwb25zZUV4dGVuc2lvbnMiLCJlbWl0IiwidGltZXN0YW1wIiwiYXR0cmlidXRlcyIsImR1cmF0aW9uIiwiZHVyYXRpb25fbXMiLCJ0cmFjZXMiLCJkaXNwYXRjaEVuZ2luZVNwYW5zIiwib25CZWZvcmVFeGl0IiwidXBsb2FkU2NoZW1hIiwiaW50ZXJuYWwiLCJydW5JbkNoaWxkU3BhbiIsIm1ldGhvZCIsInJlcXVlc3QiLCJyZXF1ZXN0SW50ZXJuYWwiLCJyZXF1ZXN0QmF0Y2giLCJjb252ZXJ0UHJvdG9jb2xFcnJvcnNUb0NsaWVudEVycm9yIiwid2l0aFJldHJ5IiwiYWN0aW9uR2VydW5kIiwiY2FsbGJhY2siLCJsb2dIdHRwQ2FsbCIsInBheWxvYWQiLCJlbmRwb2ludCIsImhhbmRsZUVycm9yIiwiYmF0Y2hSZXN1bHQiLCJjb21taXQiLCJyb2xsYmFjayIsIm1heF93YWl0IiwibWF4V2FpdCIsInRpbWVvdXQiLCJpc29sYXRpb25fbGV2ZWwiLCJwcm90b2NvbCIsImFjdGl2ZVByb3ZpZGVyIiwiYXBwbHlQZW5kaW5nTWlncmF0aW9ucyIsImJvIiwiUW4iLCJkciIsIk9sIiwiRW8iLCJjb25zdW1lRXJyb3IiLCJyZWdpc3RlcmVkRXJyb3JzIiwicmVnaXN0ZXJOZXdFcnJvciIsIndvIiwiYWRhcHRlck5hbWUiLCJlcnJvclJlZ2lzdHJ5IiwiJGUiLCJiaW5kIiwiZXhlY3V0ZVNjcmlwdCIsImRpc3Bvc2UiLCJzdGFydFRyYW5zYWN0aW9uIiwicGYiLCJnZXRDb25uZWN0aW9uSW5mbyIsImRmIiwiRGwiLCJ2byIsIl9sIiwieG8iLCJtZiIsImZmIiwidG9OYW1lc3BhY2VkUGF0aCIsImNvbnN0YW50cyIsImRsb3BlbiIsIlJUTERfTEFaWSIsIlJUTERfREVFUEJJTkQiLCJObCIsImxvYWRMaWJyYXJ5IiwiUG8iLCJMbCIsImFkYXB0ZXIiLCJlbmdpbmVXYXNtIiwiZ2V0UXVlcnlFbmdpbmVXYXNtTW9kdWxlIiwiV2ViQXNzZW1ibHkiLCJJbnN0YW5jZSIsIl9fd2JpbmRnZW5fc3RhcnQiLCJfX3diZ19zZXRfd2FzbSIsIlF1ZXJ5RW5naW5lIiwiZGVidWdQYW5pYyIsInJlamVjdCIsImRtbWYiLCJnZiIsIkNlIiwiaGYiLCJpdGVtX3R5cGUiLCJ5ZiIsIkZsIiwiYmYiLCJUbyIsIkVmIiwiR3IiLCJsaWJyYXJ5TG9hZGVyIiwibGlicmFyeVN0YXJ0ZWQiLCJlbmFibGVEZWJ1Z0xvZ3MiLCJkYXRhc291cmNlT3ZlcnJpZGVzIiwibGlicmFyeUluc3RhbnRpYXRpb25Qcm9taXNlIiwiaW5zdGFudGlhdGVMaWJyYXJ5Iiwid3JhcEVuZ2luZSIsImNvbW1pdFRyYW5zYWN0aW9uIiwid2l0aFJlcXVlc3RJZCIsImNvbm5lY3QiLCJkaXNjb25uZWN0Iiwicm9sbGJhY2tUcmFuc2FjdGlvbiIsInNkbFNjaGVtYSIsInRyYWNlIiwiZW5naW5lIiwic3BhbnMiLCJhZGFwdGVyUHJvbWlzZSIsInBhcnNlRW5naW5lUmVzcG9uc2UiLCJ3ZiIsImdldEV4dGVybmFsQWRhcHRlckVycm9yIiwiZ2V0Q3VycmVudEJpbmFyeVRhcmdldCIsImxvYWRFbmdpbmUiLCJRdWVyeUVuZ2luZUNvbnN0cnVjdG9yIiwiV2Vha1JlZiIsImlnbm9yZUVudlZhckVycm9ycyIsImNvbmZpZ0RpciIsImVuZ2luZVByb3RvY29sIiwiZW5hYmxlVHJhY2luZyIsImRlcmVmIiwibG9nZ2VyIiwicGFyc2VJbml0RXJyb3IiLCJtb2R1bGVfcGF0aCIsImxvZ2dlclJ1c3RQYW5pYyIsIlNvIiwibGluZSIsInBhcnNlUmVxdWVzdEVycm9yIiwibGlicmFyeVN0b3BwaW5nUHJvbWlzZSIsImxpYnJhcnlTdGFydGluZ1Byb21pc2UiLCJleGVjdXRpbmdRdWVyeVByb21pc2UiLCJ2ZXJzaW9uSW5mbyIsImxhc3RRdWVyeSIsImJ1aWxkUXVlcnlFcnJvciIsImRhdGEiLCJiYWNrdHJhY2UiLCJpc19wYW5pYyIsIk1sIiwiY29weUVuZ2luZSIsIlduIiwiJGwiLCJjb21tYW5kIiwicWwiLCJRciIsImpsIiwiQmwiLCJwcmlzbWFfX3R5cGUiLCJwcmlzbWFfX3ZhbHVlIiwieGYiLCJVbCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVmwiLCJ2ZiIsIkdsIiwiUm8iLCJDbyIsInBhcmFtZXRlcnMiLCJRbCIsInJlcXVlc3RBcmdzVG9NaWRkbGV3YXJlQXJncyIsIm1pZGRsZXdhcmVBcmdzVG9SZXF1ZXN0QXJncyIsIldsIiwiQW8iLCJKbCIsInNwZWMiLCJjYXRjaCIsImZpbmFsbHkiLCJyZXF1ZXN0VHJhbnNhY3Rpb24iLCJQZiIsIlRmIiwiZ2V0QWN0aXZlQ29udGV4dCIsIklvIiwiZ2V0R2xvYmFsVHJhY2luZ0hlbHBlciIsIlBSSVNNQV9JTlNUUlVNRU5UQVRJT04iLCJoZWxwZXIiLCJIbCIsIktsIiwiWWwiLCJKbiIsInVzZSIsIl9taWRkbGV3YXJlcyIsIlpsIiwiSG4iLCJ6bCIsImtvIiwic29ydCIsIlNmIiwiY3JlYXRlT25lIiwiZGVsZXRlT25lIiwidXBkYXRlT25lIiwidXBzZXJ0T25lIiwiT28iLCJLbiIsInRpY2tBY3RpdmUiLCJiYXRjaGVzIiwiYmF0Y2hCeSIsIm5leHRUaWNrIiwiZGlzcGF0Y2hCYXRjaGVzIiwic2luZ2xlTG9hZGVyIiwiYmF0Y2hPcmRlciIsImJhdGNoTG9hZGVyIiwibXIiLCJSZiIsInJvd3MiLCJjb2x1bW5zIiwiQ2YiLCJ6biIsImRhdGFsb2FkZXIiLCJvdGVsUGFyZW50Q3R4IiwicHJvdG9jb2xRdWVyeSIsIl90cmFjaW5nSGVscGVyIiwiQWYiLCJjb250YWluc1dyaXRlIiwibWFwUXVlcnlFbmdpbmVSZXN1bHQiLCJYbCIsImlzV3JpdGUiLCJoYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3IiLCJ1bnBhY2siLCJQUklTTUFfQ0xJRU5UX0dFVF9USU1FIiwiaGFuZGxlUmVxdWVzdEVycm9yIiwiSWYiLCJrZiIsImV1Iiwic2FuaXRpemVNZXNzYWdlIiwicnUiLCJ0dSIsImF1IiwiRCIsIm51IiwiaXUiLCJvdSIsIkRmIiwiZGF0YXNvdXJjZU5hbWVzIiwiV3IiLCJ0cmFuc2FjdGlvbk9wdGlvbnMiLCJOZiIsIm1vZGVsS2V5IiwiTGYiLCJfX2ludGVybmFsIiwibHUiLCJfZiIsImRpc3RhbmNlIiwic3UiLCJ1dSIsInJyIiwiTk9ERV9DTElFTlQiLCJGZiIsIk1mIiwiJGYiLCJuZXh0SWQiLCIkbWV0cmljcyIsImNvbmZpZ092ZXJyaWRlIiwiRXZlbnRFbWl0dGVyIiwiX3ByZXZpZXdGZWF0dXJlcyIsIl9hY3RpdmVQcm92aWRlciIsIl9nbG9iYWxPbWl0IiwicmVsYXRpdmVFbnZQYXRocyIsImluamVjdGFibGVFZGdlRW52IiwicmVsYXRpdmVQYXRoIiwiX2VuZ2luZUNvbmZpZyIsImFsbG93VHJpZ2dlclBhbmljIiwiYmluYXJ5UGF0aCIsImVuZ2luZUVuZHBvaW50IiwiZmxhZ3MiLCJjb21waWxlcldhc20iLCJpc0J1bmRsZWQiLCJhY2NlbGVyYXRlVXRpbHMiLCJyZXNvbHZlRGF0YXNvdXJjZVVybCIsImdldEJhdGNoUmVxdWVzdFBheWxvYWQiLCJwcmlzbWFHcmFwaFFMVG9KU0Vycm9yIiwiX3JlcXVlc3RIYW5kbGVyIiwiJGNvbm5lY3QiLCIkZGlzY29ubmVjdCIsIiRleGVjdXRlUmF3SW50ZXJuYWwiLCJtaWRkbGV3YXJlQXJnc01hcHBlciIsIiRleGVjdXRlUmF3IiwiY3UiLCIkZXhlY3V0ZVJhd1Vuc2FmZSIsIiRydW5Db21tYW5kUmF3IiwiJHF1ZXJ5UmF3SW50ZXJuYWwiLCIkcXVlcnlSYXciLCIkcXVlcnlSYXdUeXBlZCIsIiRxdWVyeVJhd1Vuc2FmZSIsIl90cmFuc2FjdGlvbldpdGhBcnJheSIsInByb21pc2VzIiwiX3RyYW5zYWN0aW9uV2l0aENhbGxiYWNrIiwiX2NyZWF0ZUl0eENsaWVudCIsIiR0cmFuc2FjdGlvbiIsInJ1bkluVHJhbnNhY3Rpb24iLCJtaWRkbGV3YXJlIiwiYWN0aXZlIiwiZW5kIiwiQXN5bmNSZXNvdXJjZSIsInJ1bkluQXN5bmNTY29wZSIsIm90ZWxDaGlsZEN0eCIsIiRhcHBseVBlbmRpbmdNaWdyYXRpb25zIiwicWYiLCJqZiIsIml0ZXJhdG9yIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwidG9QcmltaXRpdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.prisma/client/runtime/library.js\n");

/***/ })

};
;