// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(student)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses    Course[]    @relation("InstructorCourses")
  reviews    Review[]
  enrolledIn Course[]    @relation("EnrolledStudents", fields: [enrolledIds], references: [id])
  enrolledIds String[]   @db.ObjectId
  submissions Submission[]

  @@map("users")
}

enum Role {
  student
  admin
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  instructorId String   @db.ObjectId
  instructor  User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  price       Float
  imageUrl    String?
  level       Level
  topics      String[]
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  students   User[]    @relation("EnrolledStudents", fields: [studentIds], references: [id])
  studentIds String[]  @db.ObjectId
  reviews    Review[]

  @@map("courses")
}

enum Level {
  beginner
  intermediate
  advanced
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  videoUrl    String?
  order       Int
  courseId    String   @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

model Challenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  difficulty  Difficulty
  startDate   DateTime
  endDate     DateTime
  submissions Submission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("challenges")
}

enum Difficulty {
  easy
  medium
  hard
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  challengeId String   @db.ObjectId
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  content     String
  score       Float?
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("submissions")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model FAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Roadmap {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  steps       RoadmapStep[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("roadmaps")
}

type RoadmapStep {
  id          String
  title       String
  description String
  order       Int
  resources   String[]
}
